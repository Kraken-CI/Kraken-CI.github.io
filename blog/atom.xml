<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kraken.ci/blog</id>
    <title>Kraken CI Blog</title>
    <updated>2024-03-26T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kraken.ci/blog"/>
    <subtitle>Kraken CI Blog</subtitle>
    <icon>https://kraken.ci/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Integration with Radicle]]></title>
        <id>https://kraken.ci/blog/integration-with-radicle</id>
        <link href="https://kraken.ci/blog/integration-with-radicle"/>
        <updated>2024-03-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The main feature introduced by Kraken version]]></summary>
        <content type="html"><![CDATA[<p>The main feature introduced by Kraken version
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.7" target="_blank" rel="noopener noreferrer">1.7</a> is
integration with <a href="https://radicle.xyz" target="_blank" rel="noopener noreferrer">Radicle</a>, a peer-to-peer code
collaboration stack.</p><p>Radilce leverages Git’s architecture combined with cryptography and a
gossip protocol to enable a fully sovereign developer network.  Unlike
centralized platforms like GitHub, there is no single entity
controlling the network or user data. Repositories are replicated
across peers in a decentralized manner.</p><p>To arrange a CI process for Radicle there must be appointed Radicle server that will be used by Kraken CI server so:</p><ul><li>Kraken CI server can listen for webhooks coming from that Radicle server</li><li>Kraken CI can provide links that lead to repositiories, commit
changes, etc from Kraken CI web UI.</li></ul><p>The configuration on Kraken CI side is described in <a href="/docs/guide-webhooks">Webhooks guide</a>.</p><p>The details about setting up Radicle side are presented below. This
description is heavily based on the article <a href="https://hackmd.io/FnPxhc5ESZKHEJFHdA2x6A" target="_blank" rel="noopener noreferrer">Integrating a CI system
using Radicle Webhooks</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="integrating-a-ci-system-using-radicle-webhooks">Integrating a CI system using Radicle Webhooks<a href="#integrating-a-ci-system-using-radicle-webhooks" class="hash-link" aria-label="Direct link to Integrating a CI system using Radicle Webhooks" title="Direct link to Integrating a CI system using Radicle Webhooks">​</a></h2><p>In order to add the desired webhook functionality, expected by Kraken
CI, there must be run the Radicle CI Broker alongside the Radicle
Node. Radicle CI Broker is responsible for grabbing any events that
the Radicle Node generates and for each event it invokes the Radicle
Webhooks Adapter that will invoke any registered outgoing webooks.</p><a href="/img/radicle-ci-arch.png" target="blank"><img src="/img/radicle-ci-arch.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>The second Radicle Node is required so that the first one can receive
any updates from the network and then generate events so the broker
will spawn any registered adapter.</p><blockquote><p>Making changes to a node wont generate any events to the same node.</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="radicle-setup">Radicle Setup<a href="#radicle-setup" class="hash-link" aria-label="Direct link to Radicle Setup" title="Direct link to Radicle Setup">​</a></h3><p>The setup requires a Radicle Node that will be running alongside the
Radicle CI Broker and the Radicle CI Broker that will invoke the
webhooks adapter.</p><p>Another Radicle Node is required with network access to the previous
one (through private, public IP - or even in the same host) that will
make changes to a repository. This way the first node will generate
events about the changes that the broker will grab and invoke the
webhook adapter.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="radicle-nodes">Radicle Nodes<a href="#radicle-nodes" class="hash-link" aria-label="Direct link to Radicle Nodes" title="Direct link to Radicle Nodes">​</a></h4><p>Radicle must be set up following one of the official installation
methodologies from: <a href="https://radicle.xyz/#try" target="_blank" rel="noopener noreferrer">https://radicle.xyz/#try</a>. After the Radicle
installation the <code>rad auth</code> command must be executed. More details
about <code>rad auth</code> can be found
<a href="https://app.radicle.xyz/nodes/seed.radicle.xyz/rad:z3gqcJUoA1n9HaHKufZs5FCSGazv5/tree/radicle-cli/examples/rad-auth.md" target="_blank" rel="noopener noreferrer">here</a>.</p><p>After this you will be able to start your node by running
<code>rad node start</code>. At this point we all set!</p><p>You can run <code>radicle-httpd</code> and <code>rad web</code> so that you can access your
Radicle Node through the web interface. <code>radicle-httpd</code> provides an
HTTP API for managing the Radicle Node. <code>rad web</code> authenticates the
Radicle Node using the <code>radicle-httpd</code> towards
<a href="https://app.radicle.xyz/" target="_blank" rel="noopener noreferrer">https://app.radicle.xyz/</a> so that users can manage their node through
the web client.</p><blockquote><p>Web client and API offers a subset of functionality compared to the rad cli.</p></blockquote><p>You are able to setup and run more Radicle Nodes in the same host by
altering the Radicle's home path through the <code>RAD_HOME</code> environment
variable. So you can set up a new node using the
<code>RAD_HOME=~/.new_radicle rad auth</code>. For the rad web you can provide
the radicle-httpd URL to connect to <code>rad web https://app.radicle.xyz
--connect 127.0.0.1:8080</code>.</p><p>So in order to setup two nodes in our host we have to run:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># Primary Node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">rad auth</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">rad </span><span class="token function" style="color:rgb(130, 170, 255)">node</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">radicle-httpd</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">rad web  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># optionally append with: https://app.radicle.xyz --connect 127.0.0.1:8080</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>For the second node use</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># Secondary Node</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token assign-left variable" style="color:rgb(191, 199, 213)">RAD_HOME</span><span class="token operator" style="color:rgb(137, 221, 255)">=~</span><span class="token plain">/.secondary_radicle rad auth</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token assign-left variable" style="color:rgb(191, 199, 213)">RAD_HOME</span><span class="token operator" style="color:rgb(137, 221, 255)">=~</span><span class="token plain">/.secondary_radicle rad </span><span class="token function" style="color:rgb(130, 170, 255)">node</span><span class="token plain"> start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="radicle-webhooks-adapter">Radicle Webhooks Adapter<a href="#radicle-webhooks-adapter" class="hash-link" aria-label="Direct link to Radicle Webhooks Adapter" title="Direct link to Radicle Webhooks Adapter">​</a></h4><p>As mentioned earlier, the Radicle CI Broker is responsible for
grabbing the Radicle Node events and then invoke any registered
adapter for any event. An adapter is responsible for conducting any
tasks.</p><p>In our case, the Radicle Webhooks Adapter is responsible for invoking
any registered webhooks when an event occurs.</p><blockquote><p>The Radicle Webhooks Adapter binary does not run as a stand alone
application. Radicle CI broker is responsible for spawning it with
the appropriate input data.</p></blockquote><p>Radicle Webhooks Adapter read the webhook configuration from the
repository that the radicle node event occurred.</p><p>The Radicle Webhooks Adapter binary must have appropriate execute permissions.</p><p>The configuration that the adapter requires is:</p><table><thead><tr><th>EnvVar</th><th>Description</th><th>Default Value</th></tr></thead><tbody><tr><td><code>WEBHOOKS_RETRIES</code></td><td>Total attempts until get a successful response.</td><td>3</td></tr><tr><td><code>WEBHOOKS_TIMOUT_SECS</code></td><td>Timeout for webhook request.</td><td>30</td></tr><tr><td><code>RAD_PUBLIC_URL</code></td><td>Public URL of node. Used to generate repos' URL.</td><td>"<a href="http://127.0.0.1:8080%22" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8080"</a></td></tr><tr><td><code>RAD_HOME</code></td><td>Path for radicle home directory.</td><td>"~/.radicle"</td></tr><tr><td><code>RAD_PASSPHRASE</code></td><td>Passphrase for the radicle key.</td><td>""</td></tr></tbody></table><p>More details about the radicle wbhooks adapter can be found at its
<a href="https://app.radicle.xyz/nodes/radicle.yorgos.net.gr/rad:z2hCUNw2T1qU31LyGy7VPEiS7BkxW" target="_blank" rel="noopener noreferrer">repository</a>.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="radicle-ci-broker">Radicle CI Broker<a href="#radicle-ci-broker" class="hash-link" aria-label="Direct link to Radicle CI Broker" title="Direct link to Radicle CI Broker">​</a></h4><p>The Radicle CI Broker is responsible for reading events from the
Radicle Node and invoke any registered adapter. Radicle CI Broker must
be initiated and run at the background at all times in order to grab
and process any new event from the Radicle Node. In our setup we
should connect Radicle CI Broker to our primary node ie. #1.</p><p>The configuration of the broker should be stored in a .yaml file as follows:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ cat ci</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">broker</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">cfg.yaml</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token key atrule">default_adapter</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> webhooks</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token key atrule">adapters</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token key atrule">webhooks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">command</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> radicle</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">webhooks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">adapter</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">filters</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>radicle-webhooks-adapter</code> should be replaced with the full path of
the Radicle webhooks adapter binary path.</p><p>Then the broker can be initiated through the command:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token assign-left variable" style="color:rgb(191, 199, 213)">RUST_LOG</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">debug ./ci-broker ci-broker-cfg.yaml</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>ci-broker-cfg.yaml</code> is the path of the yaml file that contains the broker's configuration.</p><p>More details about the Radicle CI Broker can be found at its
<a href="https://app.radicle.xyz/nodes/radicle.liw.fi/rad:zwTxygwuz5LDGBq255RA2CbNGrz8" target="_blank" rel="noopener noreferrer">repository</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="repository-setup">Repository Setup<a href="#repository-setup" class="hash-link" aria-label="Direct link to Repository Setup" title="Direct link to Repository Setup">​</a></h3><p>Now that Radicle Primary Node with CI Broker is in place we have to
properly setup our repository. We can choose to set it up to any of
the available Radicle Nodes but we should seed it through the node
that runs the broker.</p><p>Now it's time to initialize a Git repository. This will be done in our
secondary node ie. #2. We do it as a normal Git repository through <code>git init</code>
and then we should initialize it as a rad repository through
<code>RAD_HOME=~/.secondary_radicle rad init</code>.</p><p>For more details about how to initialize a repository you can check
this <a href="https://app.radicle.xyz/nodes/seed.radicle.xyz/rad:z3gqcJUoA1n9HaHKufZs5FCSGazv5/tree/radicle-cli/examples/rad-init.md" target="_blank" rel="noopener noreferrer">example</a>.</p><p>Repository should contain the configuration for the webhooks. This
file should be stored under the <code>.radicle/webhooks/</code> directory in our
repo. Each configuration file should be a <code>.yaml</code> (or <code>.yml</code>) that
will contain all the details for each webhook. The schema of the
file's content is like this:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token key atrule">outgoing_webhook_kraken_ci</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">payload_url</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">//kraken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">server/webhooks/25/radicle</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">content_type</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> application/json</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">shared_secret</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> &lt;some</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">secret</span><span class="token punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>outgoing_webhook_kraken_ci</code> is the friendly name of the webhook;</li><li><code>payload_url</code> is the URL that will be invoked when an event occurs,
e.g. <code>https://kraken-server/webhooks/25/radicle</code> where <code>kraken-server</code>
should be replaced with real Kraken CI Server address and 25 with
appropriate project ID in Kraken CI;</li><li><code>content_type</code> is the content type of the payload (currently only
<code>application/json</code> is supported);</li><li><code>shared_secret</code> should be a high entropy secret key used to generate
the SHA-256 hash signature using HMAC hex digest from the provided
webhook's secret token alongside each payload. This result will be
within the headers of the webhook request so that the recipient will
be able to validate the request.</li></ul><p>Multiple webhook configuration files are supported within the
repository using multiple files or separating the entries using the
three dashes <code>---</code>.  As a user stores all the webhooks' details within
the repository these details must be somehow hidden to the rest of the
users. So, these configuration files should be encrypted in order to
ensure that the configuration data are not exposed.</p><p>In order to encrypt these files we should use the <a href="https://github.com/FiloSottile/age" target="_blank" rel="noopener noreferrer">age file encryption
tool</a>. This tool permits the
encryption of a file using multiple public keys and the decryption of
each file using just one of the private keys. After the age tool is
installed you can encrypt each file using the following command:</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">age -encrypt -R radicle1.pub -R radicle2.pub -R radicle3.pub -o destination_for_encrupted_file.yaml file_to_encrypt</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The <code>-R radicleX.pub</code> is added for every public key we want to encrypt
the file with. It is completely fine to use one or more keys. The keys
that should e used are the radicle public/private keys located at
<code>$RAD_HOME/keys/</code> directory. We should encrypt the webhooks settings
using the keys of the users that we permit to be able to view and
propose changes to these settings. We should definitely use the key
that the webhooks adapter will use in order to decrypt the webhooks'
settings files. This key is located under the $RAD_HOME and it's
passphrase should be at $RAD_PASSPHRASE.</p><p>The <code>destination_for_encrupted_file.yaml</code> is the file that should be
committed to the repo. It's critical here to use the public key of the
radicle node where the Radicle CI Broker runs in order to allow the
adapter to decrypt it later.</p><p>For more details and examples for this process you can refer to the
<a href="https://app.radicle.xyz/nodes/radicle.yorgos.net.gr/rad:z2hCUNw2T1qU31LyGy7VPEiS7BkxW/tree/docs/webhook_settings_persistence.md" target="_blank" rel="noopener noreferrer">radicle-webhooks-adapter documentation</a>.</p><blockquote><p>For this setup there is no reason to follow the steps under the
<code>Automated encryption &amp; decryption</code> section but feel free to do so!</p></blockquote><p>Now that we have our repository ready we have to ensure that the
radicle node that runs alongside the broker (the primary node) is
seeding the repository. Seeding a repository means that the Radicle
node will seed that repo in the Radicle p2p network (as we seed in
torrents).  This can be done either by cloning the repo through the
<code>rad clode RAD_ID</code> command or the <code>rad seed RAD_ID</code> command at the
primary node (where the broker runs). <code>RAD_ID</code> is the repo's radicle
ID. This can be retrieved through the <code>rad ls</code> command or by running
the <code>rad .</code> command within the repository's folder.</p><blockquote><p>By seeding a repository we ensure that the a node receives any
events for the specific repo.</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="testing">Testing<a href="#testing" class="hash-link" aria-label="Direct link to Testing" title="Direct link to Testing">​</a></h3><p>We can now check our setup if everything works fine. On the Host #1 we
should start the Radicle Node and the CI Broker. The broker will report
some logs:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain"> Running `./ci-broker webhooks`</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> INFO  ci_broker &gt; Radicle CI broker starts</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> DEBUG ci_broker &gt; loaded configuration: Config {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    default_adapter: "webhooks",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    adapters: {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        "webhooks": Adapter {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            command: "/tmp/bin/radicle-webhooks-adapter",</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            env: {},</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    filters: [],</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"> INFO  radicle_ci_broker::event &gt; subscribing to local node events</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>You can use a webhook listener service (such as the
<a href="https://webhook.site/" target="_blank" rel="noopener noreferrer">https://webhook.site/</a>) in order to register the provided URL and
check the requested payload alongside any headers.</p></blockquote><h4 class="anchor anchorWithStickyNavbar_LWe7" id="push">Push<a href="#push" class="hash-link" aria-label="Direct link to Push" title="Direct link to Push">​</a></h4><p>From the secondary node we should push some changes to the
repo. Pushing will automatically sync with other nodes and will print
something like in the broker's log output:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ git push</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">✓ Patch b1d3420 updated to 54884569f96ac1db8ea1fb19004a536bb6e0ab83</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">✓ Synced with 2 node(s)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">To rad://z32iyJDyFLqvPFzwHm8YadK4HQ2EY/z6MksMpnzPF48pk4XAnqVotKmfs2SE3bxA57UA8KL9DnWnY3</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   a680e4d..6a76ee5  ha -&gt; patches/b1d3420337dc4817cb9f2c2a0320e60b11530a25</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If the sync fails we can retry it through the
<code>RAD_HOME=~/.secondary_radicle rad sync</code> command. A successful sync
will generate some events to the broker.</p><p>If the webhook configuration is properly set up we can see in the logs
the webhook URL printed out. We can see that we will receive two
events from the broker which will make our broker invoke the webhooks
for these two events. One event will be about the update of the
<code>sigrefs</code> and the other one is for the actual push event on the repo.</p><p>And then in Kraken CI side we should see a triggered flow in a project
associated with the repositored hosted in Radicle. On the flow page,
in <code>Repo Changes</code>, there are information retrieved from Radicle Push
event. We can visit hosted Git repo in Radicle or visit the change commits.</p><a href="/img/radicle-repo-changes.png" target="blank"><img src="/img/radicle-repo-changes.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
        <category label="radicle" term="radicle"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows Support in AWS]]></title>
        <id>https://kraken.ci/blog/windows-support-in-aws</id>
        <link href="https://kraken.ci/blog/windows-support-in-aws"/>
        <updated>2023-12-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Kraken version 1.6]]></summary>
        <content type="html"><![CDATA[<p>Kraken version <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.6" target="_blank" rel="noopener noreferrer">1.6</a>
introduces support for Windows in deploying a virtual machine with the
Kraken Agent on AWS EC2. This means that it is now possible to execute
jobs on Windows systems in the AWS EC2 environment.</p><p>The 1.6 release brings several more changes and fixes. To see the details,
please check the <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.6" target="_blank" rel="noopener noreferrer">the release notes</a>.
Some of the changes included are:</p><ul><li>added link to docs page in the top bar</li><li>added checking agents group correctness provided in schema</li><li>several fixes</li></ul><p>More details about the support for Windows in AWS EC2 are provided below (<a href="/blog/windows-support-in-aws">Read More</a>).</p><p>There are a few requirements for an AWS AMI Windows image to make it
work with Kraken CI. It should have preinstalled Python and Git. The
generated image should also have the ability to run a <code>user data</code>
script on the first boot. This script is used to install the Kraken
Agent and your own init script (which can be passed via Kraken).</p><p>Here, you can find an example script for Ansible that prepares an AWS
AMI image for Windows with all the dependencies included:
<a href="https://github.com/Kraken-CI/kraken/tree/master/base-images/aws-ec2-win-ansible" target="_blank" rel="noopener noreferrer">https://github.com/Kraken-CI/kraken/tree/master/base-images/aws-ec2-win-ansible</a></p><p>The full guide about setting up Kraken execution agents in AWS EC2 can
be found in <a href="/docs/autoscale-in-cloud">Autoscale in Cloud docs</a>.</p><p>That's all. To get started, simply install or upgrade to the
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.6" target="_blank" rel="noopener noreferrer">1.6 version</a> and
experience all the benefits firsthand. If you have any questions or
need assistance, submit an issue on <a href="https://github.com/Kraken-CI/kraken/issues" target="_blank" rel="noopener noreferrer">GitHub</a>
or ask for help on <a href="https://discord.gg/bEw7Pemn" target="_blank" rel="noopener noreferrer">Discord</a>.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
        <category label="windows" term="windows"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows Support in Kraken Agent]]></title>
        <id>https://kraken.ci/blog/windows-support-in-agent</id>
        <link href="https://kraken.ci/blog/windows-support-in-agent"/>
        <updated>2023-10-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Kraken version 1.5]]></summary>
        <content type="html"><![CDATA[<p>Kraken version <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.5" target="_blank" rel="noopener noreferrer">1.5</a>
introduces support for Windows in the Kraken Agent. This means that it
is now possible to execute jobs on Windows systems using Kraken CI.</p><p>The 1.5 release brings several more changes and fixes. To see the details,
please check the <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.5" target="_blank" rel="noopener noreferrer">the release notes</a>.
Some of the changes included are:</p><ul><li>fixed detecting Kraken Agent environment when it is run inside Docker that is using CGroup v2 - this solves <a href="https://github.com/Kraken-CI/kraken/issues/303" target="_blank" rel="noopener noreferrer">#303</a></li><li>fixed triggering a flow by GitHub webhook when another flow is in progress - this solves <a href="https://github.com/Kraken-CI/kraken/issues/296" target="_blank" rel="noopener noreferrer">#296</a></li><li>fixed handling multiline secrets</li><li>improved handling agent inactivity - now it is not needed to reenable agent when it was disabled due to inactivity</li></ul><p>More details about the support for Windows are provided below.</p><p>Information about the Kraken Agent installation on Windows can be
found in <a href="/docs/agents">Agent Setup Guide</a>.</p><p>With enabling Kraken Agent on Windows, support for this system was also added to some Kraken tools:</p><ul><li><a href="/docs/schema#shell">shell tool</a></li><li><a href="/docs/schema#artifacts">artifacts tool</a></li></ul><p>This means that now it is possible to execute windows shell commands.</p><p>The following example shows how to define a shell or, rather, cmd
batch script:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"script"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">"""</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">       rem This is a windows batch comment</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">       echo 'hello world'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">       dir c:\\</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>or this example showing <code>PowerShell</code> as custom shell executable:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"shell_exe"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"powershell.exe"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"script"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">"""</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">       Write-Host 'hello'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">       Get-Service kkagent</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The Artifacts tool is now also working on Windows.
Check the following job steps:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">//</span><span class="token plain"> create some content</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"mkdir abc &amp;&amp; echo 'hello world' &gt; abc/a.txt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">//</span><span class="token plain"> upload the content to Kraken Storage</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"artifacts"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"source"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"abc"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">//</span><span class="token plain"> download the uploaded content</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"artifacts"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"action"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"download"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"source"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"abc"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">//</span><span class="token plain"> check the content</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"script"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">"""</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">       dir</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">       type abc\\a.txt</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token triple-quoted-string string" style="color:rgb(195, 232, 141)">    """</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>That's all. To get started, simply install or upgrade to the
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.5" target="_blank" rel="noopener noreferrer">1.5 version</a> and
experience all the benefits firsthand. If you have any questions or
need assistance, submit an issue on <a href="https://github.com/Kraken-CI/kraken/issues" target="_blank" rel="noopener noreferrer">GitHub</a>
or ask for help on <a href="https://discord.gg/bEw7Pemn" target="_blank" rel="noopener noreferrer">Discord</a>.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
        <category label="windows" term="windows"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Environment Variables]]></title>
        <id>https://kraken.ci/blog/env-vars</id>
        <link href="https://kraken.ci/blog/env-vars"/>
        <updated>2023-08-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Kraken]]></summary>
        <content type="html"><![CDATA[<p>The Kraken
version <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.4" target="_blank" rel="noopener noreferrer">1.4</a>
introduces environment variables. This feature allows for defining
variables and their values associated with a branch. These variables
can then be used in a workflow schema using schema context and also in
shell commands as regular environment variables.</p><p>1.4 release brings several more features - check <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.4" target="_blank" rel="noopener noreferrer">the release
notes</a>.</p><p>More details about environment variables can be found in the
documentation, specifically in the <a href="/docs/env-vars">Environment Variables section</a>.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Conditional Steps]]></title>
        <id>https://kraken.ci/blog/conditional-steps</id>
        <link href="https://kraken.ci/blog/conditional-steps"/>
        <updated>2023-07-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Kraken version]]></summary>
        <content type="html"><![CDATA[<p>The Kraken version
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.3" target="_blank" rel="noopener noreferrer">1.3</a>
introduces the conditional steps. This feature enables skipping a step
under certain conditions. This condition can be based on any data
available in the system including the latest data from previous steps.</p><p>1.3 release brings several more features - check <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.3" target="_blank" rel="noopener noreferrer">the release
notes</a>.</p><p>More details about the conditional steps are below.</p><p>The conditional steps rely on lazy step execution. Previously, all
steps were sent to an agent, and the agent executed them all at once
until either all steps were executed or one of the steps failed. Now,
steps are sent from the server to an agent one by one. So, the server
first evaluates the <code>when</code> condition and decides if the step should be
sent for execution to an agent.</p><p>The example below shows various cases of <code>when</code> condition:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">stage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"parent"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"root"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">"triggers"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"parent"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">True</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">"parameters"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">"configs"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string" style="color:rgb(195, 232, 141)">"jobs"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"name"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"hello world"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"steps"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'hello world'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"when"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"was_no_error"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'was_no_error'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"when"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"was_any_error"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'was_any_error'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"when"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"is_ci"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'is_ci'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"when"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"is_dev"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'is_dev'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"missing-command-xyz"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"when"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"was_no_error"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'was_no_error 2'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"when"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"was_any_error"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'was_any_error 2'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"when"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"always"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'hello world always' &amp;&amp; sleep 5"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"when"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"job.steps[step.index - 1].result.duration &gt; 3"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo 'hello world #{job.steps[step.index - 1].result}'"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"environments"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"system"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"any"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"agents_group"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"all"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">"config"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"default"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This code can also be found at
<a href="https://github.com/Kraken-CI/workflow-examples/tree/main/conditional-steps/one.py" target="_blank" rel="noopener noreferrer">https://github.com/Kraken-CI/workflow-examples/tree/main/conditional-steps/one.py</a>.</p><p>The screenshot below shows the status of these steps execution.</p><a href="/img/screen-conditional-steps.png" target="blank"><img src="/img/screen-conditional-steps.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>The usage of several built-in variables can be observed, such as
<code>always</code>, <code>is_ci</code>, <code>is_dev</code>, <code>was_no_error</code>, and <code>was_any_error</code>. The
last step presents a more complicated case. It utilizes <code>job.steps</code>
and <code>step.index</code> to verify the outcome of the previous step,
specifically checking if the duration of the previous step was greater
than 3 seconds. If this condition is met, the current step will be
executed.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data and Dynamism in Schema]]></title>
        <id>https://kraken.ci/blog/data-and-dynamism-in-schema</id>
        <link href="https://kraken.ci/blog/data-and-dynamism-in-schema"/>
        <updated>2023-04-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Kraken version 1.1]]></summary>
        <content type="html"><![CDATA[<p>The Kraken version <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.1" target="_blank" rel="noopener noreferrer">1.1</a>
introduces even more improvements in logging.</p><p>The major changes are:</p><ul><li>added storing user data server-side</li><li>data of internal objects and user data are now exposed in a schema code</li><li>added support for several new operating systems</li></ul><p>1.1 release brings several more features - check <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.1" target="_blank" rel="noopener noreferrer">the release
notes</a>.</p><p>More details about the major features are below.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="user-data">User Data<a href="#user-data" class="hash-link" aria-label="Direct link to User Data" title="Direct link to User Data">​</a></h3><p>This feature enables users to store data in the workflow schema code
on the server-side. For instance, a user can prepare data in JSON
format in one step of the schema code. Then, in the subsequent step,
the user can upload the data from the prepared file to the Kraken Server. The
data can be attached to a flow, branch, or project. If it is attached
to a flow, its scope is restricted to that particular flow, and it can
be used in the next stage of that flow. However, it will not be
visible in a new flow. If the data is attached to a branch or project,
it will be shared by subsequent flows.</p><p>Details and examples are described in the
<a href="/docs/schema#data">Data Tool section of the Workflow Schema documentation</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="data-in-schema-code">Data in Schema Code<a href="#data-in-schema-code" class="hash-link" aria-label="Direct link to Data in Schema Code" title="Direct link to Data in Schema Code">​</a></h3><p>The data stored by the user, as well as the data of other internal
objects such as jobs, runs, flows, branches, and projects, can be
accessed in a stage schema code.</p><p>The data can be accessed via a context that is passed to the stage
function and also through string interpolation of special variables.</p><p>All of this allows for significant dynamism in a stage schema
code. For example, the list of jobs or step details may be based on
the data stored by a user in previous stages.</p><p>Details are described in the <a href="/docs/schema-data">Data in Schema</a>
chapter in the docs.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-oses-supported">New OSes Supported<a href="#new-oses-supported" class="hash-link" aria-label="Direct link to New OSes Supported" title="Direct link to New OSes Supported">​</a></h3><p>The new supported OSes include Rocky Linux 9, AlmaLinux and Debian
Bookworm. The full list is availabled in
<a href="/docs/docker-executor#tested-vanilla-images">Docker Executor</a>
docs.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Further Logging Improvements]]></title>
        <id>https://kraken.ci/blog/further-logging-improvements</id>
        <link href="https://kraken.ci/blog/further-logging-improvements"/>
        <updated>2023-03-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Kraken version 1.0]]></summary>
        <content type="html"><![CDATA[<p>The Kraken version <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.0" target="_blank" rel="noopener noreferrer">1.0</a>
introduces even more improvements in logging.</p><p>The major changes are:</p><ul><li>added global and per-branch logs retention policy</li><li>added presenting logs of server-side activities related to a branch,
a flow, a run and a job</li></ul><p>1.0 release brings several more features - check <a href="https://github.com/Kraken-CI/kraken/releases/tag/v1.0" target="_blank" rel="noopener noreferrer">the release
notes</a>.</p><p>More details about the major features are below.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="logs-retention-policy">Logs Retention Policy<a href="#logs-retention-policy" class="hash-link" aria-label="Direct link to Logs Retention Policy" title="Direct link to Logs Retention Policy">​</a></h3><p>The logs retention policy generally indicates how long logs should be
kept in the logs store ie. Clickhouse. It is possible to set these
policies on two levels: 1) global and 2) branch level. The time is
expressed in a number of months.</p><p>The picture below shows the <code>General Settings</code> tab where under the
<code>Global Log Retention Policy</code> section, it is possible to set the number
of months for how long all the logs (from Kraken Server and all
Agents) will be kept in Clickhouse.</p><a href="/img/screen-logs-global-ttl.png" target="blank"><img src="/img/screen-logs-global-ttl.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>The following picture shows the <code>Retention Policy</code> tab on a branch
management page. Here, a similar policy can be set for logs related to
this branch, either for CI flows or for Dev flows.</p><a href="/img/screen-logs-branch-ttl.png" target="blank"><img src="/img/screen-logs-branch-ttl.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="server-logs-presentation">Server Logs Presentation<a href="#server-logs-presentation" class="hash-link" aria-label="Direct link to Server Logs Presentation" title="Direct link to Server Logs Presentation">​</a></h3><p>New logs panel has been introduced. It can show logs from both the
server and agent sides. This panel can be found in several places that
are indicated in the pictures below.</p><p>Here a branch management page is presented with the <code>Logs</code> tab where
logs related to this branch are shown.</p><a href="/img/screen-logs-of-branch.png" target="blank"><img src="/img/screen-logs-of-branch.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>Here is the case for a flow.</p><a href="/img/screen-logs-of-flow.png" target="blank"><img src="/img/screen-logs-of-flow.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>Here is the case for a run.</p><a href="/img/screen-logs-of-run.png" target="blank"><img src="/img/screen-logs-of-run.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>And a job case.</p><a href="/img/screen-logs-of-job.png" target="blank"><img src="/img/screen-logs-of-job.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Standing out Logs Handling]]></title>
        <id>https://kraken.ci/blog/standing-out-logs-handling</id>
        <link href="https://kraken.ci/blog/standing-out-logs-handling"/>
        <updated>2023-02-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Kraken version 0.1126]]></summary>
        <content type="html"><![CDATA[<p>The Kraken version <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.1126" target="_blank" rel="noopener noreferrer">0.1126</a>
introduces much improved logs handling and presentation.</p><p>The standing-out features connected with logs are:</p><ul><li>single-line and <em>multi-line</em> secrets masking</li><li>coloring ANSI codes</li><li>no issue with handling huge logs containing even more than 10.000 lines</li><li>switching timestamps on/off</li><li>auto scroll when at the bottom</li><li>paging logs</li></ul><p>And the new features introduced by this Kraken version:</p><ul><li>job logs are split by steps sections in UI</li><li>steps status and metadata presented at the top of each step logs section</li><li>download a step log</li></ul><p>More details are below.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="single-line-and-multi-line-secrets-masking">Single-line and Multi-line Secrets Masking<a href="#single-line-and-multi-line-secrets-masking" class="hash-link" aria-label="Direct link to Single-line and Multi-line Secrets Masking" title="Direct link to Single-line and Multi-line Secrets Masking">​</a></h3><p>It is possible to define <a href="/docs/secrets">secrets</a> on a project. Then
these secrets can be used in workflow schema directly in shell commands
or as environment variables. Most often, they might be visible in
logs. Thankfully, Kratos mask secrets - a secret in the log is replaced
by six asterisks (<code>*</code> sign). Kraken can mask secrets that are single
line, for example, a password, but also it can secret multi-line
secrets, e.g. SSH private key that may span about 30 lines. In both
cases, these secrets will be replaced with asterisks in the log.</p><p>The secrets are caught quite early and do not leave a machine
that traces them to logs. The log database stores only masked
passwords. Example of masking below:</p><a href="/img/screen-logs-masked-secrets2.png" target="blank"><img src="/img/screen-logs-masked-secrets2.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>A very long, multi-line secret has been replaced by 6 asterisk signs.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="coloring-ansi-codes">Coloring ANSI Codes<a href="#coloring-ansi-codes" class="hash-link" aria-label="Direct link to Coloring ANSI Codes" title="Direct link to Coloring ANSI Codes">​</a></h3><p>Quite often in CI process, there are used tools that color their
output. This is achieved
by <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors" target="_blank" rel="noopener noreferrer">ANSI codes</a>
printed to a terminal. Kraken can find them and replace them with
colors in Web UI.</p><p>An example of a basic color palette in the log:</p><a href="/img/screen-logs-ansi-colors.png" target="blank"><img src="/img/screen-logs-ansi-colors.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="swithing-timestamps-onoff">Swithing Timestamps On/Off<a href="#swithing-timestamps-onoff" class="hash-link" aria-label="Direct link to Swithing Timestamps On/Off" title="Direct link to Swithing Timestamps On/Off">​</a></h3><p>Kraken allows a user to switch on and off displaying timestamps. These
are timestamps added during collecting logs and storing them in a
database. They may not match with timestamps that are already present
inside the log, so they can be switched off. When there are no
timestamps in the original log, Kraken timestamps can be switched on
and be pretty helpful.</p><p>Timestamps are switched off:</p><a href="/img/screen-logs-ts-off.png" target="blank"><img src="/img/screen-logs-ts-off.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>Timestamps are switched on:</p><a href="/img/screen-logs-ts-on.png" target="blank"><img src="/img/screen-logs-ts-on.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="autoscroll">Autoscroll<a href="#autoscroll" class="hash-link" aria-label="Direct link to Autoscroll" title="Direct link to Autoscroll">​</a></h3><p>When the scroll bar is at the bottom position then any new logs
fetched automatically will trigger scrolling to the bottom so the new
log content is visible.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="job-logs-split-by-steps">Job Logs Split by Steps<a href="#job-logs-split-by-steps" class="hash-link" aria-label="Direct link to Job Logs Split by Steps" title="Direct link to Job Logs Split by Steps">​</a></h3><p>In Kraken Web UI, the job log is divided into steps sections. Each
section has its title bar that, by clicking, allows a user to expand
the section to see its details and logs. Each step log is separate, so
it is easier to browse logs of steps than handling one big job log.</p><a href="/img/screen-logs-steps.png" target="blank"><img src="/img/screen-logs-steps.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="steps-status-and-metadata">Steps Status and Metadata<a href="#steps-status-and-metadata" class="hash-link" aria-label="Direct link to Steps Status and Metadata" title="Direct link to Steps Status and Metadata">​</a></h3><p>The step details bar presents information about status and duration
but also step parameters. Below the bar, there are logs with control
buttons for navigating logs.</p><a href="/img/screen-logs-step-status.png" target="blank"><img src="/img/screen-logs-step-status.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="download-whole-step-log">Download Whole Step Log<a href="#download-whole-step-log" class="hash-link" aria-label="Direct link to Download Whole Step Log" title="Direct link to Download Whole Step Log">​</a></h3><p>A log of each section can be downloaded separately.</p><a href="/img/screen-logs-step-download.png" target="blank"><img src="/img/screen-logs-step-download.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="paging-logs">Paging Logs<a href="#paging-logs" class="hash-link" aria-label="Direct link to Paging Logs" title="Direct link to Paging Logs">​</a></h3><p>A step log pane has control buttons allowing a user to navigate
logs. A user may load the previous or next page or jump to the first
or last page. A user may load the whole log, he/she may also scroll to the
bottom of the log.</p><a href="/img/screen-logs-paging.png" target="blank"><img src="/img/screen-logs-paging.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Support for CCTray]]></title>
        <id>https://kraken.ci/blog/support-for-cctray</id>
        <link href="https://kraken.ci/blog/support-for-cctray"/>
        <updated>2022-12-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[CCTray is a protocol that allows users to fetch]]></summary>
        <content type="html"><![CDATA[<p><a href="https://cctray.org" target="_blank" rel="noopener noreferrer">CCTray</a> is a protocol that allows users to fetch
the current state of a branch using <a href="https://cctray.org/clients/" target="_blank" rel="noopener noreferrer">dedicated
clientes</a>.</p><p>Kraken CI exposes a URL for a given branch that can be put to such a
client. This URL is available on a branch management page, in the
<code>Status Badge &amp; CCTray</code> tab:</p><a href="/img/screen-branch-mgmt-badges.png" target="blank"><img src="/img/screen-branch-mgmt-badges.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>These feature landed in
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.1097" target="_blank" rel="noopener noreferrer">0.1097 version</a>
and is documented in <a href="/docs/notifications#cctray">notifications docs</a>
docs.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Migration to Newer Dependencies]]></title>
        <id>https://kraken.ci/blog/migration-to-newer-deps</id>
        <link href="https://kraken.ci/blog/migration-to-newer-deps"/>
        <updated>2022-12-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Till now, Kraken CI relied on pretty old versions]]></summary>
        <content type="html"><![CDATA[<p>Till now, Kraken CI relied on pretty old versions
of <a href="https://clickhouse.com/" target="_blank" rel="noopener noreferrer">Clickhouse</a>
and <a href="https://min.io/" target="_blank" rel="noopener noreferrer">MinIO</a>. In the latest Kraken CI release, both
have been upgraded.</p><p>Clickhouse has been upgraded from <code>20.11.4.13</code> to <code>22.10.2.11</code>. The
migration is seamless from the Kraken CI point of view. There is no need
for explicit data migration.</p><p>MinIO has been upgraded from <code>RELEASE.2020-12-18T03-27-42Z</code> to
<code>RELEASE.2022-10-24T18-35-07Z</code>. The major visible change is the names
of environment variables that hold credentials. Previously they were
<code>MINIO_ACCESS_KEY</code> and <code>MINIO_SECRET_KEY</code>, now they are
<code>MINIO_ROOT_USER</code> and <code>MINIO_ROOT_PASSWORD</code>, respectively. Values of
these variables may stay the same; they do not need to be changed.</p><p>These changes landed in
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.1091" target="_blank" rel="noopener noreferrer">0.1091 version</a>.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[LDAP and OIDC/OAuth]]></title>
        <id>https://kraken.ci/blog/ldap-and-oidc-oauth</id>
        <link href="https://kraken.ci/blog/ldap-and-oidc-oauth"/>
        <updated>2022-11-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[There has beed developed an addition to users management:]]></summary>
        <content type="html"><![CDATA[<p>There has beed developed an addition to users management:
authentication against external authentication servers using either
LDAP or OpenID Connect with OAuth.</p><p>LDAP allows administrator to connect Kraken system to corporate LDAP
or Active Directory. OIDC &amp; OAuth beside bringing another source of
users' identity it also provides Signe Sign-On scheme.</p><p>This features landed in <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.1047" target="_blank" rel="noopener noreferrer">0.1047
version</a> and
is documented in <a href="/docs/users#identity-providers">identity providers</a>
docs.</p><p>Here is a screen that shows web UI for configuring Identity Providers.</p><a href="/img/screen-idp-all-disabled.png" target="blank"><img src="/img/screen-idp-all-disabled.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Users Management]]></title>
        <id>https://kraken.ci/blog/users-management</id>
        <link href="https://kraken.ci/blog/users-management"/>
        <updated>2022-10-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Users management is a basic functionality that allows for adding users]]></summary>
        <content type="html"><![CDATA[<p>Users management is a basic functionality that allows for adding users
and assigning roles to them. This translates to users authatication
and authorization. In case of Kraken CI, this is described on <a href="/docs/users">users
docs</a> pages. This feature landed in <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.1037" target="_blank" rel="noopener noreferrer">0.1037
version</a>.</p><p>Here is a screen that shows web UI for managing users.</p><a href="/img/screen-users.png" target="blank"><img src="/img/screen-users.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Agents in Docker Compose]]></title>
        <id>https://kraken.ci/blog/agents-in-docker-compose</id>
        <link href="https://kraken.ci/blog/agents-in-docker-compose"/>
        <updated>2022-09-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Kraken Agent can be deployed in multiple ways. Here is]]></summary>
        <content type="html"><![CDATA[<p>Kraken Agent can be deployed in <a href="/docs/agents">multiple ways</a>. Here is
presented a new way that leverages Docker Compose. It is not scalable as
such agents are run on the same machine but it is quick and simple and
if we need just to have one or two more agents this is a way to go.</p><p>To add such agents we will extend Docker Compose from
<a href="/docs/quick-start">QuickStart</a>.</p><p>There is already defined one built-in agent. But first, several
modifications are needed to solve IP addressing issues. The problem is
that it may get a different IP address after a container restart than
before. Kraken Server requires that the addresses do not change
otherwise it is not possible to identify agents by the Kraken Server.</p><p>First, open your compose file (e.g. kraken-docker-compose-X.Y.yaml)
and enable IP Address Management (IPAM) in the <code>lab_net</code> where all
agents reside:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token key atrule">lab_net</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">driver</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> bridge</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># add the following lines at the end of compose file</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">ipam</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token key atrule">config</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> </span><span class="token key atrule">subnet</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 172.20.0.0/16</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here is added a subnet with particular addresses class,
<code>172.20.0.0/16</code>. You can define any subnet definition you need.</p><p>And now add extra agents by copy-pasting <code>agent</code> service:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token key atrule">agent1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">restart</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> always</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">image</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> us</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">docker.pkg.dev/kraken</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">261806/kk/kkagent</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token number" style="color:rgb(247, 140, 108)">0.998</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">environment</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> KRAKEN_CLICKHOUSE_ADDR</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> KRAKEN_SERVER_ADDR</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">networks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token key atrule">lab_net</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token key atrule">ipv4_address</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> 172.20.0.11</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">depends_on</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> server</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> minio</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> clickhouse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain">proxy</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token key atrule">volumes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-</span><span class="token plain"> /var/run/docker.sock</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain">/var/run/docker.sock</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Important things:</p><ol><li>New agent service name should be different e.g. <code>agent1</code>, <code>agent2</code>, etc.</li><li>Remove <code> - KRAKEN_AGENT_BUILTIN=1</code> environment variable that can be only in one agent.</li><li>Add explicit IP address in <code>networks</code> section: <code>ipv4_address: 172.20.0.11</code>.
Every new agent needs to have a different IP address.</li></ol><p>Before running such a modified compose file, shut down the currently
running compose and delete <code>lab_net</code>.  To delete this network, first,
check if it exists:</p><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ docker network ls</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>It should have name like this <code>&lt;current-folder-name&gt;_lab_net</code>. Please delete it:</p><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ docker network rm &lt;current-folder-name&gt;_lab_net</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now you can start Docker Compose again. <code>lab_net</code> network will be
recreated with proper new settings:</p><div class="language-console codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-console codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ docker-compose --env-file kraken-X.Y.env -f kraken-docker-compose-X.Y.yaml up</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Go to Discovered Agents page in Kraken Web UI and check if new agents
are present there.</p><p>That's it. You have new agents running.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom Tools]]></title>
        <id>https://kraken.ci/blog/custom-tools</id>
        <link href="https://kraken.ci/blog/custom-tools"/>
        <updated>2022-09-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[There is a new way for extending Kraken CI: custom tools. A]]></summary>
        <content type="html"><![CDATA[<p>There is a new way for extending Kraken CI: custom tools. A
<a href="/docs/tools">tool</a> in Kraken CI provides particular functionality that is
used in steps in a workflow schema. Till now, there were only built-in
tools like <code>git</code> for checking out source code from Git repository, or
<code>artifacts</code> for storing or retrieving files from Kraken global
<a href="/docs/storage">storage</a> or finally <code>shell</code> for running commands in a shell.</p><p>Custom tools allow for developing such tools by third parties, sharing
them with others and installing and using them in Kraken Server.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="custom-tools-details">Custom Tools Details<a href="#custom-tools-details" class="hash-link" aria-label="Direct link to Custom Tools Details" title="Direct link to Custom Tools Details">​</a></h3><p>Docs for <a href="/docs/tools">custom tools</a> first present the whole
architecture of Kraken CI with Agents and tools. Then the interaction
between Kraken Agent and a tool is shown with an example tool. The
following sections show how to declare a custom tool and add it to
Kraken Server so it can be used in workflows. It is also presented how
to develop custom tools locally, under the desk.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Worlds in 22 Langs on Kraken CI]]></title>
        <id>https://kraken.ci/blog/hello-worlds-in-22-langs-on-kraken-ci</id>
        <link href="https://kraken.ci/blog/hello-worlds-in-22-langs-on-kraken-ci"/>
        <updated>2022-05-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[There is a new, quite funny workflow example for Kraken CI. It shows]]></summary>
        <content type="html"><![CDATA[<p>There is a new, quite funny workflow example for Kraken CI. It shows
how to compile and run <code>Hello World</code> programs in various programming
languages, 22 languages.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="hello-world-programs">Hello World Programs<a href="#hello-world-programs" class="hash-link" aria-label="Direct link to Hello World Programs" title="Direct link to Hello World Programs">​</a></h3><p>Every programmer knows what does <code>Hello World</code> program looks like.</p><p>Here is an example in C language:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token macro property directive-hash">#</span><span class="token macro property directive keyword" style="font-style:italic">include</span><span class="token macro property string" style="color:rgb(195, 232, 141)">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">int</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">main</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">printf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"Hello World\n"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>But 22? These 22 can be seen in Kraken's repo on GitHub:
<a href="https://github.com/kraken-CI/hello-worlds" target="_blank" rel="noopener noreferrer">https://github.com/kraken-CI/hello-worlds</a></p><p>Still, there are more languages with <code>Hello Worlds</code>.
The biggest collection can be found here:
<a href="http://helloworldcollection.de/" target="_blank" rel="noopener noreferrer">http://helloworldcollection.de/</a>.</p><p>These are just examples. In our case, they can be compiled and run.
After downloading the repo you may run <code>./run.sh</code> script providing
the language folder, e.g.:</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">$ ./run.sh C</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This will display, compile and run a C example.</p><p>In Kraken's case, there is defined a workflow that does it for us for
each language. But first, we need to have systems with a compiler or a
runtime for these languages. Docker to the rescue.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="kraken-base-language-images">Kraken Base Language Images<a href="#kraken-base-language-images" class="hash-link" aria-label="Direct link to Kraken Base Language Images" title="Direct link to Kraken Base Language Images">​</a></h3><p>For each language, there is prepared a Docker image. They are based on
official images for these languages. For Kraken, they got some extras
like Kraken Agent that is running using kraken user (not root).</p><p>The list of all lang images is available in <a href="/docs/docker-executor#language-images">the docs</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-workflow">The Workflow<a href="#the-workflow" class="hash-link" aria-label="Direct link to The Workflow" title="Direct link to The Workflow">​</a></h3><p>The mentioned workflow can be found in <a href="https://github.com/Kraken-CI/hello-worlds/blob/main/kraken-workflow.py" target="_blank" rel="noopener noreferrer">kraken-workflow.py</a> file.</p><p>In short, it looks as follows:</p><div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">stage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    langs </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'C'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'gcc:11.3'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'C++'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'gcc:11.3'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'C#'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'mono:6.12'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic"># and more...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    jobs </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">for</span><span class="token plain"> lang_name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> lang_image </span><span class="token keyword" style="font-style:italic">in</span><span class="token plain"> langs</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        jobs</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token string" style="color:rgb(195, 232, 141)">"name"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"hello world %s"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">%</span><span class="token plain"> lang_name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token string" style="color:rgb(195, 232, 141)">"steps"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"git"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"checkout"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://github.com/Kraken-CI/hello-worlds.git"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"branch"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"main"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"tool"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"cmd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"./run.sh %s"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">%</span><span class="token plain"> lang_name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"cwd"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"hello-worlds"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token string" style="color:rgb(195, 232, 141)">"environments"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"executor"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"docker"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"system"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"krakenci/%s"</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">%</span><span class="token plain"> lang_image</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"agents_group"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"all"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">                </span><span class="token string" style="color:rgb(195, 232, 141)">"config"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"default"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"parent"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"root"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"triggers"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">            </span><span class="token string" style="color:rgb(195, 232, 141)">"parent"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">True</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"parameters"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"configs"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"jobs"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> jobs</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>As you may notice, the list of jobs is built dynamically.  For each
entry of the list of tuples (<code>lang-name</code>, <code>docker-image</code>), a job is
defined with the same steps but various values for language and Docker
image name. The lang name is passed to <code>./run.sh</code> script in <code>shell</code>
step.  And Docker image name is used in the environments section, in
the <code>system</code> field. Such a list of jobs is then returned in the whole
workflow definition. Each job will be run in parallel in separate
Docker containers.</p><p>The example of workflow execution is present in Kraken lab:
<a href="https://lab.kraken.ci/runs/5009/jobs" target="_blank" rel="noopener noreferrer">https://lab.kraken.ci/runs/5009/jobs</a>. Check the workflow definitions in
<a href="https://lab.kraken.ci/branches/33" target="_blank" rel="noopener noreferrer">branch management page</a>.</p><p>This screenshot shows the execution of this workflow:</p><a href="/img/screen-hello-worlds-execution.png" target="blank"><img src="/img/screen-hello-worlds-execution.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h3><p>This article shows how Kraken CI can build programs written in various
languages. Kraken provides prepared Docker images for many
languages. It is easy to define sophisticated workflows that
dynamically define jobs that can be run in parallel. In the end, it is
nice to observe the results of workflow execution in Kraken UI.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="cicd" term="cicd"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Job Designer and More - 0.962 Release]]></title>
        <id>https://kraken.ci/blog/job-designer-and-more-0-962</id>
        <link href="https://kraken.ci/blog/job-designer-and-more-0-962"/>
        <updated>2022-05-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The job designer]]></summary>
        <content type="html"><![CDATA[<p>The job designer
(<a href="https://github.com/Kraken-CI/kraken/issues/171" target="_blank" rel="noopener noreferrer">#171</a>) is the main
feature in
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.962" target="_blank" rel="noopener noreferrer">0.962</a>
release.</p><p>Besides that, it contains:</p><ul><li>support for multiline shell scripts and selecting shell executable
(<a href="https://github.com/Kraken-CI/kraken/issues/183" target="_blank" rel="noopener noreferrer">#183</a> and
<a href="https://github.com/Kraken-CI/kraken/issues/184" target="_blank" rel="noopener noreferrer">#184</a>) charts</li><li>new chart showing flows duration in a branch (<a href="https://github.com/Kraken-CI/kraken/issues/173" target="_blank" rel="noopener noreferrer">#173</a>)</li><li>multiple new base docker images for various programming languages</li><li>split results chart to pass ratio chart and passed/total chart (<a href="https://github.com/Kraken-CI/kraken/issues/183" target="_blank" rel="noopener noreferrer">#187</a>)</li></ul><p>More information about these changes is below.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="job-designer">Job Designer<a href="#job-designer" class="hash-link" aria-label="Direct link to Job Designer" title="Direct link to Job Designer">​</a></h3><p>Now it is possible to design job steps using a UI available on a
branch management page.</p><a href="/img/screen-branch-prepare-step-button.png" target="blank"><img src="/img/screen-branch-prepare-step-button.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>The <code>Prepare Step</code> button shows the job designer dialog.</p><a href="/img/screen-branch-prepare-step-dialog.png" target="blank"><img src="/img/screen-branch-prepare-step-dialog.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>The dialog shows all available fields of a step with descriptions and
input boxes pre-filled with default values. These fields are available
for a tool selected in the dropdown at the top of the dialog. Below,
there is the step generated in JSON format.</p><p>In the case of the picture above, there is a shell tool
selected. There are multiple fields available. A few are used:
<code>cmd</code>, <code>cwd</code> and <code>shell_exec</code>. The generated step in JSON contains
these fields with user-provided values.</p><p>Now a user may copy the generated step and then paste it into the stage
schema code.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="shell-tool-improvements">Shell Tool Improvements<a href="#shell-tool-improvements" class="hash-link" aria-label="Direct link to Shell Tool Improvements" title="Direct link to Shell Tool Improvements">​</a></h3><p>The shell tool got two improvements. One allows for entering a multiline
script instead of just one command. The other one allows for indicating
an alternative shell executable - the default one is <code>/bin/sh</code>.</p><p>A multiline script can be provided in the following way:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token property">"steps"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"tool"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"script"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token plain">"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           echo 'multiline script'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           ls -al</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           echo 'completed'</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token plain">"</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Changing default shell executable to e.g. <code>zsh</code> goes this way:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token property">"steps"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"tool"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"cmd"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"echo $ZSH_VERSION"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"shell_exec"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"zsh"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>More in the <a href="/docs/schema#shell">docs</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="flow-duration-on-branch-chart">Flow Duration on Branch Chart<a href="#flow-duration-on-branch-chart" class="hash-link" aria-label="Direct link to Flow Duration on Branch Chart" title="Direct link to Flow Duration on Branch Chart">​</a></h3><p>On the branch management page, on <code>Stats and Charts</code> tab, there are
basic stats about the branch, like the total number of flows or the
average flow duration in the last week. Below these stats, a chart
shows the duration of flows over time.</p><a href="/img/screen-branch-stats.png" target="blank"><img src="/img/screen-branch-stats.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>The whole stats and charts are presented in two instances: one for CI
and the other one for DEV flows.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-base-docker-images">New Base Docker Images<a href="#new-base-docker-images" class="hash-link" aria-label="Direct link to New Base Docker Images" title="Direct link to New Base Docker Images">​</a></h3><p>There are multiple new Docker images prepared to be used in Kraken CI.
The full list is available in the <a href="/docs/docker-executor#language-images">docs page</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="split-results-chart">Split Results Chart<a href="#split-results-chart" class="hash-link" aria-label="Direct link to Split Results Chart" title="Direct link to Split Results Chart">​</a></h3><p>Initially, the pass ratio was shown together with total and passed
counts on the same chart. Now that is split into two charts: 1) pass
ratio chart and 2) total and passed counts.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="release" term="release"/>
        <category label="theme" term="theme"/>
        <category label="images" term="images"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MLOps with MLflow on Kraken CI]]></title>
        <id>https://kraken.ci/blog/mlops-with-mlflow-on-kraken-ci</id>
        <link href="https://kraken.ci/blog/mlops-with-mlflow-on-kraken-ci"/>
        <updated>2022-04-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Besides building, testing and deploying, Kraken CI is also a pretty]]></summary>
        <content type="html"><![CDATA[<p>Besides building, testing and deploying, Kraken CI is also a pretty
nice tool to build an <a href="https://en.wikipedia.org/wiki/MLOps" target="_blank" rel="noopener noreferrer">MLOps</a>
pipeline. In this article, it will be shown how to leverage Kraken CI to
build a CI workflow for machine learning using
<a href="https://mlflow.org/" target="_blank" rel="noopener noreferrer">MLflow</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="mlops-and-mlflow">MLOps and MLflow<a href="#mlops-and-mlflow" class="hash-link" aria-label="Direct link to MLOps and MLflow" title="Direct link to MLOps and MLflow">​</a></h3><p>MLOps is a set of practices that aims to build and maintain machine
learning models in production reliably and efficiently. One of
prominent tools in this area is <a href="https://mlflow.org/" target="_blank" rel="noopener noreferrer">MLflow</a>.</p><p>MLflow is an open-source platform for managing the end-to-end machine
learning lifecycle. It tackles four primary functions:</p><ul><li>Tracking experiments to record and compare parameters and results
(MLflow Tracking).</li><li>Packaging ML code in a reusable, reproducible form to share
with other data scientists or transfer to production (MLflow
Projects).</li><li>Managing and deploying models from various ML libraries to a
variety of model serving and inference platforms (MLflow Models).</li><li>Providing a central model store to collaboratively manage the entire
lifecycle of an MLflow Model, including model versioning, stage
transitions, and annotations (MLflow Model Registry).</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="mlflow-in-kraken-ci">MLflow in Kraken CI<a href="#mlflow-in-kraken-ci" class="hash-link" aria-label="Direct link to MLflow in Kraken CI" title="Direct link to MLflow in Kraken CI">​</a></h3><p>In the following sections, I will describe how to prepare a workflow
in Kraken CI to train an ML model. This is an LSTM model that will
predict stock prices based on historical data.</p><p>The workflow will be:</p><ol><li><p>pulling live stock data and preparing it for training (<a href="https://github.com/Kraken-CI/mlflow-example/blob/master/download_raw_data.py" target="_blank" rel="noopener noreferrer">source
1</a>,
<a href="https://github.com/Kraken-CI/mlflow-example/blob/master/transform_data.py" target="_blank" rel="noopener noreferrer">source
2</a>)</p></li><li><p>performing the training (<a href="https://github.com/Kraken-CI/mlflow-example/blob/master/train_model.py" target="_blank" rel="noopener noreferrer">source 3</a>)</p></li><li><p>storing model metrics in Kraken CI for charting</p></li></ol><p>The MLflow project is described in <a href="https://github.com/Kraken-CI/mlflow-example/blob/master/MLproject" target="_blank" rel="noopener noreferrer">MLproject</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="workflow-definition">Workflow Definition<a href="#workflow-definition" class="hash-link" aria-label="Direct link to Workflow Definition" title="Direct link to Workflow Definition">​</a></h3><p>The whole Kraken CI workload is defined <a href="https://github.com/Kraken-CI/mlflow-example/blob/master/.kraken/one.py" target="_blank" rel="noopener noreferrer">here</a>.</p><p>There are 3 steps:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token property">"steps"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"tool"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"git"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"checkout"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://github.com/Kraken-CI/mlflow-example.git"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"tool"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"shell"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"cmd"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/opt/conda/bin/mlflow run ."</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"cwd"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"mlflow-example"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"timeout"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1200</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"tool"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"values_collect"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"files"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"metrics.json"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token property">"namespace"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"metrics"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"params.json"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">           </span><span class="token property">"namespace"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"params"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"cwd"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"mlflow-example"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol><li><p>Checkout mflow example project sources</p></li><li><p>Run the mlflow project ie. download data, prepare it, run a
training and at the end store metrics about the trained model to
metrics.json</p></li><li><p>Upload collected metrics together with hyperparameters from
params.json to Kraken server</p></li></ol><p>The last step allows for charting accuracy and RMS of the model over
builds.</p><p>There is one more element defined in the workflow: the definition of
execution environment:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token property">"environments"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"system"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"krakenci/mlflow"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"executor"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"docker"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"agents_group"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"all"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">       </span><span class="token property">"config"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"default"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">   </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here we can notice the use of a pre-prepared image with mlflow.
It is available in Docker hub:
<a href="https://hub.docker.com/r/krakenci/mlflow" target="_blank" rel="noopener noreferrer">krakenci/mlflow</a>.</p><p>The whole example of workflow is present in Kraken lab:
<a href="https://lab.kraken.ci/branches/32/ci" target="_blank" rel="noopener noreferrer">https://lab.kraken.ci/branches/32/ci</a>. Check the steps definitions in
<a href="https://lab.kraken.ci/branches/32" target="_blank" rel="noopener noreferrer">branch management page</a>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="execution-and-monitoring">Execution and Monitoring<a href="#execution-and-monitoring" class="hash-link" aria-label="Direct link to Execution and Monitoring" title="Direct link to Execution and Monitoring">​</a></h3><p>Besides the workflow definition, Kraken UI also shows collected data
and the charts drawn from this data:
<a href="https://lab.kraken.ci/test_case_results/595950" target="_blank" rel="noopener noreferrer">https://lab.kraken.ci/test_case_results/595950</a>, the charts tab.</p><p>The right chart shows value of <code>loss</code> collected over time:</p><a href="/img/screen-values-chart.png" target="blank"><img src="/img/screen-values-chart.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h3><p>This article shows how Kraken CI can be used to build an MLOps
pipeline.  The pipeline downloads raw data, prepares the data for
training and then executes the training. The trained model
metrics are collected and charted in Kraken UI at the end.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="devops" term="devops"/>
        <category label="mlops" term="mlops"/>
        <category label="mlflow" term="mlflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dark Mode in 0.945 Release]]></title>
        <id>https://kraken.ci/blog/dark-mode-in-0-945</id>
        <link href="https://kraken.ci/blog/dark-mode-in-0-945"/>
        <updated>2022-04-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The dark mode is the main feature in 0.945 release.]]></summary>
        <content type="html"><![CDATA[<p>The dark mode is the main feature in <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.945" target="_blank" rel="noopener noreferrer">0.945</a> release.</p><p>Besides that, it contains:</p><ul><li>added a new tool <code>values_collect</code> that allows collecting values and then doing charts in UI based on them</li><li>added cleaning cache in MinIO</li><li>updated Go base image</li><li>added new base image for <a href="https://mlflow.org/" target="_blank" rel="noopener noreferrer">MLflow</a></li></ul><p>More information about these changes is below.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="dark-mode">Dark Mode<a href="#dark-mode" class="hash-link" aria-label="Direct link to Dark Mode" title="Direct link to Dark Mode">​</a></h3><p>Now it is possible to look at Kraken CI web UI at night using dark mode.</p><a href="/img/screen-main-light.png" target="blank"><img src="/img/screen-main-light.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><a href="/img/screen-main-dark.png" target="blank"><img src="/img/screen-main-dark.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>If the dark mode is switched on in the browser that it will be
automatically activated in Kraken CI web UI. Otherwise, it is
possible to manually switch the dark mode on or off using the profile
drop-down button in the top left corner of the screen (see below).</p><a href="/img/screen-main-dark-mode-switch.png" target="blank"><img src="/img/screen-main-dark-mode-switch.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="new-tool-values_collect">New Tool values_collect<a href="#new-tool-values_collect" class="hash-link" aria-label="Direct link to New Tool values_collect" title="Direct link to New Tool values_collect">​</a></h3><p>When testing is being carried out by a Kraken agent, custom measured
metrics can be returned besides test results. Now it is possible to
just generate such measurements, store them in a JSON file and then
load them to the Kraken server. Then they will be visible on a job
results page and it is possible to display a chart based on these
values.</p><p>The reported file should look like this (e.g. metrics.json):</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"metric-1"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">432</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"metric-2"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2.12</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The step that consumes these values should look like this:</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"tool"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"values_collect"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"files"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"metrics.json"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"namespace"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"metrics"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"params.json"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token property">"namespace"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"params"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">"cwd"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"example"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The end results looks like that:</p><a href="/img/screen-values-chart.png" target="blank"><img src="/img/screen-values-chart.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>The whole example of workflow with collected results is present in
Kraken lab: <a href="https://lab.kraken.ci/branches/32/ci" target="_blank" rel="noopener noreferrer">https://lab.kraken.ci/branches/32/ci</a>. Check the steps
definitions in <a href="https://lab.kraken.ci/branches/32" target="_blank" rel="noopener noreferrer">branch management
page</a> and then check the charts on
<a href="https://lab.kraken.ci/test_case_results/595950" target="_blank" rel="noopener noreferrer">tests results page</a>,
in the charts tab.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cleaning-cache-in-minio">Cleaning Cache in MinIO<a href="#cleaning-cache-in-minio" class="hash-link" aria-label="Direct link to Cleaning Cache in MinIO" title="Direct link to Cleaning Cache in MinIO">​</a></h3><p>The files that are always pulled to a build environmnt can be cached
between builds, so they don't have to be downloaded from the internet
each time. More about caching
<a href="http://localhost:3000/docs/schema/#cache" target="_blank" rel="noopener noreferrer">here</a>.</p><p>The Current release introduces a feature that automatically removes
old cached files. Now, after 10 days, these files are deleted from
MinIO.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="changes-in-base-images">Changes in Base Images<a href="#changes-in-base-images" class="hash-link" aria-label="Direct link to Changes in Base Images" title="Direct link to Changes in Base Images">​</a></h3><p>The Go lang base image has been updated. The latest image contains Go
in 1.18.  The location of the image is:
<a href="https://hub.docker.com/r/krakenci/golang" target="_blank" rel="noopener noreferrer">krakenci/golang:1.18</a>.</p><p>There is also a new image with <a href="https://mlflow.org/" target="_blank" rel="noopener noreferrer">MLflow</a>. It is
available under:
<a href="https://hub.docker.com/r/krakenci/mlflow" target="_blank" rel="noopener noreferrer">krakenci/mlflow</a>.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="release" term="release"/>
        <category label="theme" term="theme"/>
        <category label="images" term="images"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Last Few Releases]]></title>
        <id>https://kraken.ci/blog/last-few-releases</id>
        <link href="https://kraken.ci/blog/last-few-releases"/>
        <updated>2022-04-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The last mentioned Kraken CI release on the blog was]]></summary>
        <content type="html"><![CDATA[<p>The last mentioned Kraken CI release on the blog was
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.854" target="_blank" rel="noopener noreferrer">0.854</a>.
Since then there was several releases:
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.868" target="_blank" rel="noopener noreferrer">0.868</a>,
<a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.909" target="_blank" rel="noopener noreferrer">0.909</a> and
the last one:
<strong><a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.933" target="_blank" rel="noopener noreferrer">0.933</a></strong>.
They introduce various new features and lots of fixes.</p><p>The changes include:</p><ul><li>added a chart with results history on a flow page</li><li>added a multi-dimentional table with pass ratio stats of a flow</li><li>added masking secrets in logs</li><li>many improvements to the job's log panel like coloring and timestamps on/off</li><li>added navigation to prev and next flow in breadcrumb on the flow page</li></ul><p>More information about these changes is below.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="chart-with-pass-ratio-history">Chart with Pass Ratio History<a href="#chart-with-pass-ratio-history" class="hash-link" aria-label="Direct link to Chart with Pass Ratio History" title="Direct link to Chart with Pass Ratio History">​</a></h3><p>The flow page has now two new tabs. One of them is a <code>Results Charts</code>
tab.  On this tab, a results history chart can be found.  It presents
a pass ratio line in % units and two more lines: passed and total that
shows the number of passed tests and the total number of tests over time.</p><a href="/img/screen-flow-pass-ratio-history.png" target="blank"><img src="/img/screen-flow-pass-ratio-history.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pass-ratio-stats-of-flow">Pass Ratio Stats of Flow<a href="#pass-ratio-stats-of-flow" class="hash-link" aria-label="Direct link to Pass Ratio Stats of Flow" title="Direct link to Pass Ratio Stats of Flow">​</a></h3><p>On the other tab, <code>Results Stats</code>, a table shows tests passing
stats. The dimensions of the table are dynamic. They can be selected
from dropdowns available over the table. There can be chosen:
<code>Stage</code>, <code>Agents Group</code> and <code>System</code>.</p><a href="/img/screen-flow-pass-ratio-stats.png" target="blank"><img src="/img/screen-flow-pass-ratio-stats.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="secrets-masking">Secrets Masking<a href="#secrets-masking" class="hash-link" aria-label="Direct link to Secrets Masking" title="Direct link to Secrets Masking">​</a></h3><p>Another feature is related to security. Quite often, a password or
some access key needs to be passed during build or test
execution. Sometimes this secret is revealed in logs. Now Kraken knows
secrets defined in a project and it masks them in the logs. The
secrets are caught quite early and they do not leave a machine that
traced them to logs. The log database stores only masked passwords.</p><p>There is one interesting property of this masking that cannot be found
in other CI systems: it can mask multiline secrets like SSH private
key.</p><a href="/img/screen-logs-masked-secrets.png" target="blank"><img src="/img/screen-logs-masked-secrets.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="log-panel-improvements">Log Panel Improvements<a href="#log-panel-improvements" class="hash-link" aria-label="Direct link to Log Panel Improvements" title="Direct link to Log Panel Improvements">​</a></h3><p>There were added several improvements to the log panel:</p><ul><li>coloring ANSI color codes in HTML log box</li><li>turning timestamps on/off</li><li>showing missing timestamps</li><li>log loading indicator</li></ul><p>The screens below show colored logs and timestamps that are either
switched off or switched on.</p><a href="/img/screen-log-box-timestamps-off.png" target="blank"><img src="/img/screen-log-box-timestamps-off.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><a href="/img/screen-log-box-timestamps-on.png" target="blank"><img src="/img/screen-log-box-timestamps-on.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h3 class="anchor anchorWithStickyNavbar_LWe7" id="flow-navigation-improved">Flow Navigation Improved<a href="#flow-navigation-improved" class="hash-link" aria-label="Direct link to Flow Navigation Improved" title="Direct link to Flow Navigation Improved">​</a></h3><p>The last feature presented here is flows navigation. In the breadcrumb
bar there are shown two arrows that allow for navigating to the
previous flow and to the next flow.</p><a href="/img/screen-flow-navigation.png" target="blank"><img src="/img/screen-flow-navigation.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="results" term="results"/>
        <category label="charts" term="charts"/>
        <category label="secrets" term="secrets"/>
        <category label="logs" term="logs"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Commenting Test Results]]></title>
        <id>https://kraken.ci/blog/commenting-test-results</id>
        <link href="https://kraken.ci/blog/commenting-test-results"/>
        <updated>2022-01-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This time not about autoscaling or other cloud feature. This time we]]></summary>
        <content type="html"><![CDATA[<p>This time not about autoscaling or other cloud feature. This time we
are coming back to the core area of Kraken: testing. Today's <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.854" target="_blank" rel="noopener noreferrer">0.854
release</a>
introduces test results commenting.</p><p>More information about commenting is below.</p><p><a href="/docs/test-results-basics#comments">Test results comments</a> feature allows
for adding sticky comments to test case results. When you spot a new
failure, you may add a comment stating, e.g. the reason for the failure
or link to a bug in a bug tracker. If the failure persists in the
subsequent test runs, the added comment is still presented next to
the new result. If new facts about the failure are revealed, you may
extend the comment.</p><p>There is also a state of the comment. More information about these
details can be found in the <a href="/docs/test-results-basics#comments">docs page</a>
of the results comments feature.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="git" term="git"/>
        <category label="webhooks" term="webhooks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Autoscaling with Kubernetes]]></title>
        <id>https://kraken.ci/blog/autoscaling-with-kubernetes</id>
        <link href="https://kraken.ci/blog/autoscaling-with-kubernetes"/>
        <updated>2021-12-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Previous Kraken's release introduced a new installation method into Kubernetes using Helm chart.]]></summary>
        <content type="html"><![CDATA[<p>Previous Kraken's release introduced a new installation method into Kubernetes using Helm chart.
Today's <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.813" target="_blank" rel="noopener noreferrer">0.813 release</a>
allows for autoscaling on Kubernetes.</p><p>More information about Kraken on Kubernetes is below.</p><p>Autoscaling <a href="/docs/autoscale-in-cloud">docs</a> have been
updated and now includes details about Kubernetes.</p><p>Additionally, a new <a href="/docs/guide-kubernetes">guide for Kubernetes</a> has
been prepared.  It presents, step by step, how to deploy Kraken to
Kubernetes cluster, configure autoscaling on Kubernetes and how to run
the first job there.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="git" term="git"/>
        <category label="webhooks" term="webhooks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Installation on Kubernetes]]></title>
        <id>https://kraken.ci/blog/installation-to-kubernetes</id>
        <link href="https://kraken.ci/blog/installation-to-kubernetes"/>
        <updated>2021-12-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The latest release 0.788 release]]></summary>
        <content type="html"><![CDATA[<p>The latest release <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.788" target="_blank" rel="noopener noreferrer">0.788 release</a>
brings support for Kraken installation into Kubernetes using Helm chart.</p><p><a href="/docs/install-helm">Helm installation</a> guide shows how to do this.</p><p>Full information about current and past Helm chart releases can be
found on: <a href="https://artifacthub.io/packages/helm/kraken-ci/kraken-ci" target="_blank" rel="noopener noreferrer">https://artifacthub.io/packages/helm/kraken-ci/kraken-ci</a>.</p><p>More information about ArtiactHub is below.</p><a href="/img/artifacthub-io.png" target="blank"><img src="/img/artifacthub-io.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>There are presented install and upgrade steps. The templates of the
charts are available, so it is possible to check what and how they
will be installed in a Kubernetes cluster. There are also shown
configuration fields with default values.</p><p>Besides that, the history of releases is provided, and a list of the
referenced container images in pod deployments.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="git" term="git"/>
        <category label="webhooks" term="webhooks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webhooks for GitLab and Gitea]]></title>
        <id>https://kraken.ci/blog/webhooks-for-gitlab-and-gitea</id>
        <link href="https://kraken.ci/blog/webhooks-for-gitlab-and-gitea"/>
        <updated>2021-11-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The latest release 0.753 release]]></summary>
        <content type="html"><![CDATA[<p>The latest release <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.753" target="_blank" rel="noopener noreferrer">0.753 release</a>
brings support for webhooks for 2 new Git hosting services: <a href="https://gitlab.org" target="_blank" rel="noopener noreferrer">GitLab</a>
and <a href="https://gitea.io/" target="_blank" rel="noopener noreferrer">Gitea</a>.</p><p><a href="/docs/quick-start">Quick Start</a> guide shows how to install Kraken CI.</p><p><a href="/docs/guide-webhooks">Webhooks Guide</a> shows how to use webhooks,
now in GitLab, Gitea and GitHub.</p><p>Webhooks allows for triggering a flow in a branch. The webhook may
come now from 3 Git hosting services: GitLab, Gitea and GitHub.  There
are two kinds of webhook events supported: push and pull request (in
the case of GitHub and Gitea) and merge request (in the case of
GitLab). A push even to a given branch causes a CI flow to be
started. If this is a pull request or a merge request, then a DEV flow
is started. If a workflow schema checks out sources from this
repository, a version indicated in the push or the pull/merge request is
checked out.</p><p>The <a href="/docs/guide-webhooks">Webhook Guide</a> shows how to configure
webhooks in a project, and then how to configure a Git hosting
service. In the end, checking out the repository in the workflow
schema is presented.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="git" term="git"/>
        <category label="webhooks" term="webhooks"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Autoscaling with Azure and AWS ECS]]></title>
        <id>https://kraken.ci/blog/autoscaling-with-azure-and-aws-ecs</id>
        <link href="https://kraken.ci/blog/autoscaling-with-azure-and-aws-ecs"/>
        <updated>2021-10-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The latest release 0.748 release]]></summary>
        <content type="html"><![CDATA[<p>The latest release <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.748" target="_blank" rel="noopener noreferrer">0.748 release</a>
brings a new public cloud in autoscaling features: Azure and AWS ECS.</p><p><a href="/docs/quick-start">Quick Start</a> guide shows how to install Kraken CI.</p><p><a href="/docs/guide-autoscale">Autoscaling Guide</a> shows how to use
autoscaling with Azure VMs and AWS ECS.</p><p>Maintaining a fixed number of machines for Kraken CI can be costly. If
there is no high traffic of builds, then some machines sit idle and
waste power. The solution to this problem is autoscaling ie. spawning
machines with Kraken Agents dynamically depending on the current needs
in the Kraken CI. If there is submitted a new flow with many building
or testing jobs, then new machines are spawned. When the flow
completes, machines are terminated and no costs are incurred.</p><p>The <a href="/docs/guide-autoscale">Autoscaling Guide</a> shows how to configure
access to Azure, then how to configure parameters and behaviour of
spawned machines. In the end, the usage in job definitions is
presented.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="cloud" term="cloud"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Testing Frameworks]]></title>
        <id>https://kraken.ci/blog/testing-frameworks</id>
        <link href="https://kraken.ci/blog/testing-frameworks"/>
        <updated>2021-08-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[There have been added three articles in the Kraken's documentation]]></summary>
        <content type="html"><![CDATA[<p>There have been added three articles in the Kraken's documentation
about integration of testing frameworks with Kraken CI:</p><ul><li><a href="/docs/tf-junit">JUnit</a></li><li><a href="/docs/tf-pytest">Pytest</a></li><li><a href="/docs/tf-robotframework">RobotFramework</a></li></ul><p>The latest release <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.698" target="_blank" rel="noopener noreferrer">0.698
release</a>
brings also a new feature: collecting, storing and presenting custom
generated reports in e.g. HTML.</p><p><a href="/docs/quick-start">Quick Start</a> guide shows how to install Kraken CI.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="testing-frameworks">Testing Frameworks<a href="#testing-frameworks" class="hash-link" aria-label="Direct link to Testing Frameworks" title="Direct link to Testing Frameworks">​</a></h3><p>The articles about testing frameworks shows how to use well known
frameworks like <a href="/docs/tf-junit">JUnit</a>, <a href="/docs/tf-pytest">Pytest</a> and
<a href="/docs/tf-robotframework">RobotFramework</a> inside Kraken CI. There are
presented stage workflow schemas with steps that:</p><ol><li>execute the tests using particular framework</li><li>report results to Kraken server</li><li>store generated custom reports on Kraken server</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="custom-reports">Custom Reports<a href="#custom-reports" class="hash-link" aria-label="Direct link to Custom Reports" title="Direct link to Custom Reports">​</a></h3><p>The latest release <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.698" target="_blank" rel="noopener noreferrer">0.698
release</a>
allows now for storing and presenting custom reports in e.g. HTML format.
The are available along current generic test case results page.</p><p>More details about step for storing reports can be found in <a href="/docs/schema#artifacts">the
docs</a> and example usage on <a href="/docs/tf-robotframework">RobotFramework
example</a>.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="cloud" term="cloud"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Autoscaling with AWS]]></title>
        <id>https://kraken.ci/blog/autoscaling-with-aws</id>
        <link href="https://kraken.ci/blog/autoscaling-with-aws"/>
        <updated>2021-07-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The latest release 0.687 release]]></summary>
        <content type="html"><![CDATA[<p>The latest release <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.687" target="_blank" rel="noopener noreferrer">0.687 release</a>
brings a stabilization to autoscaling feature.</p><p><a href="/docs/quick-start">Quick Start</a> guide shows how to install Kraken CI.</p><p><a href="/docs/guide-autoscale">Autoscaling Guide</a> shows how to use autoscaling with AWS.</p><p>Maintaining a fixed number of machines for Kraken CI can be costly. If
there is no high traffic of builds, then some machines sit idle and
waste power. The solution to this problem is autoscaling ie. spawning
machines with Kraken Agents dynamically depending on the current needs
in the Kraken CI. If there is submitted a new flow with many building
or testing jobs, then new machines are spawned. When the flow
completes, machines are terminated and no costs are incurred.</p><p>The <a href="/docs/guide-autoscale">Autoscaling Guide</a> shows how to configure
access to AWS, then how to configure parameters and behaviour of
spawned machines. In the end, the usage in job definitions is
presented.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="cloud" term="cloud"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kraken Release 0.645]]></title>
        <id>https://kraken.ci/blog/kraken-release-0-645</id>
        <link href="https://kraken.ci/blog/kraken-release-0-645"/>
        <updated>2021-07-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The 0.645 release contains several new features and improvements and some fixes.]]></summary>
        <content type="html"><![CDATA[<p>The <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.645" target="_blank" rel="noopener noreferrer">0.645 release</a> contains several new features and improvements and some fixes.
The most noteworthy changes are:</p><ul><li>added background steps</li><li>added support for Rocky Linux</li><li>replaced Celery with RQ for background tasks</li><li>upgraded Angular and PrimeNG to 12</li></ul><p><a href="/docs/quick-start">Quick Start</a> guide shows how to install Kraken CI.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-list-of-changes">The list of changes<a href="#the-list-of-changes" class="hash-link" aria-label="Direct link to The list of changes" title="Direct link to The list of changes">​</a></h2><p>The complete list of changes looks as follows.</p><p>Features &amp; improvements:</p><ul><li>added more details about RQ jobs on the diagnostics page</li><li>added changing name of branch in a repo</li><li>when run is being started then stage schema is refreshed from repo</li><li>added button for checking email and AWS settings</li><li>converted timestamps columns to be with timezone in Postgresql schema</li><li>converted all char(n) columns in db to text</li><li>added doing db backup during deployment</li></ul><p>Fixes:</p><ul><li>fixed deleting dangling agents with no AWS instance</li><li>added db rollback in watchdog in case of exception</li><li>improved checking agents vm to destroy</li><li>pytest tool: added check if collecting tests failed</li><li>fixed counting available agents</li><li>added detecting jobs with no agent and spawning them</li><li>improved creating system records</li><li>improved checking args to agent</li><li>improved pulling git repo in git tool</li></ul><p>More details about background steps can be found in <a href="/docs/schema#shell">the documentation</a>.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="release" term="release"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kraken Release 0.557]]></title>
        <id>https://kraken.ci/blog/kraken-release-0-557</id>
        <link href="https://kraken.ci/blog/kraken-release-0-557"/>
        <updated>2021-05-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The 0.557 release contains several new features and improvements and some fixes.]]></summary>
        <content type="html"><![CDATA[<p>The <a href="https://github.com/Kraken-CI/kraken/releases/tag/v0.557" target="_blank" rel="noopener noreferrer">0.557 release</a> contains several new features and improvements and some fixes.
The most noteworthy changes are:</p><ul><li>improved diagnostics capabilities, i.e. browsing internal logs from Kraken services</li><li>integration with AWS EC2 - this is in beta state</li></ul><p><a href="/docs/quick-start">Quick Start</a> guide shows how to install Kraken CI.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-list-of-changes">The list of changes<a href="#the-list-of-changes" class="hash-link" aria-label="Direct link to The list of changes" title="Direct link to The list of changes">​</a></h2><p>The complete list of changes looks as follows.</p><p>Features &amp; improvements:</p><ul><li>#105 added browsing Kraken logs in diagnostics page</li><li>added errors number indicator in the top menu bar</li><li>added integration with AWS EC2 - spawning VMs for jobs (beta/preview)</li><li>added loading status with a spinner to submit, refresh and other buttons</li><li>added interpolating variables in system and agents_group names in a workflow schema</li><li>added adding kraken user to docker group and configuring sudo in agent installer</li><li>kraken workflow: switched to AWS agents in build and static analysis jobs</li><li>added codebeat badge to readme</li></ul><p>Fixes:</p><ul><li>fixed preparing repo changes data</li><li>fixed counting agents in agents group</li><li>fixed updating schema_from_repo_enabled</li><li>fixed colors of top menu items</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="improved-diagnostics">Improved diagnostics<a href="#improved-diagnostics" class="hash-link" aria-label="Direct link to Improved diagnostics" title="Direct link to Improved diagnostics">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="logs">Logs<a href="#logs" class="hash-link" aria-label="Direct link to Logs" title="Direct link to Logs">​</a></h3><p>The diagnostics page accessible from the top menu bar got a
new feature: browser of Kraken services logs. The second tab on the
diagnostics page, called <code>Logs</code>, now contains filters and a
logs window.</p><a href="/img/screen-diagnostics-logs.png" target="blank"><img src="/img/screen-diagnostics-logs.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>The list of select buttons at the top allows selecting Kraken services
like server/api, celery or watchdog. Below, there is a dropbox with
log level selection, from info level to error level. When the celery
service is selected, selecting task type from the dropbox list is also
possible.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="error-indicator">Error Indicator<a href="#error-indicator" class="hash-link" aria-label="Direct link to Error Indicator" title="Direct link to Error Indicator">​</a></h3><p>To make it easier to reach logs with some problems, there have been
added an error indicator in the top menu bar.</p><a href="/img/screen-error-indicator.png" target="blank"><img src="/img/screen-error-indicator.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>It is visible on all Kraken pages. If it is greater than 0, it is
displayed in reddish color to get user attention. The count indicates
the number of errors in Kraken services logs in the last hour.
When clicked, it leads to the logs page.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="preliminary-aws-ec2-integration">Preliminary AWS EC2 integration<a href="#preliminary-aws-ec2-integration" class="hash-link" aria-label="Direct link to Preliminary AWS EC2 integration" title="Direct link to Preliminary AWS EC2 integration">​</a></h2><p>The second, quite exciting feature, is integration with AWS EC2. The
integration allows for autoscaling Kraken's agents. If no jobs are
waiting for execution, then there are no waitng agents on EC2
VMs. When they appear, new VMs in EC2 are spawned immediately. If the
number of jobs grows, the number of VMs can grow as well. There is
possible to set a limit for the number of VMs. VMs can be reused or
reclaimed after a given period of idle time or after an indicated
number of executed jobs.</p><p>The configuration in Kraken for AWS EC2 integration is 1) in global
settings (credentials) and 2) on the agent's group page.</p><p>More details will be presented when the feature is completed.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="release" term="release"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kraken Release 0.492]]></title>
        <id>https://kraken.ci/blog/kraken-release-0-492</id>
        <link href="https://kraken.ci/blog/kraken-release-0-492"/>
        <updated>2021-04-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The 0.492 release contains one feature:]]></summary>
        <content type="html"><![CDATA[<p>The 0.492 release contains one feature:</p><ul><li>status badges</li></ul><p>and two fixes:</p><ul><li>fixed collecting commits info in case there are deleted files</li><li>fixed returning tests results counts - mistake during code cleanup</li></ul><p>The status badges indicate the current quality of a branch of a project.</p><a href="/img/kraken-badges.png" target="blank"><img src="/img/kraken-badges.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>There are three types of badges. They are indicating:</p><ul><li>building state (if there are no errors)</li><li>tests results with fixes and regression counts</li><li>issues count with a count of newly discovered issues</li></ul><p>Links to the badges are available on a branch management page, in the Status Badge tab:</p><a href="/img/screen-branch-mgmt-badges.png" target="blank"><img src="/img/screen-branch-mgmt-badges.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="release" term="release"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kraken's Code Quality]]></title>
        <id>https://kraken.ci/blog/kraken-code-quality</id>
        <link href="https://kraken.ci/blog/kraken-code-quality"/>
        <updated>2021-04-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The last week brings to Kraken's source code many quality]]></summary>
        <content type="html"><![CDATA[<p>The last week brings to Kraken's source code many quality
improvements. Services like
<a href="https://lgtm.com/projects/g/Kraken-CI/kraken/" target="_blank" rel="noopener noreferrer">LGTM</a> and
<a href="https://app.codacy.com/gh/Kraken-CI/kraken/dashboard" target="_blank" rel="noopener noreferrer">Codacy</a> help
fixing code smells but also serious problems. So during that week in
Kraken's repository, many commits have landed that refactor the
code, fix issues and do code cleanup.</p><p>Thanks to all these changes, the project earned these quality badges:</p><a href="/img/quality-badges.png" target="blank"><img src="/img/quality-badges.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="code" term="code"/>
        <category label="quality" term="quality"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kraken Release 0.475]]></title>
        <id>https://kraken.ci/blog/kraken-release-0-475</id>
        <link href="https://kraken.ci/blog/kraken-release-0-475"/>
        <updated>2021-04-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The 0.475 release contains three main features:]]></summary>
        <content type="html"><![CDATA[<p>The 0.475 release contains three main features:</p><ul><li>presenting <strong>the status of the last flows</strong> on the Kraken main page</li><li>presenting <strong>changes in Git repository</strong> that got into a given flow</li><li>presenting <strong>step duration</strong> on Run page, on the selected job, on Steps tab</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-last-flows-status-on-the-kraken-main-page">The last flows status on the Kraken main page<a href="#the-last-flows-status-on-the-kraken-main-page" class="hash-link" aria-label="Direct link to The last flows status on the Kraken main page" title="Direct link to The last flows status on the Kraken main page">​</a></h2><p>The Kraken main page presents a list of branches for each
project.  On the Demo project shown below, there are multiple
branches. Now under each branch, there are exposed the last completed
flow and the last in-progress flow. On the side, there is added a time
in grey how long ago the flow was completed or created.</p><a href="/img/screen-main-last-flows.png" target="blank"><img src="/img/screen-main-last-flows.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-repo-changes-on-a-flow-page">Git repo changes on a flow page<a href="#git-repo-changes-on-a-flow-page" class="hash-link" aria-label="Direct link to Git repo changes on a flow page" title="Direct link to Git repo changes on a flow page">​</a></h2><p>The flow can be triggered by a push to Github PR or a Git branch. Now
the flow page presents information about these Git changes.</p><p>If a push to Github PR triggered a flow, then it is presented
in <strong>Repo Changes</strong> tab on the flow page.</p><a href="/img/screen-flow-repo-trigger.png" target="blank"><img src="/img/screen-flow-repo-trigger.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><p>If a stage has a repository defined in a trigger section, then the changes
detected since previous flow are presented on another <strong>Repo Changes</strong>
tab for the selected stage.</p><a href="/img/screen-flow-run-repo-changes.png" target="blank"><img src="/img/screen-flow-run-repo-changes.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a><h2 class="anchor anchorWithStickyNavbar_LWe7" id="step-duration-on-run-page">Step duration on Run page<a href="#step-duration-on-run-page" class="hash-link" aria-label="Direct link to Step duration on Run page" title="Direct link to Step duration on Run page">​</a></h2><p>The run page show steps' status for the selected job on the Steps
tab. Now besides the current state of a step, there is included its
duration in seconds.</p><a href="/img/screen-run-step-duration.png" target="blank"><img src="/img/screen-run-step-duration.png" style="box-shadow:0 10px 10px 5px #777;margin-bottom:30px"></a>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="kraken" term="kraken"/>
        <category label="release" term="release"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World!]]></title>
        <id>https://kraken.ci/blog/hello-world</id>
        <link href="https://kraken.ci/blog/hello-world"/>
        <updated>2020-07-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome to Kraken CI blog. This is the first post on this blog.]]></summary>
        <content type="html"><![CDATA[<p>Welcome to Kraken CI blog. This is the first post on this blog.</p>]]></content>
        <author>
            <name>Michal Nowikowski</name>
            <uri>https://www.linkedin.com/in/godfryd</uri>
        </author>
        <category label="hello" term="hello"/>
        <category label="kraken" term="kraken"/>
    </entry>
</feed>