"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[4712],{5555:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(4848),r=t(8453);t(4074);const s={id:"tf-robotframework",title:"RobotFramework"},i=void 0,a={id:"tf-robotframework",title:"RobotFramework",description:"Intro",source:"@site/docs/tf-robotframework.mdx",sourceDirName:".",slug:"/tf-robotframework",permalink:"/docs/tf-robotframework",draft:!1,unlisted:!1,editUrl:"https://github.com/kraken-ci/website/edit/master/docs/tf-robotframework.mdx",tags:[],version:"current",frontMatter:{id:"tf-robotframework",title:"RobotFramework"},sidebar:"someSidebar",previous:{title:"Pytest",permalink:"/docs/tf-pytest"},next:{title:"Agents",permalink:"/docs/agents"}},l={},c=[{value:"Intro",id:"intro",level:2},{value:"Integration with Kraken CI",id:"integration-with-kraken-ci",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"intro",children:"Intro"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://robotframework.org/",children:"Robot Framework"})," is a generic open\nsource automation framework. It can be used for test automation and\nrobotic process automation (RPA)."]}),"\n",(0,o.jsx)(n.p,{children:"Robot Framework is actively supported, with many industry-leading\ncompanies using it in their software development. Robot Framework is\nopen and extensible and can be integrated with virtually any other\ntool to create powerful and flexible automation solutions. Being open\nsource also means that Robot Framework is free to use without\nlicensing costs."}),"\n",(0,o.jsx)(n.p,{children:"Robot Framework has easy syntax, utilizing human-readable\nkeywords. Its capabilities can be extended by libraries implemented\nwith Python or Java. The framework has a rich ecosystem around it,\nconsisting of libraries and tools that are developed as separate\nprojects."}),"\n",(0,o.jsx)(n.h2,{id:"integration-with-kraken-ci",children:"Integration with Kraken CI"}),"\n",(0,o.jsx)(n.p,{children:"The following example shows how to execute RobotFramework tests in Kraken CI.\nThe presented workflow stage does:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"pulls RobotFramefork project,"}),"\n",(0,o.jsx)(n.li,{children:"installs roboframework package using Python's pip tool,"}),"\n",(0,o.jsx)(n.li,{children:"runs RobotFramework tests generating results in JUnit format"}),"\n",(0,o.jsx)(n.li,{children:"collects results from JUnit file"}),"\n",(0,o.jsx)(n.li,{children:"and then stores generated reports by RobotFramework"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def stage(ctx):\n    return {\n        "parent": "root",\n        "triggers": {\n            "parent": True,\n        },\n        "parameters": [],\n        "configs": [],\n        "jobs": [{\n            "name": "robot",\n            "steps": [{\n            \t"tool": "git",\n            \t"checkout": "https://github.com/robotframework/RobotDemo.git"\n            }, {\n                "tool": "shell",\n                "cmd": "python3 -m venv venv && ./venv/bin/pip install robotframework"\n            }, {\n                "tool": "shell",\n                "cmd": "../venv/bin/robot --nostatusrc -x junit.xml *.robot",\n                "cwd": "RobotDemo"\n            }, {\n                "tool": "junit_collect",\n                "cwd": "RobotDemo",\n                "file_glob": "junit.xml"\n            }, {\n                "tool": "artifacts",\n                "cwd": "RobotDemo",\n                "source": ["log.html", "report.html"],\n                "report_entry": "report.html",\n                "public": True\n            }],\n            "environments": [{\n                "system": "krakenci/ubuntu:20.04",\n                "executor": "docker",\n                "agents_group": "all",\n                "config": "default"\n            }]\n        }]\n    }\n'})}),"\n",(0,o.jsx)(n.p,{children:"Let's dissect the workflow to particular steps and explain them."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    }, {\n        "tool": "shell",\n        "cmd": "python3 -m venv venv && ./venv/bin/pip install robotframework"\n    }, {\n'})}),"\n",(0,o.jsx)(n.p,{children:"This step prepares Python's virtualenv folder and then install\nRobotFramework using pip to this venv."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    }, {\n        "tool": "shell",\n        "cmd": "../venv/bin/robot --nostatusrc -x junit.xml *.robot",\n        "cwd": "RobotDemo"\n    }, {\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This one starts RobotFramework int the folder with ",(0,o.jsx)(n.code,{children:".robot"})," files. It\nalso says to RobotFramework to not return error exit code in case of\nfailure using ",(0,o.jsx)(n.code,{children:"--nostatusrc"})," switch as non-zero exit code would be\nread by Kraken as an error of tests execution. And then ",(0,o.jsx)(n.code,{children:"-x junit.xml"}),"\nswitch indicates to store results in JUnit format in the indicated\nfile."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    }, {\n        "tool": "junit_collect",\n        "cwd": "RobotDemo",\n        "file_glob": "junit.xml"\n    }, {\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This step collects results stored in ",(0,o.jsx)(n.code,{children:"junit.xml"})," file and uploads them\nto Kraken CI server. More details about ",(0,o.jsx)(n.code,{children:"junit_collect"})," tool can be\nfound in ",(0,o.jsx)(n.a,{href:"schema#junit-collect",children:"its docs section"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    }, {\n        "tool": "artifacts",\n        "cwd": "RobotDemo",\n        "source": ["log.html", "report.html"],\n        "report_entry": "report.html",\n        "public": True\n    }],\n'})}),"\n",(0,o.jsx)(n.p,{children:"And the last step takes generated HTML reports by RobotFramework and\nuploads them to Kraken CI server indicating which document is an entry\none."}),"\n",(0,o.jsx)(n.p,{children:"As a result of the execution of this stage in the Kraken's web UI,\nthere will be:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"set of test case results"}),"\n",(0,o.jsx)(n.li,{children:"report about RobotFramework execution"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Demo: ",(0,o.jsx)(n.a,{href:"https://lab.kraken.ci/branches/26",children:"https://lab.kraken.ci/branches/26"}),(0,o.jsx)("br",{}),"\nSources: ",(0,o.jsx)(n.a,{href:"https://github.com/Kraken-CI/workflow-examples/blob/main/robotframework/one.py",children:"https://github.com/Kraken-CI/workflow-examples/blob/main/robotframework/one.py"})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4074:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var o=t(4848);const r=e=>{let{img:n}=e;return(0,o.jsx)("a",{href:"/img/"+n,target:"blank",children:(0,o.jsx)("img",{src:"/img/"+n,style:{boxShadow:"0 10px 10px 5px #777",marginBottom:"30px"}})})}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);