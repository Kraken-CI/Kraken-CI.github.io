"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[6001],{7766:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>x,frontMatter:()=>i,metadata:()=>l,toc:()=>h});var r=s(4848),t=s(8453),d=s(4074);const i={id:"schema-data",title:"Data in Schema"},c=void 0,l={id:"schema-data",title:"Data in Schema",description:"There is a lot of data, in various types, that can be used in",source:"@site/docs/schema-data.md",sourceDirName:".",slug:"/schema-data",permalink:"/docs/schema-data",draft:!1,unlisted:!1,editUrl:"https://github.com/kraken-ci/website/edit/master/docs/schema-data.md",tags:[],version:"current",frontMatter:{id:"schema-data",title:"Data in Schema"},sidebar:"someSidebar",previous:{title:"Workflow Schema",permalink:"/docs/schema"},next:{title:"Environment Variables",permalink:"/docs/env-vars"}},a={},h=[{value:"Context",id:"context",level:2},{value:"Interpolation",id:"interpolation",level:2},{value:"Data Overview",id:"data-overview",level:2},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Secrets",id:"secrets",level:2},{value:"Workflow Objects Data",id:"workflow-objects-data",level:2},{value:"Project",id:"project",level:3},{value:"Branch",id:"branch",level:3},{value:"Stage",id:"stage",level:3},{value:"Flow",id:"flow",level:3},{value:"Run",id:"run",level:3},{value:"Flow and Run Sequences",id:"flow-and-run-sequences",level:3},{value:"Job",id:"job",level:3},{value:"Step",id:"step",level:3},{value:"Other",id:"other",level:3},{value:"User Parameters",id:"user-parameters",level:2},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"User Data",id:"user-data",level:2},{value:"Example 1",id:"example-1-1",level:4}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"There is a lot of data, in various types, that can be used in\nworkflow schema definitions. It can be accessed in two ways:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["via context that is passed to ",(0,r.jsx)(n.code,{children:"stage"})," function in stage code,"]}),"\n",(0,r.jsx)(n.li,{children:"using string interpolation."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsxs)(n.p,{children:["In the example code for the stage, a ",(0,r.jsx)(n.code,{children:"ctx"})," object is passed to the\n",(0,r.jsx)(n.code,{children:"stage"})," function. This context object allows access to various types\nof data."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def stage(ctx):\n\n    if ctx.flow.kind == \'ci\':\n        systems = ["ubuntu:22.04", "debian:bullseye", "fedora:37", "rockylinux:8"]\n    else:\n        systems = ["ubuntu:22.04"]\n\n    return {\n        "parent": "root",\n        "triggers": {\n            "interval": "10m",\n        },\n        "jobs": [{\n            "name": "hello job",\n            "steps": [{\n            }, {\n                "tool": "shell",\n                "cmd": "echo \'hello world\'"\n            }],\n            "environments": [{\n                "executor": "docker",\n                "system": systems,\n                "agents_group": "all",\n                "config": "default"\n            }]\n        }]\n    }\n'})}),"\n",(0,r.jsx)(n.h2,{id:"interpolation",children:"Interpolation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def stage(ctx):\n    return {\n        "parent": "root",\n        "triggers": {\n            "interval": "10m",\n        },\n        "jobs": [{\n            "name": "job for branch #{branch.branch_name}",\n            "steps": [{\n                "tool": "shell",\n                "cmd": "echo \'hello world\'"\n            }],\n            "environments": [{\n                "system": "ubuntu-18.04",\n                "agents_group": "all",\n                "config": "default"\n            }]\n        }]\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, there is a ",(0,r.jsx)(n.code,{children:"branch.branch_name"}),"\nvariable. Interpolation inside a string is done using the ",(0,r.jsx)(n.code,{children:"#{...}"}),"\noperator (hash and curly brackets, which is similar to Ruby's variable\ninterpolation in strings)."]}),"\n",(0,r.jsxs)(n.p,{children:["User variables can be defined as parameters in stages\n(see ",(0,r.jsx)(n.a,{href:"schema#parameters",children:"Parameters section in Workflow Schema chapter"}),").\nThen they can be accessed using their name in uppercase."]}),"\n",(0,r.jsx)(n.h2,{id:"data-overview",children:"Data Overview"}),"\n",(0,r.jsx)(n.p,{children:"There is several types of data:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"environment variables"}),"\n",(0,r.jsx)(n.li,{children:"secrets"}),"\n",(0,r.jsxs)(n.li,{children:["workflow objects: ",(0,r.jsx)(n.code,{children:"project"}),", ",(0,r.jsx)(n.code,{children:"branch"}),", ",(0,r.jsx)(n.code,{children:"stage"}),", ",(0,r.jsx)(n.code,{children:"flow"}),", ",(0,r.jsx)(n.code,{children:"run"}),", ",(0,r.jsx)(n.code,{children:"job"})," and ",(0,r.jsx)(n.code,{children:"step"})]}),"\n",(0,r.jsx)(n.li,{children:"user parameters, these are input parameters to a stage that can be\nprovided by a user manually"}),"\n",(0,r.jsx)(n.li,{children:"user data, data kept server-side that can be stored, update,\nmanipulated and used by workflow steps"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsx)(n.p,{children:"Environment variables are stored in a branch. They can be accessed in three ways:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["traditionally, as environment variable in a shell: ",(0,r.jsx)(n.code,{children:'"$MY_VAR"'}),","]}),"\n",(0,r.jsxs)(n.li,{children:["via string interpolation: ",(0,r.jsx)(n.code,{children:'"#{env.MY_VAR}"'}),","]}),"\n",(0,r.jsxs)(n.li,{children:["via context: ",(0,r.jsx)(n.code,{children:"ctx.env.MY_VAR"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def stage(ctx):\n    return {\n        "parent": "root",\n        "triggers": {\n            "parent": True,\n        },\n        "parameters": [],\n        "configs": [],\n        "jobs": [{\n            "name": "Env vars",\n            "steps": [{\n                "tool": "shell",\n                "cmd": "echo $MY_VAR"\n            }, {\n                "tool": "shell",\n                "cmd": "echo \'#{env.MY_VAR}\'"\n            }, {\n                "tool": "shell",\n                "cmd": "echo \'" + ctx.env.MY_VAR + "\'"\n            }],\n            "environments": [{\n                "system": "any",\n                "agents_group": "all",\n                "config": "default"\n            }]\n        }]\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["More about environment variables can be found in ",(0,r.jsx)(n.a,{href:"env-vars",children:"Environment Variables chapter"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"secrets",children:"Secrets"}),"\n",(0,r.jsx)(n.p,{children:"The values of secrets defined in a project can be accessed in the\nfollowing way:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Secret\xa0Type"}),(0,r.jsx)(n.th,{children:"Access"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Simple"}),(0,r.jsxs)(n.td,{children:["From context: ",(0,r.jsx)(n.code,{children:"ctx.secrets.<secret name>"})," ",(0,r.jsx)("br",{})," or via string interpolation: ",(0,r.jsx)(n.code,{children:"#{secrets.<secret name>}"}),", ",(0,r.jsx)("br",{})," e.g. ",(0,r.jsx)(n.code,{children:"ctx.secrets.access_token"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SSH\xa0Key"}),(0,r.jsxs)(n.td,{children:["From context: ",(0,r.jsx)(n.code,{children:"ctx.secrets.<secret name>.user"})," and ",(0,r.jsx)(n.code,{children:"ctx.secrets.<secret name>.key"})," ",(0,r.jsx)("br",{})," or via string interpolation: ",(0,r.jsx)(n.code,{children:"#{secrets.<secret name>.user}"})," and ",(0,r.jsx)(n.code,{children:"#{secrets.<secret name>.key}"}),", ",(0,r.jsx)("br",{})," e.g. ",(0,r.jsx)(n.code,{children:"ctx.secrets.github_creds.user"})]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Legacy approach:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Secret\xa0Type"}),(0,r.jsx)(n.th,{children:"Legacy Access"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Simple"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"#{KK_SECRET_SIMPLE_<secret name>}"}),", e.g. ",(0,r.jsx)(n.code,{children:"#{KK_SECRET_SIMPLE_access_token}"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SSH\xa0Key"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"#{KK_SECRET_USER_<secret_name>"})," and ",(0,r.jsx)(n.code,{children:"#{KK_SECRET_KEY_<secret_name>}"}),", e.g. ",(0,r.jsx)(n.code,{children:"#{KK_SECRET_USER_gitlab}"})," and ",(0,r.jsx)(n.code,{children:"#{KK_SECRET_KEY_gitlab}"})]})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:["More about secrets can be found in ",(0,r.jsx)(n.a,{href:"secrets",children:"Secrets chapter"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"workflow-objects-data",children:"Workflow Objects Data"}),"\n",(0,r.jsx)(n.h3,{id:"project",children:"Project"}),"\n",(0,r.jsxs)(n.p,{children:["In context: ",(0,r.jsx)(n.code,{children:"ctx.project.<field-name>"}),", in string interpolation: ",(0,r.jsx)(n.code,{children:"#{project.<field-name>}"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Available fields:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"Database ID of a project"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"created"})}),(0,r.jsx)(n.td,{children:"Creation date and time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name"})}),(0,r.jsx)(n.td,{children:"Name of a project"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"description"})}),(0,r.jsx)(n.td,{children:"Description of a project"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"data"})}),(0,r.jsxs)(n.td,{children:["User data, see ",(0,r.jsx)(n.a,{href:"#user-data",children:"User Data"})," section"]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The example of this data can be seen in the screenshot below. This\nscreen displays a Project page with the Data tab open."}),"\n",(0,r.jsx)(d.A,{img:"screen-data-project.png"}),"\n",(0,r.jsx)(n.h3,{id:"branch",children:"Branch"}),"\n",(0,r.jsxs)(n.p,{children:["In context: ",(0,r.jsx)(n.code,{children:"ctx.branch.<field-name>"}),", in string interpolation: ",(0,r.jsx)(n.code,{children:"#{branch.<field-name>}"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Available fields:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"Database ID of a branch"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"created"})}),(0,r.jsx)(n.td,{children:"Creation date and time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name"})}),(0,r.jsx)(n.td,{children:"Display name of a branch"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"branch_name"})}),(0,r.jsx)(n.td,{children:"A name of a branch in a repository"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"retention_policy"})}),(0,r.jsx)(n.td,{children:"Retention policy definition"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"data"})}),(0,r.jsxs)(n.td,{children:["User data shared for a branch, see ",(0,r.jsx)(n.a,{href:"#user-data",children:"User Data"})," section"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"data_ci"})}),(0,r.jsxs)(n.td,{children:["User data only related with CI flows, see ",(0,r.jsx)(n.a,{href:"#user-data",children:"User Data"})," section"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"data_dev"})}),(0,r.jsxs)(n.td,{children:["User data only related with Dev flows, see ",(0,r.jsx)(n.a,{href:"#user-data",children:"User Data"})," section"]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The example of this data can be seen in the screenshot below. This\nscreen displays the Branch Management page, specifically the Data tab."}),"\n",(0,r.jsx)(d.A,{img:"screen-data-branch.png"}),"\n",(0,r.jsx)(n.h3,{id:"stage",children:"Stage"}),"\n",(0,r.jsxs)(n.p,{children:["In context: ",(0,r.jsx)(n.code,{children:"ctx.stage.<field-name>"}),", in string interpolation: ",(0,r.jsx)(n.code,{children:"#{stage.<field-name>}"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Available fields:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"Database ID of a stage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"created"})}),(0,r.jsx)(n.td,{children:"Creation date and time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name"})}),(0,r.jsx)(n.td,{children:"Name of a stage"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"description"})}),(0,r.jsx)(n.td,{children:"Description of a stage"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The example of this data can be visible on the screenshot below. This\nscreen shows a Branch Management page, the Data tab of the selected stage."}),"\n",(0,r.jsx)(d.A,{img:"screen-data-stage.png"}),"\n",(0,r.jsx)(n.h3,{id:"flow",children:"Flow"}),"\n",(0,r.jsxs)(n.p,{children:["In context: ",(0,r.jsx)(n.code,{children:"ctx.flow.<field-name>"}),", in string interpolation: ",(0,r.jsx)(n.code,{children:"#{flow.<field-name>}"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Available fields:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"Database ID of a flow"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"created"})}),(0,r.jsx)(n.td,{children:"Creation date and time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"kind"})}),(0,r.jsxs)(n.td,{children:["Kind of a flow, ",(0,r.jsx)(n.code,{children:"ci"})," or ",(0,r.jsx)(n.code,{children:"dev"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"trigger"})}),(0,r.jsx)(n.td,{children:"Trigger event information"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"seq"})}),(0,r.jsxs)(n.td,{children:["Sequence number for a flow, see ",(0,r.jsx)(n.a,{href:"#flow-and-run-sequences",children:"Flow and Run Sequences"})," section"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"data"})}),(0,r.jsxs)(n.td,{children:["User data, see ",(0,r.jsx)(n.a,{href:"#user-data",children:"User Data"})," section"]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The example of this data can be seen in the screenshot below. This\nscreen displays a Flow page with the Data tab."}),"\n",(0,r.jsx)(d.A,{img:"screen-data-flow.png"}),"\n",(0,r.jsx)(n.h3,{id:"run",children:"Run"}),"\n",(0,r.jsxs)(n.p,{children:["In context: ",(0,r.jsx)(n.code,{children:"ctx.run.<field-name>"}),", in string interpolation: ",(0,r.jsx)(n.code,{children:"#{run.<field-name>}"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Available fields:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"Database ID of a run"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"created"})}),(0,r.jsx)(n.td,{children:"Creation date and time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"seq"})}),(0,r.jsxs)(n.td,{children:["Sequence number for a run, see ",(0,r.jsx)(n.a,{href:"#flow-and-run-sequences",children:"Flow and Run Sequences"})," section"]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The example data can be seen in the screenshot below. This screen\ndisplays a Flow page, with the Data tab selected for the specific run."}),"\n",(0,r.jsx)(d.A,{img:"screen-data-run.png"}),"\n",(0,r.jsx)(n.h3,{id:"flow-and-run-sequences",children:"Flow and Run Sequences"}),"\n",(0,r.jsx)(n.p,{children:"Flows and Runs has predefined sequences that are incremented with each\nnew flow or run. Additionally, there variants specific to flow kinds\nsuch as CI and DEV."}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Sequence Name"}),(0,r.jsx)(n.th,{children:"Deprecated Name"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"flow.seq.shared"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"KK_FLOW_SEQ"})}),(0,r.jsx)(n.td,{children:"A variable that returns a sequence value for flows. The sequence is incremented with each flow regardless of its type, ie. it is shared between flow types."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"flow.seq.own"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"KK_CI_DEV_FLOW_SEQ"})}),(0,r.jsx)(n.td,{children:"A variable that returns a sequence value for flows. The sequence is incremented with each flow of given type (CI/DEV), ie. it is handled separately for each flow type."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"run.seq.shared"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"KK_RUN_SEQ"})}),(0,r.jsx)(n.td,{children:"A variable that returns a sequence value for runs of given stage. The sequence is incremented with each run regardless of flow type, ie. it is shared between flow types."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"run.seq.own"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"KK_CI_DEV_RUN_SEQ"})}),(0,r.jsx)(n.td,{children:"A variable that returns a sequence value for runs of given stage. The sequence is incremented with each run of given flow type (CI/DEV), ie. it is handled separately for each flow type."})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'{\n    ...\n    "flow_label": "bld-#{flow.seq.own}",\n    ...\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"job",children:"Job"}),"\n",(0,r.jsxs)(n.p,{children:["In context: ",(0,r.jsx)(n.code,{children:"ctx.job.<field-name>"}),", in string interpolation: ",(0,r.jsx)(n.code,{children:"#{job.<field-name>}"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Available fields:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"Database ID of a job"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"created"})}),(0,r.jsx)(n.td,{children:"Creation date and time"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name"})}),(0,r.jsx)(n.td,{children:"Name of a job"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"steps"})}),(0,r.jsxs)(n.td,{children:["A list of steps. More details below, in ",(0,r.jsx)(n.a,{href:"#step",children:"Step"})," section."]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The example of this data can be seen in the screenshot below. This\nscreen displays the Run page and the Data tab of the selected job."}),"\n",(0,r.jsx)(d.A,{img:"screen-data-job.png"}),"\n",(0,r.jsx)(n.h3,{id:"step",children:"Step"}),"\n",(0,r.jsxs)(n.p,{children:["In context: ",(0,r.jsx)(n.code,{children:"ctx.step.<field-name>"}),", in string interpolation: ",(0,r.jsx)(n.code,{children:"#{step.<field-name>}"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Available fields:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"id"})}),(0,r.jsx)(n.td,{children:"Database ID of a step"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"index"})}),(0,r.jsx)(n.td,{children:"Index of a step in a steps list, starts from 0"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"tool"})}),(0,r.jsx)(n.td,{children:"A name of a tool that is used in this step"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"cmd"})}),(0,r.jsx)(n.td,{children:"Command that was executed in step"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"job_id"})}),(0,r.jsx)(n.td,{children:"Job ID in database"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"name"})}),(0,r.jsx)(n.td,{children:"Name of the step"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"result"})}),(0,r.jsx)(n.td,{children:"Result of the step execution"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"result.duration"})}),(0,r.jsx)(n.td,{children:"Duration of the step"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"result.msg"})}),(0,r.jsx)(n.td,{children:"Error message. Present only when the step erred."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"result.reason"})}),(0,r.jsx)(n.td,{children:"Reason of the error. Present only when the step erred."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"result.retcode"})}),(0,r.jsx)(n.td,{children:"Return code of the step executing process. Present only when the step erred and returned non-zero return code."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"status"})}),(0,r.jsxs)(n.td,{children:["Execution status, integer. ",(0,r.jsx)(n.code,{children:"0"})," - not started, ",(0,r.jsx)(n.code,{children:"1"})," - in progress, ",(0,r.jsx)(n.code,{children:"2"})," - done (success), ",(0,r.jsx)(n.code,{children:"3"})," - error (failure), ",(0,r.jsx)(n.code,{children:"4"})," - skipped (also treated as success)."]})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The example of this data can be seen in the screenshot above. This\nscreen displays the Run page and the Data tab of the selected job."}),"\n",(0,r.jsx)(n.h3,{id:"other",children:"Other"}),"\n",(0,r.jsx)(n.p,{children:"Available fields:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"is_ci"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"True"})," if this is CI flow, otherwise ",(0,r.jsx)(n.code,{children:"False"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"is_dev"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"True"})," if this is Dev flow, otherwise ",(0,r.jsx)(n.code,{children:"False"})]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"user-parameters",children:"User Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["The description for defining user parameters can be found in the\n",(0,r.jsx)(n.a,{href:"schema#parameters",children:"Parameters section in Schema chapter"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Arguments provided for user parameters can be accessed from a context\n(",(0,r.jsx)(n.code,{children:"ctx.args.<arg-name>"}),") and also using string interpolation (",(0,r.jsx)(n.code,{children:"#{args.<arg-name>}"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"The following examples show how arguments can be used in a stage code."}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example 1"}),"\n",(0,r.jsx)(n.p,{children:"Accessing user arguments from the context:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def stage(ctx):\n\n    if ctx.args.testing_scope == \'full\':\n        systems = ["ubuntu:22.04", "debian:bullseye", "fedora:37", "rockylinux:8"]\n    else:\n        systems = ["ubuntu:22.04"]\n\n    return {\n        "parent": "root",\n        "triggers": {\n            "interval": "10m",\n        },\n        "parameters": [{\n            "name": "testing_scope",\n            "type": "string",\n            "default": "full",\n            "description": "Scope of tests. \'full\' or \'limited\'."\n        }],\n        "jobs": [{\n            "name": "hello job",\n            "steps": [{\n                "tool": "shell",\n                "cmd": "echo \'hello world\'"\n            }],\n            "environments": [{\n                "executor": "docker",\n                "system": systems,\n                "agents_group": "all",\n                "config": "default"\n            }]\n        }]\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Here, the ",(0,r.jsx)(n.code,{children:"testing_scope"})," user parameter is used to determine the\nscope of testing. If the user provides the value ",(0,r.jsx)(n.code,{children:"full"})," for\n",(0,r.jsx)(n.code,{children:"testing_scope"}),", then testing will be conducted across several\noperating systems. Otherwise, testing will be limited to a single\nsystem."]}),"\n",(0,r.jsx)(n.p,{children:"At first glance, it may look weird that the argument is being used in\nthe if condition before being defined. The stage function is executed\nmultiple times at different time intervals. During the very first\nexecution, all variables in the context are, by default, set to\nzero. Therefore, in that execution round, the parameters are\ndefined. In the next execution, the parameters are defined, and their\ndefault or user-provided values are known."}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example 2"}),"\n",(0,r.jsx)(n.p,{children:"Using string interpolation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def stage(ctx):\n    return {\n        "parent": "root",\n        "triggers": {\n            "interval": "10m",\n        },\n        "parameters": [{\n            "name": "count",\n            "type": "string",\n            "default": "10",\n            "description": "Number of tests to generate"\n        }],\n        "jobs": [{\n            "name": "random tests",\n            "steps": [{\n                "tool": "shell",\n                "cmd": "echo \'the count is #{args.count}\'"\n            }, {\n                "tool": "rndtest",\n                "count": "#{args.count}"\n            }],\n            "environments": [{\n                "executor": "docker",\n                "system": systems,\n                "agents_group": "all",\n                "config": "default"\n            }]\n        }]\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In the parameters section, the ",(0,r.jsx)(n.code,{children:"count"})," parameter is defined. Then,\nin the steps, it is used via string interpolation, i.e. ",(0,r.jsx)(n.code,{children:"#{args.count}"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"user-data",children:"User Data"}),"\n",(0,r.jsxs)(n.p,{children:["Instructions on how to manipulate user data can be found in\nthe ",(0,r.jsx)(n.a,{href:"/docs/schema#data",children:"Data tool section in Schema chapter"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"User data that has already been stored can be accessed from the stage\ncontext and through string interpolation."}),"\n",(0,r.jsx)(n.h4,{id:"example-1-1",children:"Example 1"}),"\n",(0,r.jsx)(n.p,{children:"Using data from stage context:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def stage(ctx):\n    jobs = []\n    for ts in ctx.flow.data.tests:\n        jobs.append({\n            "name": "tests %s" % ts,\n            "steps": [{\n                "tool": "shell",\n                "cmd": "echo \'run tests %s\'" % ts\n            }],\n            "environments": [{\n                "executor": "docker",\n                "system": "ubuntu:22.04",\n                "agents_group": "all",\n                "config": "default"\n            }]\n        })\n\n    return {\n        "parent": "root",\n        "triggers": {\n            "parent": True,\n        },\n        "jobs": jobs\n    }\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the ",(0,r.jsx)(n.code,{children:"tests"})," data should have already been set or\nupdated in the current flow, for example, in a previous stage where\nthe scope of tests was acquired from some external source. Now, in the\ncurrent stage, this acquired scope is being used to define jobs in the\nfor loop."]}),"\n",(0,r.jsxs)(n.p,{children:["Check full example code on ",(0,r.jsx)(n.a,{href:"https://github.com/Kraken-CI/workflow-examples/tree/main/dynamic-schema",children:"https://github.com/Kraken-CI/workflow-examples/tree/main/dynamic-schema"})]})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},4074:(e,n,s)=>{s.d(n,{A:()=>t});s(6540);var r=s(4848);const t=e=>{let{img:n}=e;return(0,r.jsx)("a",{href:"/img/"+n,target:"blank",children:(0,r.jsx)("img",{src:"/img/"+n,style:{boxShadow:"0 10px 10px 5px #777",marginBottom:"30px"}})})}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(6540);const t={},d=r.createContext(t);function i(e){const n=r.useContext(d);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);