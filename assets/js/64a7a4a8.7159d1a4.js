"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[7285],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=l,k=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return n?a.createElement(k,r(r({ref:t},u),{},{components:n})):a.createElement(k,r({ref:t},u))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4148:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var a=n(3117),l=n(102),i=(n(7294),n(4137)),r=["components"],o={id:"schema",title:"Workflow Schema"},s=void 0,p={unversionedId:"schema",id:"schema",title:"Workflow Schema",description:"This chapter presents syntax of workflow schema defined in stages of a",source:"@site/docs/schema.md",sourceDirName:".",slug:"/schema",permalink:"/docs/schema",editUrl:"https://github.com/kraken-ci/website/edit/master/docs/schema.md",tags:[],version:"current",frontMatter:{id:"schema",title:"Workflow Schema"},sidebar:"someSidebar",previous:{title:"Stages in a Branch",permalink:"/docs/stages"},next:{title:"Schema Variables",permalink:"/docs/schema-vars"}},u={},d=[{value:"Schema Elements",id:"schema-elements",level:2},{value:"Parent",id:"parent",level:2},{value:"Triggers",id:"triggers",level:2},{value:"parent",id:"parent-1",level:3},{value:"interval",id:"interval",level:3},{value:"date",id:"date",level:3},{value:"cron",id:"cron",level:3},{value:"repo",id:"repo",level:3},{value:"manual",id:"manual",level:3},{value:"Parameters",id:"parameters",level:2},{value:"Configs",id:"configs",level:2},{value:"Flow Label",id:"flow-label",level:2},{value:"Run Label",id:"run-label",level:2},{value:"Jobs",id:"jobs",level:2},{value:"Name",id:"name",level:3},{value:"Timeout",id:"timeout",level:3},{value:"Steps in Job",id:"steps-in-job",level:2},{value:"Built-in Step Tools",id:"built-in-step-tools",level:2},{value:"Shell",id:"shell",level:3},{value:"Shell: Hello World",id:"shell-hello-world",level:4},{value:"Git",id:"git",level:3},{value:"Artifacts",id:"artifacts",level:3},{value:"Cache",id:"cache",level:3},{value:"Pylint",id:"pylint",level:3},{value:"Pytest",id:"pytest",level:3},{value:"Junit Collect",id:"junit-collect",level:3},{value:"Go Test",id:"go-test",level:3},{value:"NgLint",id:"nglint",level:3},{value:"Cloc",id:"cloc",level:3},{value:"RndTest",id:"rndtest",level:3},{value:"Custom Tools",id:"custom-tools",level:3},{value:"Environment in Job",id:"environment-in-job",level:2},{value:"Agents Groups",id:"agents-groups",level:3},{value:"Executors",id:"executors",level:3},{value:"Systems",id:"systems",level:3},{value:"Notification",id:"notification",level:2},{value:"Email",id:"email",level:3},{value:"Slack",id:"slack",level:3},{value:"GitHub",id:"github",level:3}],m={toc:d};function c(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This chapter presents syntax of workflow schema defined in stages of a\nbranch."),(0,i.kt)("p",null,"Full schema syntax referenced is available in ",(0,i.kt)("a",{parentName:"p",href:"schema-ref"},"schema reference"),"."),(0,i.kt)("h2",{id:"schema-elements"},"Schema Elements"),(0,i.kt)("p",null,"There are defined several things in the schema:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parent")," stage"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"triggers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parameters")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"configs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"jobs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"notification")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout"))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"parent": "root",\n"triggers": {\n    "parent": True\n},\n"parameters": [],\n"configs": [],\n"jobs": [{\n    "name": "hello",\n    "steps": [{\n        "tool": "shell",\n        "cmd": "echo \'Hello World\'"\n    }],\n    "environments": [{\n        "system": "any",\n        "agents_group": "all",\n        "config": "default"\n    }]\n}]\n')),(0,i.kt)("h2",{id:"parent"},"Parent"),(0,i.kt)("p",null,"Parent allows for defining a chain of dependencies between subsequent\nstages. Current stage will be started only when parent stage has been\nfinished.  The value of ",(0,i.kt)("inlineCode",{parentName:"p"},"parent")," field is a name of a stage. If it is\nset to special value ",(0,i.kt)("inlineCode",{parentName:"p"},"root")," than it means that the stage does not\ndepend on anything and can be started as the first stage or one of the\nfirst stages, just after triggering a new flow in a branch."),(0,i.kt)("h2",{id:"triggers"},"Triggers"),(0,i.kt)("p",null,"Triggers indicate what events may start a stage and create its new\nrun.  There are several events: ",(0,i.kt)("inlineCode",{parentName:"p"},"parent"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"interval"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"date"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"cron"),",\n",(0,i.kt)("inlineCode",{parentName:"p"},"repo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"manual"),"."),(0,i.kt)("p",null,"Whole flow and its root stages can be also triggered manually in web UI or by a\nwebhook. More about that in ",(0,i.kt)("a",{parentName:"p",href:"webhooks"},"Webhooks chapter"),"."),(0,i.kt)("h3",{id:"parent-1"},"parent"),(0,i.kt)("p",null,"A stage is triggered by completion of a parent stage. It is defined as ",(0,i.kt)("inlineCode",{parentName:"p"},'"parent": True'),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"triggers": {\n   "parent": True\n}\n')),(0,i.kt)("h3",{id:"interval"},"interval"),(0,i.kt)("p",null,"Given stage is triggered specified amount of time after competion of\nprevious run of this stage.  The duration can be specified in a human\nreadable way e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"1d")," what means one day or ",(0,i.kt)("inlineCode",{parentName:"p"},"3h 30m")," what means 3\nhours and 30 minutes."),(0,i.kt)("p",null,"Example, start a new stage run every 10 minutes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"triggers": {\n   "interval": "10m"\n}\n')),(0,i.kt)("h3",{id:"date"},"date"),(0,i.kt)("p",null,"Given stage is triggered once, on specified date. The date can be\nprovided in human readable way, e.g.: ",(0,i.kt)("inlineCode",{parentName:"p"},"2012-01-19 17:21:00")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Sat\nSep 17 23:26:08 CEST 2016"),"."),(0,i.kt)("p",null,"Example, start a new stage run once on indicate date:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"triggers": {\n   "date": "2012-01-19 17:21:00"\n}\n')),(0,i.kt)("h3",{id:"cron"},"cron"),(0,i.kt)("p",null,"A stage is triggered on specified CRON rule e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"* * 10 * *"),". There\nare always 5 items. Each item is separated by space. The items meaning\nare as follows: minutes, hours, days, months, dow (day of week).  The\npossible values for each item can be found on\n",(0,i.kt)("a",{parentName:"p",href:"https://apscheduler.readthedocs.io/en/stable/modules/triggers/cron.html?highlight=cron#introduction"},"Advanced Python Scheduler web page")),(0,i.kt)("p",null,"Example, start a new stage run always half past nine AM:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"triggers": {\n   "cron": "30 9 * * *"\n}\n')),(0,i.kt)("h3",{id:"repo"},"repo"),(0,i.kt)("p",null,"Example, start a new stage run when there are new commits in master\nbranch of Kraken's repository; check for new commits every 60 minutes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"triggers": {\n    "repo": {\n        "url": "https://github.com/Kraken-CI/kraken/",\n        "branch": "master",\n        "interval": "60m"\n    }\n}\n')),(0,i.kt)("p",null,"Trigger build if there is a new commit to master branch in Kraken repo.\nCheck the repo every 60 minutes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"triggers": {\n    "repo": {\n        "repos": [{\n            "url": "https://github.com/Kraken-CI/kraken/",\n            "branch": "master"\n        }, {\n            "url": "https://github.com/Kraken-CI/website/",\n            "branch": "master"\n        }],\n        "interval": "60s"\n        "git_cfg": {\n            "http.proxy": "https://my-proxy.example.com:8080"\n        }\n    }\n}\n')),(0,i.kt)("p",null,"Trigger build if there is a new commit to master branch in any of two\nindicated repos.  Check the repo every 60 seconds. In clone operation\nset indicated HTTP proxy in Git config."),(0,i.kt)("p",null,"There is another way of trigger a run based on changes to a repository.\nCheck ",(0,i.kt)("a",{parentName:"p",href:"webhooks"},"webhooks")," chapter for details."),(0,i.kt)("h3",{id:"manual"},"manual"),(0,i.kt)("p",null,"Stage may be configured in a way that it is not automatically started,\neven if its parent has completed. This can be achieved by ",(0,i.kt)("inlineCode",{parentName:"p"},"manual"),"\ntrigger. When it is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"True")," then in a web UI its run is shown in\nblue and awaits user confirmation to start."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"triggers": {\n    "manual": True\n}\n')),(0,i.kt)("h2",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"When a flow is started manually it is possible to provide values for\nparameters defined in all stages in given branch. This allows for\ncustomizing behaviour of a stage and its jobs."),(0,i.kt)("p",null,"There can be defined multiple parameters in one stage. Each parameters\nhas the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - a string that identifies a parameter"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," - a type of parameter, for now it can be only ",(0,i.kt)("inlineCode",{parentName:"li"},"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default")," - a default value for a parameter, it is required"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description")," - a description of a parameter, it used when a\nparameter is presented in web UI")),(0,i.kt)("p",null,"Default value for a parameter is required. It is used when a flow is\nstarted automatically. In that situation it is not possible to provide\nvalues for the parameters manually."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"parameters": [{\n    "name": "COUNT",\n    "type": "string",\n    "default": "10",\n    "description": "Number of tests to generate"\n}]\n')),(0,i.kt)("p",null,"Then, in a job definition a parameter can be used by enclosing its\nname in ",(0,i.kt)("inlineCode",{parentName:"p"},"#{...}"),", e.g.: ",(0,i.kt)("inlineCode",{parentName:"p"},"#{COUNT}"),"."),(0,i.kt)("p",null,"Using parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"COUNT")," example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"jobs": [{\n    "name": "random tests",\n    "steps": [{\n        "tool": "rndtest",\n        "count": "#{COUNT}"\n    }],\n}]\n')),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'"jobs": [{\n    "name": "random tests",\n    "steps": [{\n        "tool": "shell",\n        "cmd": "echo \'the count is #{COUNT}\'"\n    }],\n    ...\n}]\n')),(0,i.kt)("p",null,"More about interpolating variables in string can be found\nin ",(0,i.kt)("a",{parentName:"p",href:"schema-vars"},"Schema Variables chapter"),"."),(0,i.kt)("h2",{id:"configs"},"Configs"),(0,i.kt)("p",null,"Not implemented yet."),(0,i.kt)("h2",{id:"flow-label"},"Flow Label"),(0,i.kt)("p",null,"This field allows for setting a custom label format for flows. It is\ndisplayed instead of flow database ID which is displayed by default."),(0,i.kt)("p",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"flow_label": "demo-#{KK_FLOW_SEQ}",\n')),(0,i.kt)("p",null,"Here a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"KK_FLOW_SEQ")," sequence is used. It mean that each\nnew flow will get its incremented numer, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"demo-2"),". This\nsequence is shared between CI and DEV flows so the label is uniqe for\nboth types of flows."),(0,i.kt)("p",null,"Example 2:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"flow_label": "bld-#{KK_CI_DEV_FLOW_SEQ}",\n')),(0,i.kt)("p",null,"In this case a ",(0,i.kt)("inlineCode",{parentName:"p"},"KK_CI_DEV_FLOW_SEQ")," sequence is used. It means that\nthe sequence is incremented separately for CI and for DEV flows."),(0,i.kt)("p",null,"More about sequences in ",(0,i.kt)("a",{parentName:"p",href:"schema-vars"},"Schema Variables"),"."),(0,i.kt)("h2",{id:"run-label"},"Run Label"),(0,i.kt)("p",null,"This field allows for setting a custom label format for runs. It is\ndisplayed instead of run database ID which is displayed by default."),(0,i.kt)("p",null,"Example 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"run_label": "run.#{KK_CI_DEV_RUN_SEQ}",\n')),(0,i.kt)("p",null,"In this case a ",(0,i.kt)("inlineCode",{parentName:"p"},"KK_CI_DEV_RUN_SEQ")," sequence is used. It means that\nthe sequence is incremented separately for CI and for DEV flows for\nthat run, e.g.: ",(0,i.kt)("inlineCode",{parentName:"p"},"run.42"),"."),(0,i.kt)("p",null,"More about sequences in ",(0,i.kt)("a",{parentName:"p",href:"schema-vars"},"Schema Variables"),"."),(0,i.kt)("h2",{id:"jobs"},"Jobs"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Jobs")," describe what should be done in a ",(0,i.kt)("inlineCode",{parentName:"p"},"stage"),". A ",(0,i.kt)("inlineCode",{parentName:"p"},"stage")," can define\nmultiple ",(0,i.kt)("inlineCode",{parentName:"p"},"jobs")," and they all are run in parallel."),(0,i.kt)("p",null,"There are several setting fields in the job:"),(0,i.kt)("h3",{id:"name"},"Name"),(0,i.kt)("p",null,"A name of the job."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"jobs": [{\n    "name": "build",\n    ...\n}]\n')),(0,i.kt)("h3",{id:"timeout"},"Timeout"),(0,i.kt)("p",null,"An initial timeout of the job. It is expressed in seconds."),(0,i.kt)("p",null,"If there are more than 10 historical succeded jobs then timeout is\nestimated automatically."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"jobs": [{\n    "timeout": 1200,\n    ...\n}]\n')),(0,i.kt)("p",null,"Timeout is set to 1200 seconds, i.e. 20 minutes."),(0,i.kt)("h2",{id:"steps-in-job"},"Steps in Job"),(0,i.kt)("p",null,"The steps' job field defines what an agent should executed. Each step has indicated tool that is directly executing it. Steps are executed in the same order as they are defined."),(0,i.kt)("p",null,"Common step fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tool")," - a tool name that is executing the step; this is required"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cwd")," - a current working directory where the step is executed; default is ",(0,i.kt)("inlineCode",{parentName:"li"},"'.'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout")," - a timeout in seconds that limits time of step execution; it is guareded by an agent; if it is exceeded then the step is arbitrarly terminated; it is optional - default value is 60 seconds"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attempts")," - a number of times the step is retried if if it returns error; default is 1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sleep_time_after_attempt")," - a sleep time between subsequent execution attempts; default is 0")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"jobs": [{\n    "steps": [{\n        "tool": "shell",\n        ...\n    }]\n}]\n')),(0,i.kt)("h2",{id:"built-in-step-tools"},"Built-in Step Tools"),(0,i.kt)("h3",{id:"shell"},"Shell"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"shell")," is a tool that executes provided command in a shell."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cmd")," - a command to execute"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," - this field allows for changing user e.g. to ",(0,i.kt)("inlineCode",{parentName:"li"},"root"),"; by default kraken ",(0,i.kt)("inlineCode",{parentName:"li"},"user")," is used"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"env")," - a dictionary with environment variables and their values"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"background")," - if set to True then a step is run in background; the\nbackground process will be terminated at the end of whole job;\ndefault value is False")),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("h4",{id:"shell-hello-world"},"Shell: Hello World"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "shell",\n    "cmd": "echo \'Hello World\'"\n}]\n')),(0,i.kt)("p",null,"Just say 'Hello World'."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "shell",\n    "cmd": "./run-build.sh",\n    "cwd": "/build",\n    "user": "root",\n    "env": {\n        "ARCH": "arm64"\n        "JOBS": "8"\n    },\n    "timeout": 1200,\n    "attempts": 3,\n    "sleep_time_after_attempt": 10\n}]\n')),(0,i.kt)("p",null,"Run a build script in ",(0,i.kt)("inlineCode",{parentName:"p"},"/build")," folder as ",(0,i.kt)("inlineCode",{parentName:"p"},"root")," user. Pass two\nenvironment variables: ",(0,i.kt)("inlineCode",{parentName:"p"},"ARCH")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"JOBS"),". The step should fit in 1200\nseconds ie. 20 minutes. If the commands returns non zero exit code\nthen it is repeated up to 3 times. There is a 10 seconds sleep time\nperiod between attempts."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "shell",\n    "cmd": "./run-service.sh",\n    "background": True\n}, {\n    "tool": "shell",\n    "cmd": "ps ax"\n}]\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"run-service.sh")," script is run in background and then the next step is\nexecuted. It should show a list of all processes - ",(0,i.kt)("inlineCode",{parentName:"p"},"./run-service.sh"),"\nshould be on the list."),(0,i.kt)("p",null,"More examples can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/shell"},"https://github.com/Kraken-CI/workflow-examples/tree/main/shell"),"."),(0,i.kt)("h3",{id:"git"},"Git"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"git")," is a tool that allows for checking out a Git repository. It clones a\nrepository indicated by an URK in ",(0,i.kt)("inlineCode",{parentName:"p"},"checkout")," field and puts it in\n",(0,i.kt)("inlineCode",{parentName:"p"},"destination")," folder. It also stores Git repository bundle in Kraken\nglobal storage for quiecker subsequent retrieval. If URL is using SSH\nprotocol and ",(0,i.kt)("inlineCode",{parentName:"p"},"ssh-key")," field is set then it is used by ssh-agent for\npassing a key during Git cloning. If ",(0,i.kt)("inlineCode",{parentName:"p"},"access-token")," is provided than\nit is embedded to URL in git clone instruction (see\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.gitlab.com/ee/user/project/deploy_tokens/#git-clone-a-repository"},"GitLab use case"),")."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"checkout")," - an URL to the repository"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"branch")," - a branch to checkout, ",(0,i.kt)("inlineCode",{parentName:"li"},"master")," is default"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"destination")," - a destination folder for the repository; it is optional"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ssh-key")," - a name of a secret that holds SSH username and key for ssh-agent"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"access-token")," - a name of a secret that contains an access token for GitLab or GitHub"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"git_cfg")," - a dictionary with Git config that is passed to -c of the clone command")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "git",\n    "checkout": "https://github.com/Kraken-CI/kraken.git",\n    "branch": "master"\n}]\n')),(0,i.kt)("p",null,"This clones ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Kraken-CI/kraken.git"},"https://github.com/Kraken-CI/kraken.git")," and checks out master branch."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "git",\n    "checkout": "https://github.com/Kraken-CI/kraken.git",\n    "branch": "master",\n    "git_cfg": {\n        "http.proxy": "https://my-proxy.example.com:8080"\n    }\n}]\n')),(0,i.kt)("p",null,"More examples can be found at TODO."),(0,i.kt)("h3",{id:"artifacts"},"Artifacts"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"artifacts")," is a tool that allows for storing and retrieving artifacts in Kraken\nglobal ",(0,i.kt)("a",{parentName:"p",href:"storage"},"storage"),". They can be non public so they are only\navailable internally in Kraken to other stages but only in the same\nflow. If they are public then they are also presented in web UI and\ncan be downloaded by users."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"action")," - an action that artifacts tool should execute: either\n",(0,i.kt)("inlineCode",{parentName:"li"},"download")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"upload"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"upload")," is default action"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"public")," - determines if artifacts should be public and available to\nusers in web UI (",(0,i.kt)("inlineCode",{parentName:"li"},"True"),") or if they should be only accessible\ninternally to other stages but only in the same flow (",(0,i.kt)("inlineCode",{parentName:"li"},"False"),");\ndefault value is ",(0,i.kt)("inlineCode",{parentName:"li"},"False")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source")," - a path or list of paths that should be archived or\nretreived. A path can indicate a folder or a file; a path, in case\nof upload action, can contain globbing signs ",(0,i.kt)("inlineCode",{parentName:"li"},"*")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"**"),"; a path can\nbe relative or absolute"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"destination")," - a path were the artifact(s) should be stored; in\ncase of download action, if the destination folder does not exist\nthen it is created; by default it is ",(0,i.kt)("inlineCode",{parentName:"li"},"'.'")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"report_entry")," - a destination path of one of uploaded HTML files\nthat will be used as a report entry in Kraken Web UI, on a flow\npage and a run page")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "artifacts",\n    "source": "a.txt"\n}]\n')),(0,i.kt)("p",null,"Default action is upload so here an ",(0,i.kt)("inlineCode",{parentName:"p"},"a.txt")," file will be stored in\nglobal storage in root folder which is default."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "artifacts",\n    "action": "download",\n    "source": "a.txt",\n    "destination": \'a/b/c"\n}]\n')),(0,i.kt)("p",null,"Here an ",(0,i.kt)("inlineCode",{parentName:"p"},"a.txt")," file is downloaded from global storage. It is saved to\n",(0,i.kt)("inlineCode",{parentName:"p"},"a/b/c")," folder. If it does not exist then it is created first."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "artifacts",\n    "source": ["index.html", "log.html"],\n    "report_entry": "index.html"\n}]\n')),(0,i.kt)("p",null,"In this example a generated report is uploaded to Kraken's\nstorage. The report consists of two files: index.html and log.html.\n",(0,i.kt)("inlineCode",{parentName:"p"},"report_entry")," fields indicates which files should be used as a report\nentry. The report is available on a flow page and on a run page under\n",(0,i.kt)("inlineCode",{parentName:"p"},"Reports")," tab."),(0,i.kt)("p",null,"More examples can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/artifacts"},"https://github.com/Kraken-CI/workflow-examples/tree/main/artifacts"),"\nand ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/reports"},"https://github.com/Kraken-CI/workflow-examples/tree/main/reports"),"."),(0,i.kt)("h3",{id:"cache"},"Cache"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cache")," is a tool that allows for caching files. It quite often\nhappens that during a build there are some dependencies that are\ndownloaded from an external source over a network. Sometime there is\nlots of content to download or the network link is quite slow so in\neffect downloading this content may take significant amount of time.\nTo speed this process it is possible to cache these files after\ndownloading them. In the following build these files are first\nretrieved from cache and then they are updated only if needed."),(0,i.kt)("p",null,"So cache tool exposes two actions: ",(0,i.kt)("inlineCode",{parentName:"p"},"save")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"restore"),". Cached files\nare stored under indicted key in Kraken global storage. This key can\nbe statically set so the content is always the same. The key can be\nalso set dynamically based on some variables e.g. repository branch or\nCI/DEV flow kind."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"action")," - an action that the tool should perform; it should be either ",(0,i.kt)("inlineCode",{parentName:"li"},"store")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"restore")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," - a key under which files are stored in or restored from cache"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"keys")," - a list of key under which files are restored from cache"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"paths")," - source paths used in ",(0,i.kt)("inlineCode",{parentName:"li"},"store")," action"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expiry")," - not implemented yet")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "cache",\n    "action": "save",\n    "key": "one-key",\n    "paths": [\n         "abc"\n    ]\n}]\n')),(0,i.kt)("p",null,"Store all files from ",(0,i.kt)("inlineCode",{parentName:"p"},"abc")," folder in cache under ",(0,i.kt)("inlineCode",{parentName:"p"},"one-key")," key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "cache",\n    "action": "restore",\n    "keys": ["one-key"]\n}]\n')),(0,i.kt)("p",null,"Restore all files under ",(0,i.kt)("inlineCode",{parentName:"p"},"one-key")," key in cache to ",(0,i.kt)("inlineCode",{parentName:"p"},"abc")," folder (the\ndestination folder was remembered during ",(0,i.kt)("inlineCode",{parentName:"p"},"store")," action)."),(0,i.kt)("p",null,"More examples can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/cache"},"https://github.com/Kraken-CI/workflow-examples/tree/main/cache"),"."),(0,i.kt)("h3",{id:"pylint"},"Pylint"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"pylint")," is a tool that allows for static analysis of Python source\ncode. It wraps around ",(0,i.kt)("a",{parentName:"p",href:"https://www.pylint.org/"},"Pylint"),"."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pylint_exe")," - an alternative path or command to pylint, by default this is ",(0,i.kt)("inlineCode",{parentName:"li"},"pylint")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rcfile")," - a path to pylint rcfile"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"modules_or_packages")," - a path or paths to Python modules or packages that should be checked")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "pylint",\n    "rcfile": "pylint.rc",\n    "modules_or_packages": "agent/kraken/agent"\n}]\n')),(0,i.kt)("p",null,"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"pylint")," on a package located in ",(0,i.kt)("inlineCode",{parentName:"p"},"agent/kraken/agent")," folder using\nrcfile ",(0,i.kt)("inlineCode",{parentName:"p"},"pylint.rc")," from current working directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "pylint",\n    "pylint_exe": "poetry run pylint",\n    "rcfile": "../pylint.rc",\n    "modules_or_packages": "kraken/server",\n    "cwd": "kraken/server"\n}]\n')),(0,i.kt)("p",null,"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"pylint")," but using specific command ie. ",(0,i.kt)("inlineCode",{parentName:"p"},"poetry run pylint")," on a\npackage located in ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken/server")," folder using rcfile from\n",(0,i.kt)("inlineCode",{parentName:"p"},"../pylint.rc")," from indicated working directory ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken/server"),"."),(0,i.kt)("h3",{id:"pytest"},"Pytest"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"pytest")," is a tool that allows for running Python tests. It wraps\naround ",(0,i.kt)("a",{parentName:"p",href:"https://pytest.org/"},"pytest"),". It first collects list of all\navailable test cases based on passed parameters, then executes them\none by one, reporting results after each test case."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pytest_exe")," -an alternative path or command to pytest, by default this is ",(0,i.kt)("inlineCode",{parentName:"li"},"pytest-3")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params")," - parameters passed directly to pytest executable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pythonpath")," - extra paths that are used by Python to look for modules/packages that it wants to load")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "pytest",\n    "cwd": "kraken/agent"\n}]\n')),(0,i.kt)("p",null,"Run pytest in ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken/agent")," folder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "pytest",\n    "pytest_exe": "poetry run pytest",\n    "params": "-vv -m \'not db\'",\n    "cwd": "kraken/server"\n}]\n')),(0,i.kt)("p",null,"Run pytest in ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken/agent")," folder, using specific command ",(0,i.kt)("inlineCode",{parentName:"p"},"poetry\nrun pytest")," and passing to it ",(0,i.kt)("inlineCode",{parentName:"p"},"-vv -m 'not db'")," parameters."),(0,i.kt)("h3",{id:"junit-collect"},"Junit Collect"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"junit_collect")," is a tool that allows for collecting test results\nstored in indicated files in the XML ",(0,i.kt)("a",{parentName:"p",href:"https://junit.org/"},"JUnit"),"\nformat."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_glob")," - a glob pattern for searching test result files")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "junit_collect",\n    "file_glob": "**/test-results/test/*.xml"\n}]\n')),(0,i.kt)("p",null,"More examples can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/real-projects/lucene-solr"},"https://github.com/Kraken-CI/workflow-examples/tree/main/real-projects/lucene-solr"),"."),(0,i.kt)("h3",{id:"go-test"},"Go Test"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gotest")," is a tool that allows for\nrunning ",(0,i.kt)("a",{parentName:"p",href:"https://golang.org/"},"Go language")," tests."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"go_exe")," - an alternative path or command to ",(0,i.kt)("inlineCode",{parentName:"li"},"go")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"params")," - parameters passed directly to ",(0,i.kt)("inlineCode",{parentName:"li"},"go test"))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "gotest",\n    "cwd": "hugo",\n    "params": "-p 1 ./..."\n}]\n')),(0,i.kt)("p",null,"Run Go tests in ",(0,i.kt)("inlineCode",{parentName:"p"},"hugo")," folder with special parameters ",(0,i.kt)("inlineCode",{parentName:"p"},"-p 1 ./..."),"."),(0,i.kt)("p",null,"More examples can be found at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/real-projects/hugo"},"https://github.com/Kraken-CI/workflow-examples/tree/main/real-projects/hugo"),"."),(0,i.kt)("h3",{id:"nglint"},"NgLint"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"nglint")," is a tool that allows for\nrunning ",(0,i.kt)("a",{parentName:"p",href:"https://angular.io/"},"Angular")," ",(0,i.kt)("inlineCode",{parentName:"p"},"ng lint"),", that is performing\nstatic analysis of TypeScript in Angular projects."),(0,i.kt)("p",null,"It does not have specific fields."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "nglint",\n    "cwd": "kraken/ui"\n}]\n')),(0,i.kt)("p",null,"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"ng lint")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken/ui")," where is Angular project located."),(0,i.kt)("h3",{id:"cloc"},"Cloc"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cloc")," is a tool that allows for running counting lines of code. It\nwraps around ",(0,i.kt)("a",{parentName:"p",href:"http://github.com/AlDanial/cloc"},"cloc")," that can analyse\nsource code in multiple programming languages."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"not-match-f")," - the value is passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"--not-match-f=<regex>")," that\nallows for filtering out indicated files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exclude-dir")," - the value is passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"--exclude-dir=<D1>[,D2,]")," that\nallows for excluding indicated list of directories")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"steps": [{\n    "tool": "cloc",\n    "not-match-f": "(package-lock.json|pylint.rc)",\n    "exclude-dir": "docker-elk",\n    "cwd": "kraken"\n}]\n')),(0,i.kt)("p",null,"Run ",(0,i.kt)("inlineCode",{parentName:"p"},"cloc")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken")," folder. Exclude ",(0,i.kt)("inlineCode",{parentName:"p"},"docker-elk")," folder and filter\nout indicated two files."),(0,i.kt)("h3",{id:"rndtest"},"RndTest"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rndtest")," is a tool that allows for generating random test case\nresults. It is used in Kraken to test its testing and reporting\ncapabilities."),(0,i.kt)("p",null,"Fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"count")," - a number of expected test cases")),(0,i.kt)("h3",{id:"custom-tools"},"Custom Tools"),(0,i.kt)("p",null,"Beside Kraken built-in tools, it is possible to use external, your\nown, custom tools. They need to be written as python library with\nspecific metadata and they need to fulfil expected protocol of\nexecution."),(0,i.kt)("p",null,"More about custom tools in ",(0,i.kt)("a",{parentName:"p",href:"tools#custom-tools"},"Tools")," chapter."),(0,i.kt)("h2",{id:"environment-in-job"},"Environment in Job"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"environment")," define the surroundings of a ",(0,i.kt)("inlineCode",{parentName:"p"},"job")," execution. Each ",(0,i.kt)("inlineCode",{parentName:"p"},"job"),"\nhas one or more ",(0,i.kt)("inlineCode",{parentName:"p"},"environment"),"s defined."),(0,i.kt)("p",null,"Environment has the following fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"agents_group")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"executor")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"system")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config")," - not implemented yet")),(0,i.kt)("p",null,"There can be many job instances. For each environment and for each\nsystem in environment there is an instance of the job."),(0,i.kt)("h3",{id:"agents-groups"},"Agents Groups"),(0,i.kt)("p",null,"This is a name of agents group that should be used by scheduler for\nagent selection.  Selected agent from this group will be assigned to\ngiven job and will be used to execute the job. There is a special\nbuilt-in group,",(0,i.kt)("inlineCode",{parentName:"p"},"'all'"),", that gathers all agents."),(0,i.kt)("h3",{id:"executors"},"Executors"),(0,i.kt)("p",null,"This is an executor type that agent will use to execute a job. It\ncan be one of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'local'")," - an egent is executing a job directly on current host\nsystem where agent is also running"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'docker'")," - an agent is executing a job inside of dedicated, just\nspawned Docker container; after the execution the container is\nkilled and removed"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"'lxd'")," - an agent is executing a job inside of dedicated, just\nspawned LXD container; after the execution the container is\nstopped and removed")),(0,i.kt)("p",null,"Default is ",(0,i.kt)("inlineCode",{parentName:"p"},"'local'"),"."),(0,i.kt)("h3",{id:"systems"},"Systems"),(0,i.kt)("p",null,"This field can hold an operating system name or list of such names\nthat are used for job execution. If this is a list then the number of\njob instances is multiplied by numer of systems - each instance has\nits system."),(0,i.kt)("p",null,"There is a special system name, ",(0,i.kt)("inlineCode",{parentName:"p"},"'any'"),", that in case of ",(0,i.kt)("inlineCode",{parentName:"p"},"'local'"),"\nexecutor ignores system selection by jobs scheduler. In other executor\ntypes ",(0,i.kt)("inlineCode",{parentName:"p"},"'any'")," has no special meaning."),(0,i.kt)("p",null,"The system name has different meaning depending on executor type."),(0,i.kt)("p",null,"In case of ",(0,i.kt)("inlineCode",{parentName:"p"},"'local'")," executor the system name must match with the system\nreported by agent wher it is running."),(0,i.kt)("p",null,"In case of ",(0,i.kt)("inlineCode",{parentName:"p"},"'docker'")," executor the system name is a name of Docker\nimage from ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/"},"Docker Hub")," or other Docker\nregistry. Example name: ",(0,i.kt)("inlineCode",{parentName:"p"},"'ubuntu:20.04'"),". There are also Docker images\nspecially crafted for Kraken. The are hosted on Docker Hub:\n",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/u/krakenci"},"https://hub.docker.com/u/krakenci"),". Example: ",(0,i.kt)("inlineCode",{parentName:"p"},"'krakenci/ubuntu:20.04'"),".\nMore about Docker executor in ",(0,i.kt)("a",{parentName:"p",href:"docker-executor"},"Docker Executor chapter"),"."),(0,i.kt)("p",null,"In case of ",(0,i.kt)("inlineCode",{parentName:"p"},"'lxd'")," executor the system name is a name of LXD image\nfrom ",(0,i.kt)("a",{parentName:"p",href:"https://images.linuxcontainers.org/"},"https://images.linuxcontainers.org/"),". Example name:\n",(0,i.kt)("inlineCode",{parentName:"p"},"'ubuntu/focal/amd64'"),". To get list of all available LXD container\nnames run ",(0,i.kt)("inlineCode",{parentName:"p"},"lxc image list images:")," command. More about LXD executor\nin ",(0,i.kt)("a",{parentName:"p",href:"lxd-executor"},"LXD Executor chapter"),"."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"environments": [{\n    "agents_group": "all",\n    "system": "any",\n    "config": "default"\n}]\n')),(0,i.kt)("p",null,"Pick any agent and use its local host system for job execution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"environments": [{\n    "agents_group": "fast",\n    "system": "ubuntu-18.04",\n    "config": "default"\n}]\n')),(0,i.kt)("p",null,"Pick an agent from ",(0,i.kt)("inlineCode",{parentName:"p"},"'fast'")," group that runs on ",(0,i.kt)("inlineCode",{parentName:"p"},"'ubuntu-18.04'"),"\noperating system."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"environments": [{\n    "agents_group": "all",\n    "executor": "docker",\n    "system": ["maven:3.6.3-jdk-11",\n               "fedora:32",\n               "centos:8",\n               "debian:buster",\n               "debian:bullseye",\n               "ubuntu:18.04",\n               "ubuntu:20.04",\n               "krakenci/bld-kraken",\n               "krakenci/ubuntu:20.04",\n               "krakenci/python:3.8",\n               "krakenci/maven:3.6.3-jdk-11"],\n    "config": "default"\n}]\n')),(0,i.kt)("p",null,"Create multiple jobs for each indicated system. For each job pick an\nagent from ",(0,i.kt)("inlineCode",{parentName:"p"},"'all'")," group and execute the job in spawned Docker\ncontainer with indicated system image."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"environments": [{\n    "agents_group": "lxd",\n    "executor": "lxd",\n    "system": "centos/8/amd64",\n    "config": "default"\n}]\n')),(0,i.kt)("p",null,"Pick an agent form ",(0,i.kt)("inlineCode",{parentName:"p"},"'lxd'")," group and execute the job in spawned LXD\ncontainer with ",(0,i.kt)("inlineCode",{parentName:"p"},"'centos/8/amd64'")," system image."),(0,i.kt)("p",null,"More examples can be found at:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/systems-many-docker"},"https://github.com/Kraken-CI/workflow-examples/tree/main/systems-many-docker")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/systems-many-lxd"},"https://github.com/Kraken-CI/workflow-examples/tree/main/systems-many-lxd")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Kraken-CI/workflow-examples/tree/main/systems-mixed"},"https://github.com/Kraken-CI/workflow-examples/tree/main/systems-mixed"))),(0,i.kt)("p",null,"More about agents, agent's groups and agent's management can be found in ",(0,i.kt)("a",{parentName:"p",href:"agents"},"Agents chapter"),"."),(0,i.kt)("h2",{id:"notification"},"Notification"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"notification")," allows for configuring a notification means that are\nused to pass an information about stage's run result. There are\nseveral communication methods supported:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"email")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"slack")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"github"))),(0,i.kt)("h3",{id:"email"},"Email"),(0,i.kt)("p",null,"It sends notifications to indicated email address. This requires\nsetting global configuration of SMTP server. This can be found in\n",(0,i.kt)("inlineCode",{parentName:"p"},"Settings")," menu at the top, in ",(0,i.kt)("inlineCode",{parentName:"p"},"Notifications")," tab."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"notification": {\n    "email": "godfryd@gmail.com"\n}\n')),(0,i.kt)("h3",{id:"slack"},"Slack"),(0,i.kt)("p",null,"It sends notifications to indicated channel on Slack. This requires\nsetting global configuration of an access token to Slack service. This\ncan be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"Settings")," menu at the top, in ",(0,i.kt)("inlineCode",{parentName:"p"},"Notifications")," tab."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"notification": {\n    "slack": {"channel": "kk-results"}\n}\n')),(0,i.kt)("h3",{id:"github"},"GitHub"),(0,i.kt)("p",null,"It sends notifications of stages that were triggered by a GitHub pull\nrequest. It sets results status on PR page on GitHub. This requires\nsetting a configuration on a project page in ",(0,i.kt)("inlineCode",{parentName:"p"},"Web Hooks")," tab. There\nshould be enabled GitHub section and then copied the values or URL and\nsecret and pasted on GitHub project page, in Settings tab, Webhooks\nsubtab."),(0,i.kt)("p",null,"GitHub notification section requires setting one field, ",(0,i.kt)("inlineCode",{parentName:"p"},"credentials"),".\nThe credentials are in form ",(0,i.kt)("inlineCode",{parentName:"p"},"<user>:<password>")," e.g.: ",(0,i.kt)("inlineCode",{parentName:"p"},"john:1q2w3e4r"),".\nTo make it safe credentials should be stored and taken from project's\nsecrets. More about secrets in ",(0,i.kt)("a",{parentName:"p",href:"secrets"},"Secrets chapter"),". GitHub\ncredentials can be prepared on your account developer settings page in\nGitHub (",(0,i.kt)("a",{parentName:"p",href:"https://github.com/settings/tokens"},"https://github.com/settings/tokens"),"), in Personal access token\nsubtab."),(0,i.kt)("p",null,"More about GitHub integration can be found in ",(0,i.kt)("a",{parentName:"p",href:"webhooks"},"Webhooks chapter"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"notification": {\n    "github": {"credentials": "#{KK_SECRET_SIMPLE_gh_status_creds}"}\n}\n')),(0,i.kt)("p",null,"It is also possible to enable all notification means together:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'"notification": {\n    "slack": {"channel": "kk-results"},\n    "email": "godfryd@gmail.com",\n    "github": {"credentials": "#{KK_SECRET_SIMPLE_gh_status_creds}"}\n}\n')))}c.isMDXComponent=!0}}]);