"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[1919],{4137:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),k=c(t),u=r,h=k["".concat(l,".").concat(u)]||k[u]||d[u]||o;return t?a.createElement(h,i(i({ref:n},p),{},{components:t})):a.createElement(h,i({ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=k;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},8742:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.img;return a.createElement("a",{href:"/img/"+n,target:"blank"},a.createElement("img",{src:"/img/"+n,style:{boxShadow:"0 10px 10px 5px #777",marginBottom:"30px"}}))}},6885:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return k}});var a=t(3117),r=t(102),o=(t(7294),t(4137)),i=t(8742),s=["components"],l={id:"agents",title:"Agents"},c=void 0,p={unversionedId:"agents",id:"agents",title:"Agents",description:"Agent is a part of Kraken system. The place of agents in Kraken is",source:"@site/docs/agents.mdx",sourceDirName:".",slug:"/agents",permalink:"/docs/agents",draft:!1,editUrl:"https://github.com/kraken-ci/website/edit/master/docs/agents.mdx",tags:[],version:"current",frontMatter:{id:"agents",title:"Agents"},sidebar:"someSidebar",previous:{title:"RobotFramework",permalink:"/docs/tf-robotframework"},next:{title:"Global Storage",permalink:"/docs/storage"}},d={},k=[{value:"Browsing Agents",id:"browsing-agents",level:2},{value:"Agents Groups",id:"agents-groups",level:2},{value:"Discovered Agents",id:"discovered-agents",level:2},{value:"Setting up a New Agent",id:"setting-up-a-new-agent",level:2},{value:"Network Connections",id:"network-connections",level:3},{value:"Installing by a Script",id:"installing-by-a-script",level:3},{value:"Starting in Docker Container",id:"starting-in-docker-container",level:3}],u={toc:k};function h(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Agent is a part of Kraken system. The place of agents in Kraken is\nvisualized in ",(0,o.kt)("a",{parentName:"p",href:"/docs/architecture"},"Architecture chapter"),"."),(0,o.kt)("p",null,"Agent is a piece of software that is installed on separate system.\nIt connects to Kraken server, gets jobs to execution and executes\nthem. A job can be executed in several ways. It depends on selected\nexecutor indicated in job definition. A job may be executed:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"locally on current host system,"),(0,o.kt)("li",{parentName:"ul"},"inside Docker container,"),(0,o.kt)("li",{parentName:"ul"},"inside LXD container.")),(0,o.kt)("h2",{id:"browsing-agents"},"Browsing Agents"),(0,o.kt)("p",null,"In the top bar of UI, on right side, there is an ",(0,o.kt)("inlineCode",{parentName:"p"},"Agents")," menu.\nIt can be used to find and manage agents."),(0,o.kt)("p",null,"The first position, ",(0,o.kt)("inlineCode",{parentName:"p"},"Agents")," allows for browsing active agents that can\nexecute jobs. The table of agents shows their address, current system\nwhere they are running, if they are running on bare-metal host or in\nDocker container, what capabilities host system has, currently running\njob, etc."),(0,o.kt)(i.Z,{img:"screen-agents.png",mdxType:"Screen"}),(0,o.kt)("p",null,"Clicking the agent address leads to agent page which shows Agent\ndetails. Here, it is also possible to assign an agent to ",(0,o.kt)("inlineCode",{parentName:"p"},"Agents\nGroups"),". These groups are used in job definitions in workflow schema\nto indicate from which group an agent should be selected to execute\nindicated job."),(0,o.kt)("h2",{id:"agents-groups"},"Agents Groups"),(0,o.kt)("p",null,"The next menu position, ",(0,o.kt)("inlineCode",{parentName:"p"},"Groups"),", allows for gathering agents\ninto groups. Grouping can be arbitrary and manually managed by\nadministrator. It can be by hardware features, host system\ncapabilities, etc."),(0,o.kt)("h2",{id:"discovered-agents"},"Discovered Agents"),(0,o.kt)("p",null,"The last menu position, ",(0,o.kt)("inlineCode",{parentName:"p"},"Discovered"),", shows list of agents that tried\nto connect to the Kraken server but are not authorized to do so. Here\nwe can find newly setup agent and athorize it. From that moment it can\nexecute jobs but first it is good to assign this new agent to proper\ngroups."),(0,o.kt)("h2",{id:"setting-up-a-new-agent"},"Setting up a New Agent"),(0,o.kt)("p",null,"There are several methods for setting up a new Kraken Agent. It can\nbe installed on a host system using a installation script. It can be\nstarted as a Docker container. It is also possible to copy agent\nbinaries and setup it manually."),(0,o.kt)("h3",{id:"network-connections"},"Network Connections"),(0,o.kt)("p",null,"While setting up a new agent, network connections need to be\nconsidered.  Kraken Agent needs to have connections to several\nservices. They are presented\nin ",(0,o.kt)("a",{parentName:"p",href:"/docs/architecture"},"Architecture chapter"),". The required services are:\n",(0,o.kt)("inlineCode",{parentName:"p"},"Kraken Server"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"MinIO")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ClickHouse"),"."),(0,o.kt)("p",null,"The address of the server must be passed to agent binary using ",(0,o.kt)("inlineCode",{parentName:"p"},"-s"),"\nswitch. This is handled by install script or is already backed into\nDocker image with Kraken Agent."),(0,o.kt)("p",null,"In that moment the address of MinIO and ClickHouse should be acquired\nfrom the server. Unfortunatelly if Kraken Server is started by docker\ncompose then the addresses of these services are internal ie. from a\nsubnet that was created by docker compose. The services are published\nto the host using defined ports in the docker compose yaml\nconfiguration file. So when the Kraken Agent is started externally\nthen the addresses to MinIO and ClickHouse needs to be provided. This\ncan be done by defining environemnt variables:\n",(0,o.kt)("inlineCode",{parentName:"p"},"KRAKEN_CLICKHOUSE_ADDR")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"KRAKEN_MINIO_ADDR"),". More details about\nsetting them is provided in the next sections."),(0,o.kt)("h3",{id:"installing-by-a-script"},"Installing by a Script"),(0,o.kt)("p",null,"This method relies on an install script that is hosted on Kraken server."),(0,o.kt)("p",null,"Make sure that in Kraken Web UI, on Kraken -> Settings page there is\nURL to Kraken Server set (copy and paste URL from web browser to this\nfield)."),(0,o.kt)("p",null,"So now a new Agent can be installed. It involves downloading an agent\ninstaller and running it. That's all."),(0,o.kt)("p",null,"Agent Install steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Download Kraken agent installer:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ wget http://<kraken-server-address>/install/kraken-agent-install.sh\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Execute installer:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ chmod a+x kraken-agent-install.sh\n$ ./kraken-agent-install.sh\n")),(0,o.kt)("p",null,"This will download the latest agent from Kraken server and install it\nas a SystemD service on the host. Agent's files are installed into\n",(0,o.kt)("inlineCode",{parentName:"p"},"/opt/kraken")," directory. The state of the service can be checked using\n",(0,o.kt)("inlineCode",{parentName:"p"},"systemctl"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ sudo systemctl status kraken-agent\n\u25cf kraken-agent.service - Kraken Agent\n   Loaded: loaded (/lib/systemd/system/kraken-agent.service; enabled; vendor preset: enabled)\n   Active: active (running) since Thu 2021-03-11 17:09:16 UTC; 1 weeks 0 days ago\n Main PID: 699 (python3)\n    Tasks: 1 (limit: 6998)\n   Memory: 14.5M\n   CGroup: /system.slice/kraken-agent.service\n           \u2514\u2500699 python3 /opt/kraken/kkagent -s http://localhost:6000/ -d /opt/kraken/data run\n")),(0,o.kt)("p",null,"The Kraken Agent service is running but it may not see ",(0,o.kt)("inlineCode",{parentName:"p"},"MinIO")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"ClickHouse")," services. This can be configured in\n",(0,o.kt)("inlineCode",{parentName:"p"},"/opt/kraken/kraken.env")," file."),(0,o.kt)("p",null,"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"KRAKEN_CLICKHOUSE_ADDR")," to the host where ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-proxy")," is\nrunning and add its listening port. If Kraken Server is started by\ndocker compose then use the address of the host. The port to\n",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse-proxy")," should be taken from .env file or from docker\ncompose yaml file. Example:\n",(0,o.kt)("inlineCode",{parentName:"p"},"KRAKEN_CLICKHOUSE_ADDR=192.168.0.12:9001"),"."),(0,o.kt)("p",null,"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"KRAKEN_MINIO_ADDR")," to the host where ",(0,o.kt)("inlineCode",{parentName:"p"},"minio")," is running and add\nits listening port. If Kraken Server is started by docker compose then\nuse the address of the host. The port to ",(0,o.kt)("inlineCode",{parentName:"p"},"minio")," should be\ntaken from .env file or from docker compose yaml file. Example:\n",(0,o.kt)("inlineCode",{parentName:"p"},"KRAKEN_MINIO_ADDR=192.168.0.12:9999"),"."),(0,o.kt)("p",null,"If Kraken Server was started by docker compose then the ports of these\nservices can be determined using ",(0,o.kt)("inlineCode",{parentName:"p"},"docker ps"),". Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker ps | grep 'chproxy\\|minio'\nc17deb0b8fb7   127.0.0.1:5000/kkchproxy:kk_ver           ....  0.0.0.0:9001->9001/udp            kraken_clickhouse-proxy_1\nb3e7c3aeeeb3   minio/minio:RELEASE.2020-12-18T03-27-42Z  ....  9000/tcp, 0.0.0.0:9999->9999/tcp  kraken_minio_1\n")),(0,o.kt)("p",null,"where we can see that ",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse proxy")," is exposed on 9001 port and\n",(0,o.kt)("inlineCode",{parentName:"p"},"minio")," on 9999."),(0,o.kt)("p",null,"Now the new agent can be authorized in Kraken server. On Discovered\nagents page there should be visible an IP address of the host with the\nnew agent. Select checkbox and click ",(0,o.kt)("inlineCode",{parentName:"p"},"Authorize")," button. And then add\nthe agent to proper agent's group. Now the new agent will be getting\njobs for execution."),(0,o.kt)("h3",{id:"starting-in-docker-container"},"Starting in Docker Container"),(0,o.kt)("p",null,"In this case Kraken Agent is packed into Docker image and can be\nstarted as Docker container."),(0,o.kt)("p",null,"The command to start a container is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"$ docker run -e KRAKEN_SERVER_ADDR=<host-addr>:6363 \\\n             -e KRAKEN_CLICKHOUSE_ADDR=<host-addr>:9001 \\\n             -e KRAKEN_MINIO_ADDR=<host-addr>:9999 \\\n             --rm \\\n             eu.gcr.io/kraken-261806/kkagent:<version>\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"<host-addr>")," is a host address where given service is running.\nIf Kraken Server was started by ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose")," then the\n",(0,o.kt)("inlineCode",{parentName:"p"},"<host-addr>")," is an address of the host where docker-compose has been\nstarted. The ports above are default ports if the ports where changed\ne.g. in docker compose .env file then the same ones should be used\nhere."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"eu.gcr.io/kraken-261806/kkagent:<version>")," is a location of Docker\nimage with Kraken Agent. The ",(0,o.kt)("inlineCode",{parentName:"p"},"<version>")," identifies particular Kraken\nversion. The latest Kraken ",(0,o.kt)("inlineCode",{parentName:"p"},"<version>")," can be found on a Kraken's\nreleases page in GitHub: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Kraken-CI/kraken/releases"},"https://github.com/Kraken-CI/kraken/releases"),".\nExample image URL: ",(0,o.kt)("inlineCode",{parentName:"p"},"eu.gcr.io/kraken-261806/kkagent:0.406"),".  Notice\nthat the version in the image URL does not have ",(0,o.kt)("inlineCode",{parentName:"p"},"v")," prefix as on\nGitHub page (v0.406)."))}h.isMDXComponent=!0}}]);