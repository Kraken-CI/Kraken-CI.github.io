(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[5927],{4137:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=i,k=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(k,o(o({ref:t},u),{},{components:r})):n.createElement(k,o({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},544:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var n=r(2122),i=r(9756),a=(r(7294),r(4137)),o=["components"],l={id:"architecture",title:"Architecture"},c=void 0,s={unversionedId:"architecture",id:"architecture",isDocsHomePage:!1,title:"Architecture",description:"Kraken Architecture",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/docs/architecture",editUrl:"https://github.com/kraken-ci/website/edit/master/docs/architecture.md",version:"current",frontMatter:{id:"architecture",title:"Architecture"},sidebar:"someSidebar",previous:{title:"Entities & Terminology",permalink:"/docs/entities"},next:{title:"Projects and Branches",permalink:"/docs/proj-branches"}},u=[{value:"Server",id:"server",children:[]},{value:"UI",id:"ui",children:[]},{value:"Controller",id:"controller",children:[]},{value:"Celery",id:"celery",children:[]},{value:"ClickHouse &amp; its Proxy",id:"clickhouse--its-proxy",children:[]},{value:"MinIO",id:"minio",children:[]},{value:"Agent",id:"agent",children:[]}],p={toc:u};function d(e){var t=e.components,l=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Kraken Architecture",src:r(444).Z})),(0,a.kt)("h2",{id:"server"},"Server"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Server")," exposes Kraken ReST API"),(0,a.kt)("h2",{id:"ui"},"UI"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"UI")," is an Angular application that can be served by NGINX. Unicorn can be used to maintain ",(0,a.kt)("inlineCode",{parentName:"p"},"Server")," instances."),(0,a.kt)("h2",{id:"controller"},"Controller"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Controller")," is made of 4 services:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Planner")," - it triggers new flows based on indicated rule in given project's branch"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Scheduler")," - it assigns jobs to agents"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Watchdog")," - it checks runs and their jobs if they are in their time limits, it also monitors agents and their machines health")),(0,a.kt)("h2",{id:"celery"},"Celery"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Celery")," executes background tasks like processing results reported by\nan agent. Any service in ",(0,a.kt)("inlineCode",{parentName:"p"},"Controller")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Celery")," tasks can enqueue\nnew ",(0,a.kt)("inlineCode",{parentName:"p"},"Celery")," tasks. Current tasks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"analyze_results_history"),(0,a.kt)("li",{parentName:"ul"},"notify_about_completed_run"),(0,a.kt)("li",{parentName:"ul"},"trigger_stages"),(0,a.kt)("li",{parentName:"ul"},"job_completed"),(0,a.kt)("li",{parentName:"ul"},"trigger_run"),(0,a.kt)("li",{parentName:"ul"},"trigger_flow")),(0,a.kt)("h2",{id:"clickhouse--its-proxy"},"ClickHouse & its Proxy"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ClickHouse")," is a database that is used for storing logs from all\nKraken services and from all agents, ",(0,a.kt)("inlineCode",{parentName:"p"},"ClickHouse Proxy")," is used to\ncollect logs, aggregate them and send in batches to ",(0,a.kt)("inlineCode",{parentName:"p"},"ClickHouse"),"\ndatabase."),(0,a.kt)("h2",{id:"minio"},"MinIO"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MinIO")," is an object storage database. It is used in Kraken to store\nartifact that are created during jobs execution, to store cache files\nand to store Git repository bundles."),(0,a.kt)("h2",{id:"agent"},"Agent"),(0,a.kt)("p",null,"Agent is a service that is run on a machine that is expected to\nexecute jobs. Agent can execute jobs directly on the system (locally),\nor it can encapulate them in e.g. container. Currently there are\nexecutors for:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"local"),(0,a.kt)("li",{parentName:"ul"},"Docker"),(0,a.kt)("li",{parentName:"ul"},"LXD")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"pathname:///arch-ppt/index.html"},"Presentation about Kraken Architecture")))}d.isMDXComponent=!0},444:function(e,t,r){"use strict";t.Z=r.p+"assets/images/arch-overview-0d7cba28a51901f3cf6be2e94e4ce339.svg"}}]);