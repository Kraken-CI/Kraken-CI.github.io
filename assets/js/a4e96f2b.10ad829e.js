"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[704],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),k=c(n),m=a,d=k["".concat(o,".").concat(m)]||k[m]||p[m]||i;return n?r.createElement(d,s(s({ref:t},u),{},{components:n})):r.createElement(d,s({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=k;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},498:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var r=n(3117),a=n(102),i=(n(7294),n(4137)),s=["components"],l={id:"install-helm",title:"Helm and Kubernetes"},o=void 0,c={unversionedId:"install-helm",id:"install-helm",title:"Helm and Kubernetes",description:"It is possible to install Kraken in Kubernetes",source:"@site/docs/install-helm.mdx",sourceDirName:".",slug:"/install-helm",permalink:"/docs/install-helm",draft:!1,editUrl:"https://github.com/kraken-ci/website/edit/master/docs/install-helm.mdx",tags:[],version:"current",frontMatter:{id:"install-helm",title:"Helm and Kubernetes"},sidebar:"someSidebar",previous:{title:"Docker Compose",permalink:"/docs/install-docker-compose"},next:{title:"Manual Installation",permalink:"/docs/install-manual"}},u={},p=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Kubernetes Clusters",id:"kubernetes-clusters",level:2},{value:"Install in Minikube",id:"install-in-minikube",level:2}],k={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It is possible to install Kraken in ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io"},"Kubernetes"),"\nusing ",(0,i.kt)("a",{parentName:"p",href:"https://helm.sh"},"Helm Chart"),"."),(0,i.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,i.kt)("p",null,"Several things are required to install Kraken using Helm.\nIn short:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Kubernetes cluster and kubectl tool"),(0,i.kt)("li",{parentName:"ul"},"Helm tool")),(0,i.kt)("p",null,"Helm is used to deploy several Kraken services and expose them to an external network.\nThese Kraken services are described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/architecture"},"Architecture chapter"),"."),(0,i.kt)("h2",{id:"kubernetes-clusters"},"Kubernetes Clusters"),(0,i.kt)("p",null,"There are multiple ways for setting up a Kubernetes cluster. One of the easiest ones,\nthat is most often used for experimenting is Minikube. There are also managed\nclusters like EKS (Elastic Kubernetes Service) in AWS."),(0,i.kt)("p",null,"This manual will show how to install Kraken CI in Minikube but the\nsteps are similar for other Kubernetes environments as well."),(0,i.kt)("h2",{id:"install-in-minikube"},"Install in Minikube"),(0,i.kt)("p",null,"First, download minikube from ",(0,i.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/"},"https://minikube.sigs.k8s.io/docs/"),"."),(0,i.kt)("p",null,"And then create a cluster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ minikube start\n")),(0,i.kt)("p",null,"Now you may install Kraken CI but first, lets add a repo with Kraken Helm charts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ helm repo add kraken-ci https://kraken.ci/helm-repo/charts\n$ helm repo update\n")),(0,i.kt)("p",null,"and now install Kraken CI:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ helm upgrade --install --create-namespace --namespace kraken \\\n  --debug --wait \\\n  --set access.method='external-ips' --set access.external_ips={`minikube ip`} \\\n  kraken-ci kraken-ci/kraken-ci\n")),(0,i.kt)("p",null,"This command actually upgrades Kraken CI if it is already installed\nbut if it was not yet installed, then it installs it (this is\n",(0,i.kt)("inlineCode",{parentName:"p"},"--install")," switch)."),(0,i.kt)("p",null,"The switches ",(0,i.kt)("inlineCode",{parentName:"p"},"--create-namespace")," ",(0,i.kt)("inlineCode",{parentName:"p"},"--namespace kraken")," are installing\nKraken CI into ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken")," namespace. If the namespace does not exist,\nthen it is created."),(0,i.kt)("p",null,"This command waits until all Kraken services are started correctly\n(",(0,i.kt)("inlineCode",{parentName:"p"},"--wait")," switch). The ",(0,i.kt)("inlineCode",{parentName:"p"},"--debug")," switch makes the output much more\nverbose."),(0,i.kt)("p",null,"The two ",(0,i.kt)("inlineCode",{parentName:"p"},"--set")," switches set Kraken's chart configuration. Whole\nthe config can be present using the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"$ helm show values kraken-ci/kraken-ci\n")),(0,i.kt)("p",null,"In the upgrade command, there are set two fields:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"access.method")," which indicate what method should be used to expose\nKraken services in Kubernetes; there are available the following\noptions: ",(0,i.kt)("inlineCode",{parentName:"li"},"external-ips"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"node-port"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"load-balancer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"access.external_ips")," which indicate what external IP should be used\nto access Kraken services; in the case above, an IP address of\nminikube is used (the curly brackets ",(0,i.kt)("inlineCode",{parentName:"li"},"{..}")," are necessary because\n",(0,i.kt)("inlineCode",{parentName:"li"},"access.external_ips")," requires an array as an argument)")),(0,i.kt)("p",null,"And then, there are two arguments at the end of the upgrade\ncommand. The first one is ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken-ci")," and this is the installation\nname of the chart - you can pick any name here. The second argument is\nthe name of Kraken's Helm repository that was added above and the name\nof the chart in this repository: ",(0,i.kt)("inlineCode",{parentName:"p"},"kraken-ci/kraken-ci"),"."),(0,i.kt)("p",null,"When everything completes successfully, then at the end of the whole\noutput there should be presented short instruction about getting\nthe URL of Kraken service like that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'NOTES:\nGet the application URL by running these commands:\n  export NODE_PORT=$(kubectl get --namespace kk-1 -o jsonpath="{.spec.ports[0].port}" services ui)\n  export NODE_IP=$(kubectl get nodes --namespace kk-1 -o jsonpath="{.items[0].status.addresses[0].address}")\n  echo http://$NODE_IP:$NODE_PORT\n')),(0,i.kt)("p",null,"Now you may check if Kraken is working by visiting the URL\ngiven by this code and by checking if Kubernetes is running Kraken's\nservices with this command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"kubectl get all -n kraken\n")),(0,i.kt)("p",null,"This will show Kraken's pods, services, deployments and replica sets."))}m.isMDXComponent=!0}}]);