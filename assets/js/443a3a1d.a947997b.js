"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[7536],{7694:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var s=r(4848),i=r(8453);const c={id:"dev-guide",title:"Development Guide"},t=void 0,l={id:"dev-guide",title:"Development Guide",description:"Development Depencies",source:"@site/docs/dev-guide.md",sourceDirName:".",slug:"/dev-guide",permalink:"/docs/dev-guide",draft:!1,unlisted:!1,editUrl:"https://github.com/kraken-ci/website/edit/master/docs/dev-guide.md",tags:[],version:"current",frontMatter:{id:"dev-guide",title:"Development Guide"},sidebar:"someSidebar",previous:{title:"Contributing to Kraken",permalink:"/docs/contrib-kraken"},next:{title:"Contributing to Documentation",permalink:"/docs/contrib-docs"}},o={},d=[{value:"Development Depencies",id:"development-depencies",level:2},{value:"Ubuntu 20.04",id:"ubuntu-2004",level:3},{value:"Download Sources",id:"download-sources",level:2},{value:"Start in Docker Compose",id:"start-in-docker-compose",level:2},{value:"Start Services Individually",id:"start-services-individually",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"development-depencies",children:"Development Depencies"}),"\n",(0,s.jsx)(n.h3,{id:"ubuntu-2004",children:"Ubuntu 20.04"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"git"}),"\n",(0,s.jsx)(n.li,{children:"rake"}),"\n",(0,s.jsx)(n.li,{children:"python3-venv"}),"\n",(0,s.jsx)(n.li,{children:"python3-pip"}),"\n",(0,s.jsx)(n.li,{children:"openjdk-11-jre-headless or newer -- required for swagger-codegen"}),"\n",(0,s.jsx)(n.li,{children:"docker.io"}),"\n",(0,s.jsx)(n.li,{children:"docker-compose"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"$ sudo apt update\n$ sudo apt install git rake python3-venv python3-pip openjdk-11-jre-headless \\\n   docker.io docker-compose\n"})}),"\n",(0,s.jsx)(n.h2,{id:"download-sources",children:"Download Sources"}),"\n",(0,s.jsxs)(n.p,{children:["Sources are stored in Git repository on GitHub: ",(0,s.jsx)(n.a,{href:"https://github.com/Kraken-CI/kraken",children:"https://github.com/Kraken-CI/kraken"}),".\nFirst start with forking the repository and then cloning your own copy of it."]}),"\n",(0,s.jsx)(n.p,{children:"To clone repository via HTTPS do:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"$ git clone https://github.com/<username>/kraken\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"or using SSH:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"$ git clone git@github.com:<username>/kraken.git\n"})}),"\n",(0,s.jsx)(n.h2,{id:"start-in-docker-compose",children:"Start in Docker Compose"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"$ cd kraken\n$ rake docker_up\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command is using docker-compose.yaml file from the repository.\nThis file defines all the services and how to build them.\nSo this command builds all services and then spins up their containers."}),"\n",(0,s.jsxs)(n.p,{children:["Now Kraken service is avaiable from ",(0,s.jsx)(n.a,{href:"http://localhost:8080",children:"http://localhost:8080"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["All containers can be stopped by ",(0,s.jsx)(n.code,{children:"Ctrl-C"}),". You may use this method for\ndevelopment. Prepare changes, then ",(0,s.jsx)(n.code,{children:"rake docker_up"}),", check changes\nif all is ok and then stop all with ",(0,s.jsx)(n.code,{children:"Ctrl-C"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This method is not that convenient for quick development. Building\nand starting all services from scratch takes several minutes.\nThere is a better method"}),"\n",(0,s.jsx)(n.h2,{id:"start-services-individually",children:"Start Services Individually"}),"\n",(0,s.jsx)(n.p,{children:"Each Kraken service can be run individually. There is a bunch of Rake\ntasks for that:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake serve_ui"})," - start Kraken Angular app"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_server"})," - start Kraken web server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_scheduler"})," - start Kraken scheduler service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_planner"})," - start Kraken planner service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_watchdog"})," - start Kraken watchdog service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_rq"})," - start RQ with Kraken background tasks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_qneck"})," - start Queue Neck service for filtering background tasks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_agent"})," - start Kraken Agent service localy"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_agent_in_docker"})," - start Kraken Agent service inside Docker container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_agent_in_lxd"})," - start Kraken Agent service inside LXD container"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_ch"})," - start ClickHouse and ClickHouse-proxy services"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_minio"})," - run MinIO service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_redis"})," - run Redis service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rake run_pgsql"})," - run PostgreSQL service"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This way all needed services can be started and then developed and restarted individually."}),"\n",(0,s.jsxs)(n.p,{children:["To avoid running all of them manually, there is a script for ",(0,s.jsx)(n.code,{children:"Tmux"})," terminal that\nopens separate window for each service. So first start ",(0,s.jsx)(n.code,{children:"tmux"})," and then\nload Kraken script inside ",(0,s.jsx)(n.code,{children:"tmux"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["run ",(0,s.jsx)(n.code,{children:"tmux"})]}),"\n",(0,s.jsxs)(n.li,{children:["press ",(0,s.jsx)(n.code,{children:"ctrl-b + :"})," -- to open tmux prompt"]}),"\n",(0,s.jsxs)(n.li,{children:["type ",(0,s.jsx)(n.code,{children:"source-file kraken.tmux"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"or directly in command line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"$ tmux new-session \\; source-file kraken.tmux`\n"})}),"\n",(0,s.jsx)(n.p,{children:"or using a script in the repo:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:"$ ./start-tmux.sh`\n"})}),"\n",(0,s.jsx)(n.p,{children:"The effect should look as follows:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Kraken in Tmux",src:r(5273).A+"",width:"1920",height:"1049"})}),"\n",(0,s.jsxs)(n.p,{children:["Now we can connect directly to Kraken Angular application. It is available\non ",(0,s.jsx)(n.a,{href:"http://localhost:4200",children:"http://localhost:4200"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},5273:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/tmux-54d21ea69b4d24f9aa54ec0b207577c1.png"},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(6540);const i={},c=s.createContext(i);function t(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);