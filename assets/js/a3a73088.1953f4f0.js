(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{106:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return b})),t.d(n,"default",(function(){return s}));var a=t(3),i=t(8),r=(t(0),t(130)),o={id:"entities",title:"Entities & Terminology"},l={unversionedId:"entities",id:"entities",isDocsHomePage:!1,title:"Entities & Terminology",description:"Project",source:"@site/docs/entities.md",sourceDirName:".",slug:"/entities",permalink:"/docs/entities",editUrl:"https://github.com/kraken-ci/website/edit/master/docs/entities.md",version:"current",frontMatter:{id:"entities",title:"Entities & Terminology"},sidebar:"someSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Architecture",permalink:"/docs/architecture"}},b=[{value:"Project",id:"project",children:[]},{value:"Branch",id:"branch",children:[]},{value:"Stage",id:"stage",children:[]},{value:"Jobs",id:"jobs",children:[]},{value:"Flows &amp; Runs",id:"flows--runs",children:[]},{value:"Example of a Workflow Schema",id:"example-of-a-workflow-schema",children:[]}],c={toc:b};function s(e){var n=e.components,o=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,o,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h3",{id:"project"},"Project"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Project")," is the highest level entity, which separates things from other ",Object(r.b)("inlineCode",{parentName:"p"},"projects"),"."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Projects",src:t(189).default})),Object(r.b)("h3",{id:"branch"},"Branch"),Object(r.b)("p",null,"A project can contain multiple ",Object(r.b)("inlineCode",{parentName:"p"},"branches"),". Kraken ",Object(r.b)("inlineCode",{parentName:"p"},"Branch")," can represent a real source code\nrepository branch of a ",Object(r.b)("inlineCode",{parentName:"p"},"project"),", but it does not have to. ",Object(r.b)("inlineCode",{parentName:"p"},"Branches")," are usually used to model\nmultiple parallel, often independent, activity streams of a ",Object(r.b)("inlineCode",{parentName:"p"},"project"),". For example a customer-focused maintenance release\nor a future-oriented development work. ",Object(r.b)("inlineCode",{parentName:"p"},"Branches")," may have different views of the source code repository,\nuse different sets of tools, have different scopes of tests, etc."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Branches",src:t(190).default})),Object(r.b)("h3",{id:"stage"},"Stage"),Object(r.b)("p",null,"Each ",Object(r.b)("inlineCode",{parentName:"p"},"branch")," can contain multiple ",Object(r.b)("inlineCode",{parentName:"p"},"stages"),". A ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," is used to define the detailed activities that will happen when a ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," is executed."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Stages")," can be linked together to make one ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," run after another ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," is completed.\nAll ",Object(r.b)("inlineCode",{parentName:"p"},"stages")," that are not dependent (linked) and are ready to run, can be executed in parallel."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Stages",src:t(191).default})),Object(r.b)("p",null,"What is happening in a ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," is defined by ",Object(r.b)("inlineCode",{parentName:"p"},"stage's")," ",Object(r.b)("inlineCode",{parentName:"p"},"workflow schema")," or just ",Object(r.b)("inlineCode",{parentName:"p"},"schema"),".\nIn ",Object(r.b)("inlineCode",{parentName:"p"},"schema")," there can be defines:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"one or more ",Object(r.b)("inlineCode",{parentName:"li"},"stage")," parents"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"triggers")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"parameters")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"configs")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"jobs")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"notifications")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"timeout"))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Stage")," linking is defined by parents property in a ",Object(r.b)("inlineCode",{parentName:"p"},"stage"),". ",Object(r.b)("inlineCode",{parentName:"p"},"Parameters")," can be used to differentiate and parametrize ",Object(r.b)("inlineCode",{parentName:"p"},"jobs"),";\ntheir values can be provided by user while starting a ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," manually otherwise default values are used.\n",Object(r.b)("inlineCode",{parentName:"p"},"Configs")," allow for defining set of key-value pairs that statically define set of tests variants for execution.\n",Object(r.b)("inlineCode",{parentName:"p"},"Notifications")," can be used to inform users about ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," result. There are several media available like email or Slack.\n",Object(r.b)("inlineCode",{parentName:"p"},"Timeout")," limits the time of whole ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," executions. These assure us that the ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," will be terminated if something really\nbad is happening in ",Object(r.b)("inlineCode",{parentName:"p"},"jobs")," execution (e.g. they are hanging the machines)."),Object(r.b)("p",null,"More details about these ",Object(r.b)("inlineCode",{parentName:"p"},"schema")," properties are available in chapter ",Object(r.b)("a",{parentName:"p",href:"schema"},"Schema"),"."),Object(r.b)("h3",{id:"jobs"},"Jobs"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Jobs")," describe what should be done in a ",Object(r.b)("inlineCode",{parentName:"p"},"stage"),". A ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," can define multiple ",Object(r.b)("inlineCode",{parentName:"p"},"jobs")," and they all are run in parallel."),Object(r.b)("h4",{id:"job-steps"},"Job Steps"),Object(r.b)("p",null,"Each ",Object(r.b)("inlineCode",{parentName:"p"},"job")," contains one or more ",Object(r.b)("inlineCode",{parentName:"p"},"steps")," that describe operations to be run sequentially. A single ",Object(r.b)("inlineCode",{parentName:"p"},"step")," can be for example:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"execution of a shell command"),Object(r.b)("li",{parentName:"ul"},"checking out sources from a repository"),Object(r.b)("li",{parentName:"ul"},"running tests by a test tool"),Object(r.b)("li",{parentName:"ul"},"running static checks by a linter"),Object(r.b)("li",{parentName:"ul"},"and many more")),Object(r.b)("p",null,Object(r.b)("img",{alt:"Jobs-Steps",src:t(192).default})),Object(r.b)("h4",{id:"job-environments"},"Job Environments"),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"Job")," contains definition of multiple ",Object(r.b)("inlineCode",{parentName:"p"},"environments"),". An ",Object(r.b)("inlineCode",{parentName:"p"},"environment")," specifies the following conditions for the execution of a ",Object(r.b)("inlineCode",{parentName:"p"},"job"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"agents group")," - pointing to machines with agents which will be used to run the steps"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"operating system")," - OS that will be used on the machines"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("em",{parentName:"li"},"configuration")," - one of ",Object(r.b)("inlineCode",{parentName:"li"},"configurations")," defined in the ",Object(r.b)("inlineCode",{parentName:"li"},"stage"))),Object(r.b)("p",null,"With the help of ",Object(r.b)("inlineCode",{parentName:"p"},"environments"),", the same ",Object(r.b)("inlineCode",{parentName:"p"},"job")," can be run on various combinations of target machines, operating systems and configuration parameters.\nSo environments allow for running the same job:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"on several different operating system;"),Object(r.b)("li",{parentName:"ul"},"on several different hardware, e.g.: one with AMD CPU, another one with Intel CPU;"),Object(r.b)("li",{parentName:"ul"},"with different tests configurations, e.g.: running the same benchmark but in several different resolutions.")),Object(r.b)("h3",{id:"flows--runs"},"Flows & Runs"),Object(r.b)("p",null,"When Kraken triggers execution of stages, it starts a ",Object(r.b)("inlineCode",{parentName:"p"},"flow"),". A ",Object(r.b)("inlineCode",{parentName:"p"},"flow")," begins with the first ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," (or group of ",Object(r.b)("inlineCode",{parentName:"p"},"stages"),") in the ",Object(r.b)("inlineCode",{parentName:"p"},"branch"),".\nA ",Object(r.b)("inlineCode",{parentName:"p"},"stage")," that has been triggered and is executing, is called a ",Object(r.b)("inlineCode",{parentName:"p"},"run"),"."),Object(r.b)("p",null,"Subsequent ",Object(r.b)("inlineCode",{parentName:"p"},"runs")," are triggered by one of prior ",Object(r.b)("inlineCode",{parentName:"p"},"runs"),". ",Object(r.b)("inlineCode",{parentName:"p"},"Runs")," can also be triggered manually."),Object(r.b)("p",null,"There can be two kinds of flows that are predefined by Kraken (see ",Object(r.b)("a",{parentName:"p",href:"/docs/philosophy"},"Kraken's Philosophy"),"):"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"DEV flow")," - it represents ",Object(r.b)("em",{parentName:"li"},"pre-commit")," activities, for example it can be triggered by developer on demand"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CI flow")," - it represents ",Object(r.b)("em",{parentName:"li"},"post-commit")," activities, for example it can be triggered by commits to the production source code (master)")),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"run")," can dynamically determine in the context of which ",Object(r.b)("inlineCode",{parentName:"p"},"flow")," it is running - ",Object(r.b)("inlineCode",{parentName:"p"},"CI")," or ",Object(r.b)("inlineCode",{parentName:"p"},"DEV"),"."),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"job")," that is being executed as part of a ",Object(r.b)("inlineCode",{parentName:"p"},"run")," is called ",Object(r.b)("inlineCode",{parentName:"p"},"job in\nrun"),". It has an individual execution status. Upon completion, it can\nalso have multiple test results or issues."),Object(r.b)("p",null,"Similarily, a ",Object(r.b)("inlineCode",{parentName:"p"},"step")," that is being executed as part of a ",Object(r.b)("inlineCode",{parentName:"p"},"job in run")," is called ",Object(r.b)("inlineCode",{parentName:"p"},"step in run"),"."),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"job in run")," is executed (multiplied) for each of the ",Object(r.b)("inlineCode",{parentName:"p"},"environments")," defined in a ",Object(r.b)("inlineCode",{parentName:"p"},"stage"),"."),Object(r.b)("p",null,Object(r.b)("img",{alt:"Jobs-Steps",src:t(193).default})),Object(r.b)("h3",{id:"example-of-a-workflow-schema"},"Example of a Workflow Schema"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Stage")," is defined in Python-like syntax."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},'def stage(ctx):\n    return {\n        "parent": "Unit Tests",\n        "triggers": {\n            "parent": True,\n            "cron": "1 * * * *",\n            "interval": "10m",\n            "repository": True,\n            "webhook": True\n        },\n        "parameters": [],\n        "configs": [{\n            "name": "c1",\n            "p1": "1",\n            "p2": "3"\n        }, {\n            "name": "c2",\n            "n3": "33",\n            "t2": "asdf"\n        }],\n        "jobs": [{\n            "name": "make dist",\n            "steps": [{\n                "tool": "git",\n                "checkout": "https://github.com/frankhjung/python-helloworld.git",\n                "branch": "master"\n            }, {\n                "tool": "pytest",\n                "params": "tests/testhelloworld.py",\n                "cwd": "python-helloworld"\n            }],\n            "environments": [{\n                "system": "ubuntu-18.04",\n                "agents_group": "all",\n                "config": "c1"\n            }]\n        }],\n        "notification": {\n            "slack": {"channel": "kk-results"},\n            "email": "godfryd@gmail.com"\n        }\n    }\n')))}s.isMDXComponent=!0},130:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return u}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),s=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=s(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,u=p["".concat(o,".").concat(d)]||p[d]||m[d]||r;return t?i.a.createElement(u,l(l({ref:n},c),{},{components:t})):i.a.createElement(u,l({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var b in n)hasOwnProperty.call(n,b)&&(l[b]=n[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},189:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/kraken-projects-6eba2e4b9ec14a082451cbae893dadf1.png"},190:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/kraken-branches-ff1cfc375576c71881292e0ae8a6cc7d.png"},191:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/kraken-stages-2c3fd7a9951665b5a6d067915ab2360a.png"},192:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/kraken-jobs-steps-4af264c74c8685cfb91864dd700130b6.png"},193:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/kraken-flows-4e0d747d54136cc22026a7e4ebe6ea23.png"}}]);