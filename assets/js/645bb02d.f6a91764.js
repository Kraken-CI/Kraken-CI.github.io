"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[8464],{7975:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>h});var t=n(4848),r=n(8453),i=n(4074);const l={id:"test-results-basics",title:"Test Results Basics"},a=void 0,o={id:"test-results-basics",title:"Test Results Basics",description:"Branch Results",source:"@site/docs/test-results-basics.mdx",sourceDirName:".",slug:"/test-results-basics",permalink:"/docs/test-results-basics",draft:!1,unlisted:!1,editUrl:"https://github.com/kraken-ci/website/edit/master/docs/test-results-basics.mdx",tags:[],version:"current",frontMatter:{id:"test-results-basics",title:"Test Results Basics"},sidebar:"someSidebar",previous:{title:"Autoscale in Cloud",permalink:"/docs/autoscale-in-cloud"},next:{title:"Test Results Tracking",permalink:"/docs/test-results-tracking"}},c={},h=[{value:"Branch Results",id:"branch-results",level:2},{value:"Run Box",id:"run-box",level:2},{value:"Test Case Results Table",id:"test-case-results-table",level:2},{value:"Filtering Test Case Results",id:"filtering-test-case-results",level:2},{value:"Sorting Test Case Results",id:"sorting-test-case-results",level:2},{value:"Comments",id:"comments",level:2},{value:"Test Case History",id:"test-case-history",level:2}];function d(e){const s={code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"branch-results",children:"Branch Results"}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"Branch Results"})," page presents high-level information about the\nflows and runs of a given branch. It organizes flows in rows. The top\nrow contains the latest flow. Each flow row contains a list of\nboxes. Each box contains information about a run of a given stage. The\norder of boxes with runs is chronological according to their start\ntime."]}),"\n",(0,t.jsx)(i.A,{img:"screen-branch-results-2.png"}),"\n",(0,t.jsx)(s.h2,{id:"run-box",children:"Run Box"}),"\n",(0,t.jsx)(s.p,{children:"The color of the run box indicates the final status of the run:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"red: one or more jobs finished with an error"}),"\n",(0,t.jsx)(s.li,{children:"yellow: no errors in jobs but some test results failed or there are\nissues discovered in the code"}),"\n",(0,t.jsx)(s.li,{children:"green: all jobs finished without error and there are no failures in\ntests and no issues in the code"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"A run box contains:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"data about execution: total number of scheduled jobs, number of\nerred jobs, etc."}),"\n",(0,t.jsx)(s.li,{children:"summary of testing: pass ratio, total, regressions and fixes counts, etc"}),"\n",(0,t.jsx)(s.li,{children:"issues summary: total number of discovered issues, number of new issues"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Example 1:"}),"\n",(0,t.jsx)(i.A,{img:"screen-run-box-1.png"}),"\n",(0,t.jsx)(s.p,{children:"This run has 1 successful job that reported tests results. There were\n100 test cases run, where 16 did not pass, so the pass ratio is\n16%. There were detected 15 regressions and 13 fixes. There are\nfailures, so the box is yellow."}),"\n",(0,t.jsx)(s.p,{children:"Example 2:"}),"\n",(0,t.jsx)(i.A,{img:"screen-run-box-2.png"}),"\n",(0,t.jsx)(s.p,{children:"This run has 4 jobs with no errors. Some of them reported tests\nresults, the other ones reported issues. There were 17 test cases run,\nall passed, so the pass ratio is 100%. There were detected 15 issues\nin the code. There are issues, so the box is yellow."}),"\n",(0,t.jsx)(s.p,{children:"Example 3:"}),"\n",(0,t.jsx)(i.A,{img:"screen-run-box-3.png"}),"\n",(0,t.jsx)(s.p,{children:"This run has 2 jobs with no errors. In the reported tests results,\nthere are 100% passed test cases. No failures and no issues, so the box\nis green."}),"\n",(0,t.jsx)(s.p,{children:"Example 4:"}),"\n",(0,t.jsx)(i.A,{img:"screen-run-box-4.png"}),"\n",(0,t.jsx)(s.p,{children:"This run has 4 jobs with 1 error. All tests reported are passed but\nthere could be not reported tests due to errors in job execution. There\nwere detected 6 issues in the code. There is one erred job so the box\nis red."}),"\n",(0,t.jsx)(s.h2,{id:"test-case-results-table",children:"Test Case Results Table"}),"\n",(0,t.jsxs)(s.p,{children:["A job that performs testing reports test results. The test results are\nvisible on a ",(0,t.jsx)(s.code,{children:"Run Results"})," page, in ",(0,t.jsx)(s.code,{children:"Test Results"})," tab. They are\npresented in a table."]}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results.png"}),"\n",(0,t.jsx)(s.p,{children:"The table presents test case results in each row. They contain details\nof the test case result:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"the result status"}),"\n",(0,t.jsx)(s.li,{children:"a name of the test case"}),"\n",(0,t.jsx)(s.li,{children:"job name and ID"}),"\n",(0,t.jsx)(s.li,{children:"age, instability and relevancy"}),"\n",(0,t.jsx)(s.li,{children:"values"}),"\n",(0,t.jsx)(s.li,{children:"execution environment: system, agent group and actual agent and config"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"In Kraken, a test case result besides status can contain\nvalues. Values are pairs: attribute and its value. They are also a\nresult of a test case but hold numbers. They can hold e.g. performance\ndata or anything similar to performance. These values are tracked over\ntime. Kraken can draw charts of values and do more things with them."}),"\n",(0,t.jsx)(s.h2,{id:"filtering-test-case-results",children:"Filtering Test Case Results"}),"\n",(0,t.jsx)(s.p,{children:"It is possible to filter test results by various attributes:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["by ",(0,t.jsx)(s.code,{children:"Results Status"})," ie. ",(0,t.jsx)(s.code,{children:"Passed"}),", ",(0,t.jsx)(s.code,{children:"Failed"}),", etc."]}),"\n",(0,t.jsxs)(s.li,{children:["by ",(0,t.jsx)(s.code,{children:"Result Change"})," ie. ",(0,t.jsx)(s.code,{children:"Fixes"}),", ",(0,t.jsx)(s.code,{children:"Regressions"}),", ",(0,t.jsx)(s.code,{children:"New"})," and ",(0,t.jsx)(s.code,{children:"No Changes"}),"; the change is determined between the current result and\nthe previous result from previous run"]}),"\n",(0,t.jsxs)(s.li,{children:["by ",(0,t.jsx)(s.code,{children:"Age"})," where age is a number of previous runs with the same result\nas in the current run; so e.g. age 0 means that in the previous run test\ncase had a different result than it has now (so these are regressions\nand fixes); age 1 means that the current run and the previous run has the\nsame result but the result before the previous one is different"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"New"})," is a shortcut to set ",(0,t.jsx)(s.code,{children:"Age"})," between 0 and 0, ie. show changes\nthat happened in the last run (fixes + regressions)"]}),"\n",(0,t.jsxs)(s.li,{children:["by ",(0,t.jsx)(s.code,{children:"Instability"})," where instability is a count of result status\nchanges in the last 10 runs; if this is 0 then in the last 10 runs test\ncase has the same result (it was pretty stable); if this is 10 then\nit means that in every run of the last 10 runs the status was\nchanging compared to the previous one (it was very unstable)"]}),"\n",(0,t.jsxs)(s.li,{children:["by ",(0,t.jsx)(s.code,{children:"Test Case"})," name"]}),"\n",(0,t.jsxs)(s.li,{children:["by ",(0,t.jsx)(s.code,{children:"Job"})," name of ID"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Example 1:"}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results-regressions.png"}),"\n",(0,t.jsxs)(s.p,{children:["Filtering by ",(0,t.jsx)(s.code,{children:"Result Changes"}),": show only regressions. Regression means\na change from non-passed status to passed status."]}),"\n",(0,t.jsx)(s.p,{children:"Example 2:"}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results-regressions-failures.png"}),"\n",(0,t.jsxs)(s.p,{children:["Filtering by ",(0,t.jsx)(s.code,{children:"Result Status"})," and ",(0,t.jsx)(s.code,{children:"Result Changes"}),": show only failures\nthat are regressions."]}),"\n",(0,t.jsx)(s.p,{children:"Example 3:"}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results-age.png"}),"\n",(0,t.jsxs)(s.p,{children:["Filtering by ",(0,t.jsx)(s.code,{children:"Age"}),": show only results in age between 2 and 3."]}),"\n",(0,t.jsx)(s.p,{children:"Example 4:"}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results-instability.png"}),"\n",(0,t.jsxs)(s.p,{children:["Filtering by ",(0,t.jsx)(s.code,{children:"Instability"}),": show only results that have instability\ngreater than 7 i.e. very unstable test cases."]}),"\n",(0,t.jsx)(s.h2,{id:"sorting-test-case-results",children:"Sorting Test Case Results"}),"\n",(0,t.jsx)(s.p,{children:"Test case results can be sorted. This can be done using several columns:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"name"}),"\n",(0,t.jsx)(s.li,{children:"result"}),"\n",(0,t.jsx)(s.li,{children:"change"}),"\n",(0,t.jsx)(s.li,{children:"age"}),"\n",(0,t.jsx)(s.li,{children:"instability"}),"\n",(0,t.jsx)(s.li,{children:"relevancy"}),"\n"]}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results-sort-name.png"}),"\n",(0,t.jsx)(s.p,{children:"By default results are sorted by test case name."}),"\n",(0,t.jsxs)(s.p,{children:["One of the most important sorting order is by ",(0,t.jsx)(s.code,{children:"Relevancy"}),".\nRelevancy is estimated according to this rules:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"0 is initial"}),"\n",(0,t.jsx)(s.li,{children:"+1 for not passed"}),"\n",(0,t.jsx)(s.li,{children:"+1 for not root caused problem"}),"\n",(0,t.jsx)(s.li,{children:"+1 for failure"}),"\n",(0,t.jsxs)(s.li,{children:["+1 for instability ",(0,t.jsx)(s.code,{children:"<="})," 3"]}),"\n",(0,t.jsx)(s.li,{children:"+1 for age < 5"}),"\n",(0,t.jsx)(s.li,{children:"+1 for regression"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"This way the most relevant results get the highest score. They need an\nattention."}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results-sort-relevancy.png"}),"\n",(0,t.jsx)(s.h2,{id:"comments",children:"Comments"}),"\n",(0,t.jsx)(s.p,{children:"In the test case results table, it is possible to add sticky comments\nto test case results. When a new failure is spotted, a comment\nstating, e.g. the reason for the failure or link to a bug in a bug\ntracker may be added."}),"\n",(0,t.jsxs)(s.p,{children:["To add a comment, click on the cell of a particular test case result in\nthe ",(0,t.jsx)(s.code,{children:"Comment"})," or ",(0,t.jsx)(s.code,{children:"Comment State"})," columns."]}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results-comments-1.png"}),"\n",(0,t.jsx)(s.p,{children:"This will reveal a dialog box that shows a form for introducing new\ncomment and a history of previous comments related to this test\ncase."}),"\n",(0,t.jsx)(i.A,{img:"screen-run-test-results-comments-2.png"}),"\n",(0,t.jsx)(s.p,{children:"Each comment has a state. It can be one of:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"new"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"investigating"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"bug in product"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.code,{children:"bug in test"})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"The state allows concluding quickly if given failure has been analyzed\nand it is known where is the root cause and what needs to be fixed or\nif the failure still requires some investigation."}),"\n",(0,t.jsx)(s.p,{children:"If a failure is root-caused, then its relevancy is decreased by 1."}),"\n",(0,t.jsx)(s.p,{children:"If the failure persists in the subsequent test runs, the added comment\nis still presented next to the new results. If new facts about the\nfailure are revealed, you may extend the comment."}),"\n",(0,t.jsx)(s.h2,{id:"test-case-history",children:"Test Case History"}),"\n",(0,t.jsx)(s.p,{children:"Each test case has its history of results. In the table with test case\nresults a link under the test case name leads to a page dedicated to\nthe given test case. This page presents a table with the historical\nresults of the test case."}),"\n",(0,t.jsx)(i.A,{img:"screen-test-case-history.png"}),"\n",(0,t.jsxs)(s.p,{children:["There is another tab called ",(0,t.jsx)(s.code,{children:"Charts"})," that shows these results on charts."]}),"\n",(0,t.jsx)(i.A,{img:"screen-test-case-charts.png"}),"\n",(0,t.jsx)(s.p,{children:"The left chart shows the history of result status. The right one presents\nthe history of values in time. Error bars are shown if there were run\nmultiple iterations and there were reported multiple values for a given\nattribute."})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},4074:(e,s,n)=>{n.d(s,{A:()=>r});n(6540);var t=n(4848);const r=e=>{let{img:s}=e;return(0,t.jsx)("a",{href:"/img/"+s,target:"blank",children:(0,t.jsx)("img",{src:"/img/"+s,style:{boxShadow:"0 10px 10px 5px #777",marginBottom:"30px"}})})}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var t=n(6540);const r={},i=t.createContext(r);function l(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);