"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[2443],{6253:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var r=i(4848),s=i(8453);const t={id:"architecture",title:"Architecture"},c=void 0,l={id:"architecture",title:"Architecture",description:"Kraken Architecture",source:"@site/docs/architecture.md",sourceDirName:".",slug:"/architecture",permalink:"/docs/architecture",draft:!1,unlisted:!1,editUrl:"https://github.com/kraken-ci/website/edit/master/docs/architecture.md",tags:[],version:"current",frontMatter:{id:"architecture",title:"Architecture"},sidebar:"someSidebar",previous:{title:"Entities & Terminology",permalink:"/docs/entities"},next:{title:"Projects and Branches",permalink:"/docs/proj-branches"}},o={},a=[{value:"Server",id:"server",level:2},{value:"UI",id:"ui",level:2},{value:"Controller",id:"controller",level:2},{value:"RQ",id:"rq",level:2},{value:"ClickHouse &amp; its Proxy",id:"clickhouse--its-proxy",level:2},{value:"MinIO",id:"minio",level:2},{value:"Redis",id:"redis",level:2},{value:"Agent",id:"agent",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Kraken Architecture",src:i(4282).A+"",width:"722",height:"517"})}),"\n",(0,r.jsx)(n.h2,{id:"server",children:"Server"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Server"})," exposes Kraken ReST API"]}),"\n",(0,r.jsx)(n.h2,{id:"ui",children:"UI"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"UI"})," is an Angular application that can be served by NGINX. Unicorn can be used to maintain ",(0,r.jsx)(n.code,{children:"Server"})," instances."]}),"\n",(0,r.jsx)(n.h2,{id:"controller",children:"Controller"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Controller"})," is made of 4 services:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Planner"})," - it triggers new flows based on indicated rule in given project's branch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Scheduler"})," - it assigns jobs to agents"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Watchdog"})," - it checks runs and their jobs if they are in their time limits, it also monitors agents and their machines health"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"QNeck"})," - it is a broker to RQ (see below) that filters out repeating the same requested background tasks"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"rq",children:"RQ"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"RQ"})," executes background tasks like processing results reported by\nan agent. Any service in ",(0,r.jsx)(n.code,{children:"Controller"})," or ",(0,r.jsx)(n.code,{children:"RQ"})," tasks can enqueue\nnew ",(0,r.jsx)(n.code,{children:"RQ"})," tasks. Current tasks:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"analyze_results_history"}),"\n",(0,r.jsx)(n.li,{children:"notify_about_completed_run"}),"\n",(0,r.jsx)(n.li,{children:"trigger_stages"}),"\n",(0,r.jsx)(n.li,{children:"job_completed"}),"\n",(0,r.jsx)(n.li,{children:"trigger_run"}),"\n",(0,r.jsx)(n.li,{children:"trigger_flow"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"clickhouse--its-proxy",children:"ClickHouse & its Proxy"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"ClickHouse"})," is a database that is used for storing logs from all\nKraken services and from all agents, ",(0,r.jsx)(n.code,{children:"ClickHouse Proxy"})," is used to\ncollect logs, aggregate them and send in batches to ",(0,r.jsx)(n.code,{children:"ClickHouse"}),"\ndatabase."]}),"\n",(0,r.jsx)(n.h2,{id:"minio",children:"MinIO"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"MinIO"})," is an object storage database. It is used in Kraken to store\nartifact that are created during jobs execution, to store cache files\nand to store Git repository bundles."]}),"\n",(0,r.jsx)(n.h2,{id:"redis",children:"Redis"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Redis"})," is used in various places:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["by ",(0,r.jsx)(n.code,{children:"RQ"})," as its backend storage;"]}),"\n",(0,r.jsx)(n.li,{children:"by Casbin (RBAC system) for synchronizing changes"}),"\n",(0,r.jsx)(n.li,{children:"by Kraken CI Server for caching various data"}),"\n",(0,r.jsxs)(n.li,{children:["by Kraken CI QNeck as pubsub for passing tasks to ",(0,r.jsx)(n.code,{children:"RQ"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"agent",children:"Agent"}),"\n",(0,r.jsx)(n.p,{children:"Agent is a service that is run on a machine that is expected to\nexecute jobs. Agent can execute jobs directly on the system (locally),\nor it can encapulate them in e.g. container. Currently there are\nexecutors for:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"local"}),"\n",(0,r.jsx)(n.li,{children:"Docker"}),"\n",(0,r.jsx)(n.li,{children:"LXD"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"pathname:///arch-ppt/index.html",children:"Presentation about Kraken Architecture"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},4282:(e,n,i)=>{i.d(n,{A:()=>r});const r=i.p+"assets/images/arch-overview-545ee0c42da80ae218abcee0af55055b.svg"},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>l});var r=i(6540);const s={},t=r.createContext(s);function c(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);