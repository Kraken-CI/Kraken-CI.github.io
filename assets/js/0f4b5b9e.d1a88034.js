"use strict";(self.webpackChunkkraken_ci_website=self.webpackChunkkraken_ci_website||[]).push([[0],{8571:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>l,metadata:()=>t,toc:()=>h});var s=r(4848),a=r(8453),o=r(4074);r(3012);const l={slug:"hello-worlds-in-22-langs-on-kraken-ci",title:"Hello Worlds in 22 Langs on Kraken CI",authors:"mike",tags:["kraken","devops","cicd"]},i=void 0,t={permalink:"/blog/hello-worlds-in-22-langs-on-kraken-ci",editUrl:"https://github.com/kraken-ci/website/edit/master/blog/blog/2022-05-13-hello-worlds-in-22-langs-on-kraken-ci.mdx",source:"@site/blog/2022-05-13-hello-worlds-in-22-langs-on-kraken-ci.mdx",title:"Hello Worlds in 22 Langs on Kraken CI",description:"There is a new, quite funny workflow example for Kraken CI. It shows",date:"2022-05-13T00:00:00.000Z",tags:[{label:"kraken",permalink:"/blog/tags/kraken"},{label:"devops",permalink:"/blog/tags/devops"},{label:"cicd",permalink:"/blog/tags/cicd"}],readingTime:2.485,hasTruncateMarker:!0,authors:[{name:"Michal Nowikowski",title:"Kraken Founder. I\u2019m software engineer focused on full-stack programming and improving software processes.",url:"https://www.linkedin.com/in/godfryd",imageURL:"https://avatars1.githubusercontent.com/u/176567?s=460&u=4ade22771af9569be24b20278d24ef60da6eb0bb&v=4",key:"mike"}],frontMatter:{slug:"hello-worlds-in-22-langs-on-kraken-ci",title:"Hello Worlds in 22 Langs on Kraken CI",authors:"mike",tags:["kraken","devops","cicd"]},unlisted:!1,prevItem:{title:"Custom Tools",permalink:"/blog/custom-tools"},nextItem:{title:"Job Designer and More - 0.962 Release",permalink:"/blog/job-designer-and-more-0-962"}},c={authorsImageUrls:[void 0]},h=[{value:"Hello World Programs",id:"hello-world-programs",level:3},{value:"Kraken Base Language Images",id:"kraken-base-language-images",level:3},{value:"The Workflow",id:"the-workflow",level:3},{value:"Summary",id:"summary",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["There is a new, quite funny workflow example for Kraken CI. It shows\nhow to compile and run ",(0,s.jsx)(n.code,{children:"Hello World"})," programs in various programming\nlanguages, 22 languages."]}),"\n",(0,s.jsx)(n.h3,{id:"hello-world-programs",children:"Hello World Programs"}),"\n",(0,s.jsxs)(n.p,{children:["Every programmer knows what does ",(0,s.jsx)(n.code,{children:"Hello World"})," program looks like."]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example in C language:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'#include<stdio.h>\n\nint main(){\n  printf("Hello World\\n");\n  return 0;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["But 22? These 22 can be seen in Kraken's repo on GitHub:\n",(0,s.jsx)(n.a,{href:"https://github.com/kraken-CI/hello-worlds",children:"https://github.com/kraken-CI/hello-worlds"})]}),"\n",(0,s.jsxs)(n.p,{children:["Still, there are more languages with ",(0,s.jsx)(n.code,{children:"Hello Worlds"}),".\nThe biggest collection can be found here:\n",(0,s.jsx)(n.a,{href:"http://helloworldcollection.de/",children:"http://helloworldcollection.de/"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["These are just examples. In our case, they can be compiled and run.\nAfter downloading the repo you may run ",(0,s.jsx)(n.code,{children:"./run.sh"})," script providing\nthe language folder, e.g.:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"$ ./run.sh C\n"})}),"\n",(0,s.jsx)(n.p,{children:"This will display, compile and run a C example."}),"\n",(0,s.jsx)(n.p,{children:"In Kraken's case, there is defined a workflow that does it for us for\neach language. But first, we need to have systems with a compiler or a\nruntime for these languages. Docker to the rescue."}),"\n",(0,s.jsx)(n.h3,{id:"kraken-base-language-images",children:"Kraken Base Language Images"}),"\n",(0,s.jsx)(n.p,{children:"For each language, there is prepared a Docker image. They are based on\nofficial images for these languages. For Kraken, they got some extras\nlike Kraken Agent that is running using kraken user (not root)."}),"\n",(0,s.jsxs)(n.p,{children:["The list of all lang images is available in ",(0,s.jsx)(n.a,{href:"/docs/docker-executor#language-images",children:"the docs"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"the-workflow",children:"The Workflow"}),"\n",(0,s.jsxs)(n.p,{children:["The mentioned workflow can be found in ",(0,s.jsx)(n.a,{href:"https://github.com/Kraken-CI/hello-worlds/blob/main/kraken-workflow.py",children:"kraken-workflow.py"})," file."]}),"\n",(0,s.jsx)(n.p,{children:"In short, it looks as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def stage(ctx):\n    langs = [\n        (\'C\', \'gcc:11.3\'),\n        (\'C++\', \'gcc:11.3\'),\n        (\'C#\', \'mono:6.12\'),\n        # and more...\n    ]\n\n    jobs = []\n\n    for lang_name, lang_image in langs:\n        jobs.append({\n            "name": "hello world %s" % lang_name,\n            "steps": [{\n            "tool": "git",\n                "checkout": "https://github.com/Kraken-CI/hello-worlds.git",\n                "branch": "main"\n            }, {\n                "tool": "shell",\n                "cmd": "./run.sh %s" % lang_name,\n                "cwd": "hello-worlds"\n            }],\n            "environments": [{\n                "executor": "docker",\n                "system": "krakenci/%s" % lang_image,\n                "agents_group": "all",\n                "config": "default"\n            }]\n        })\n\n    return {\n        "parent": "root",\n        "triggers": {\n            "parent": True,\n        },\n        "parameters": [],\n        "configs": [],\n        "jobs": jobs\n    }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["As you may notice, the list of jobs is built dynamically.  For each\nentry of the list of tuples (",(0,s.jsx)(n.code,{children:"lang-name"}),", ",(0,s.jsx)(n.code,{children:"docker-image"}),"), a job is\ndefined with the same steps but various values for language and Docker\nimage name. The lang name is passed to ",(0,s.jsx)(n.code,{children:"./run.sh"})," script in ",(0,s.jsx)(n.code,{children:"shell"}),"\nstep.  And Docker image name is used in the environments section, in\nthe ",(0,s.jsx)(n.code,{children:"system"})," field. Such a list of jobs is then returned in the whole\nworkflow definition. Each job will be run in parallel in separate\nDocker containers."]}),"\n",(0,s.jsxs)(n.p,{children:["The example of workflow execution is present in Kraken lab:\n",(0,s.jsx)(n.a,{href:"https://lab.kraken.ci/runs/5009/jobs",children:"https://lab.kraken.ci/runs/5009/jobs"}),". Check the workflow definitions in\n",(0,s.jsx)(n.a,{href:"https://lab.kraken.ci/branches/33",children:"branch management page"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"This screenshot shows the execution of this workflow:"}),"\n",(0,s.jsx)(o.A,{img:"screen-hello-worlds-execution.png"}),"\n",(0,s.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"This article shows how Kraken CI can build programs written in various\nlanguages. Kraken provides prepared Docker images for many\nlanguages. It is easy to define sophisticated workflows that\ndynamically define jobs that can be run in parallel. In the end, it is\nnice to observe the results of workflow execution in Kraken UI."})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4074:(e,n,r)=>{r.d(n,{A:()=>a});r(6540);var s=r(4848);const a=e=>{let{img:n}=e;return(0,s.jsx)("a",{href:"/img/"+n,target:"blank",children:(0,s.jsx)("img",{src:"/img/"+n,style:{boxShadow:"0 10px 10px 5px #777",marginBottom:"30px"}})})}}}]);