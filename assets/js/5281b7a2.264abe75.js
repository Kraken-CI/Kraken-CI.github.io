(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{122:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=b(n),d=r,m=u["".concat(c,".").concat(d)]||u[d]||p[d]||i;return n?a.a.createElement(m,o(o({ref:t},s),{},{components:n})):a.a.createElement(m,o({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},181:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/arch-overview-0d7cba28a51901f3cf6be2e94e4ce339.svg"},89:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),i=(n(0),n(122)),c={id:"architecture",title:"Architecture"},o={unversionedId:"architecture",id:"architecture",isDocsHomePage:!1,title:"Architecture",description:"Kraken Architecture",source:"@site/docs/architecture.md",slug:"/architecture",permalink:"/docs/architecture",editUrl:"https://github.com/kraken-ci/website/edit/master/docs/architecture.md",version:"current",sidebar:"someSidebar",previous:{title:"Entities & Terminology",permalink:"/docs/entities"},next:{title:"Projects and Branches",permalink:"/docs/proj-branches"}},l=[{value:"Server",id:"server",children:[]},{value:"UI",id:"ui",children:[]},{value:"Controller",id:"controller",children:[]},{value:"Celery",id:"celery",children:[]},{value:"ClickHouse &amp; its Proxy",id:"clickhouse--its-proxy",children:[]},{value:"MinIO",id:"minio",children:[]},{value:"Agent",id:"agent",children:[]}],s={toc:l};function b(e){var t=e.components,c=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,c,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("img",{alt:"Kraken Architecture",src:n(181).default})),Object(i.b)("h2",{id:"server"},"Server"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Server")," exposes Kraken ReST API"),Object(i.b)("h2",{id:"ui"},"UI"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"UI")," is an Angular application that can be served by NGINX. Unicorn can be used to maintain ",Object(i.b)("inlineCode",{parentName:"p"},"Server")," instances."),Object(i.b)("h2",{id:"controller"},"Controller"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Controller")," is made of 4 services:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Planner")," - it triggers new flows based on indicated rule in given project's branch"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Scheduler")," - it assigns jobs to agents"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Watchdog")," - it checks runs and their jobs if they are in their time limits, it also monitors agents and their machines health")),Object(i.b)("h2",{id:"celery"},"Celery"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Celery")," executes background tasks like processing results reported by\nan agent. Any service in ",Object(i.b)("inlineCode",{parentName:"p"},"Controller")," or ",Object(i.b)("inlineCode",{parentName:"p"},"Celery")," tasks can enqueue\nnew ",Object(i.b)("inlineCode",{parentName:"p"},"Celery")," tasks. Current tasks:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"analyze_results_history"),Object(i.b)("li",{parentName:"ul"},"notify_about_completed_run"),Object(i.b)("li",{parentName:"ul"},"trigger_stages"),Object(i.b)("li",{parentName:"ul"},"job_completed"),Object(i.b)("li",{parentName:"ul"},"trigger_run"),Object(i.b)("li",{parentName:"ul"},"trigger_flow")),Object(i.b)("h2",{id:"clickhouse--its-proxy"},"ClickHouse & its Proxy"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"ClickHouse")," is a database that is used for storing logs from all\nKraken services and from all agents, ",Object(i.b)("inlineCode",{parentName:"p"},"ClickHouse Proxy")," is used to\ncollect logs, aggregate them and send in batches to ",Object(i.b)("inlineCode",{parentName:"p"},"ClickHouse"),"\ndatabase."),Object(i.b)("h2",{id:"minio"},"MinIO"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"MinIO")," is an object storage database. It is used in Kraken to store\nartifact that are created during jobs execution, to store cache files\nand to store Git repository bundles."),Object(i.b)("h2",{id:"agent"},"Agent"),Object(i.b)("p",null,"Agent is a service that is run on a machine that is expected to\nexecute jobs. Agent can execute jobs directly on the system (locally),\nor it can encapulate them in e.g. container. Currently there are\nexecutors for:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"local"),Object(i.b)("li",{parentName:"ul"},"Docker"),Object(i.b)("li",{parentName:"ul"},"LXD")),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"pathname:///arch-ppt/index.html"},"Presentation about Kraken Architecture")))}b.isMDXComponent=!0}}]);