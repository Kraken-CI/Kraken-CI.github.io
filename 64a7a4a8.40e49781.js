(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),s=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=s(n),u=a,m=p["".concat(r,".").concat(u)]||p[u]||d[u]||l;return n?i.a.createElement(m,o(o({ref:t},c),{},{components:n})):i.a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(3),i=n(7),l=(n(0),n(112)),r={id:"schema",title:"Workflow Schema"},o={unversionedId:"schema",id:"schema",isDocsHomePage:!1,title:"Workflow Schema",description:"A branch contains one or several stages. Stages can be independent and",source:"@site/docs/schema.md",slug:"/schema",permalink:"/docs/schema",editUrl:"https://github.com/kraken-ci/website/edit/master/docs/schema.md",version:"current",sidebar:"someSidebar",previous:{title:"Projects and Branches",permalink:"/docs/proj-branches"},next:{title:"Schema Variables",permalink:"/docs/schema-vars"}},b=[{value:"Schema Elements",id:"schema-elements",children:[]},{value:"Parent",id:"parent",children:[]},{value:"Triggers",id:"triggers",children:[{value:"parent",id:"parent-1",children:[]},{value:"interval",id:"interval",children:[]},{value:"date",id:"date",children:[]},{value:"cron",id:"cron",children:[]},{value:"repo",id:"repo",children:[]},{value:"manual",id:"manual",children:[]}]},{value:"Parameters",id:"parameters",children:[]},{value:"Configs",id:"configs",children:[]},{value:"Flow Label",id:"flow-label",children:[]},{value:"Run Label",id:"run-label",children:[]},{value:"Jobs",id:"jobs",children:[{value:"Name",id:"name",children:[]},{value:"Timeout",id:"timeout",children:[]}]},{value:"Steps in Job",id:"steps-in-job",children:[]},{value:"Built-in Step Tools",id:"built-in-step-tools",children:[{value:"Shell",id:"shell",children:[]},{value:"Git",id:"git",children:[]},{value:"Artifacts",id:"artifacts",children:[]},{value:"Cache",id:"cache",children:[]},{value:"PyLint",id:"pylint",children:[]},{value:"PyTest",id:"pytest",children:[]},{value:"Junit Collect",id:"junit-collect",children:[]},{value:"Go Test",id:"go-test",children:[]},{value:"NgLint",id:"nglint",children:[]},{value:"Cloc",id:"cloc",children:[]},{value:"RndTest",id:"rndtest",children:[]},{value:"Custom Tools",id:"custom-tools",children:[]}]},{value:"Environment in Job",id:"environment-in-job",children:[]},{value:"Notification",id:"notification",children:[]},{value:"Timeout",id:"timeout-1",children:[]}],c={toc:b};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"A branch contains one or several stages. Stages can be independent and\nrun in parallel or chained and together can for a tree or a set of\ntrees (forest). Stage have a schema that defines what should be\ndone. Schema generally defines jobs for execution, execution\nenvironment, triggers that start the execution of whole schema,\noptional parameters and execution configuration."),Object(l.b)("p",null,"Full schema syntax is defined in ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"schema-ref"}),"schema reference"),"."),Object(l.b)("h2",{id:"schema-elements"},"Schema Elements"),Object(l.b)("p",null,"There are defined several things in the schema:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"parent")," stage"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"triggers")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"parameters")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"configs")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"jobs")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"notification")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"timeout"))),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'        "parent": "root",\n        "triggers": {\n            "parent": True\n        },\n        "parameters": [],\n        "configs": [],\n        "jobs": [{\n            "name": "hello",\n            "steps": [{\n                "tool": "shell",\n                "cmd": "echo \'Hello World\'"\n            }],\n            "environments": [{\n                "system": "centos-7",\n                "agents_group": "all",\n                "config": "default"\n            }]\n        }]\n')),Object(l.b)("h2",{id:"parent"},"Parent"),Object(l.b)("p",null,"Parent allows for defining a chain of dependencies between subsequent\nstages. Current stage will be started only when parent stage has been\nfinished.  The value of ",Object(l.b)("inlineCode",{parentName:"p"},"parent")," field is a name of a stage. If it is\nset to special value ",Object(l.b)("inlineCode",{parentName:"p"},"root")," than it means that the stage does not\ndepend on anything and can be started as the first stage or one of the\nfirst stages, just after triggering a new flow in a branch."),Object(l.b)("h2",{id:"triggers"},"Triggers"),Object(l.b)("p",null,"Triggers indicate what events may start a stage and create its new\nrun.  There are several events: ",Object(l.b)("inlineCode",{parentName:"p"},"parent"),", ",Object(l.b)("inlineCode",{parentName:"p"},"interval"),", ",Object(l.b)("inlineCode",{parentName:"p"},"date"),", ",Object(l.b)("inlineCode",{parentName:"p"},"cron"),",\n",Object(l.b)("inlineCode",{parentName:"p"},"repo")," and ",Object(l.b)("inlineCode",{parentName:"p"},"manual"),"."),Object(l.b)("p",null,"Whole flow and its root stages can be also triggered manually in web UI or by a\nwebhook. More about that in ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"webhooks"}),"Webhooks chapter"),"."),Object(l.b)("h3",{id:"parent-1"},"parent"),Object(l.b)("p",null,"A stage is triggered by completion of a parent stage. It is defined as ",Object(l.b)("inlineCode",{parentName:"p"},'"parent": True'),"."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'   "triggers": {\n      "parent": True\n   }\n')),Object(l.b)("h3",{id:"interval"},"interval"),Object(l.b)("p",null,"Given stage is triggered specified amount of time after competion of\nprevious run of this stage.  The duration can be specified in a human\nreadable way e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"1d")," what means one day or ",Object(l.b)("inlineCode",{parentName:"p"},"3h 30m")," what means 3\nhours and 30 minutes."),Object(l.b)("p",null,"Example, start a new stage run every 10 minutes:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'   "triggers": {\n      "interval": "10m"\n   }\n')),Object(l.b)("h3",{id:"date"},"date"),Object(l.b)("p",null,"Given stage is triggered once, on specified date. The date can be\nprovided in human readable way, e.g.: ",Object(l.b)("inlineCode",{parentName:"p"},"2012-01-19 17:21:00")," or ",Object(l.b)("inlineCode",{parentName:"p"},"Sat\nSep 17 23:26:08 CEST 2016"),"."),Object(l.b)("p",null,"Example, start a new stage run once on indicate date:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'   "triggers": {\n      "date": "2012-01-19 17:21:00"\n   }\n')),Object(l.b)("h3",{id:"cron"},"cron"),Object(l.b)("p",null,"A stage is triggered on specified CRON rule e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"* * 10 * *"),". There\nare always 5 items. Each item is separated by space. The items meaning\nare as follows: minutes, hours, days, months, dow (day of week).  The\npossible values for each item can be found on\n",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://apscheduler.readthedocs.io/en/stable/modules/triggers/cron.html?highlight=cron#introduction"}),"Advanced Python Scheduler web page")),Object(l.b)("p",null,"Example, start a new stage run always half past nine AM:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'   "triggers": {\n      "cron": "30 9 * * *"\n   }\n')),Object(l.b)("h3",{id:"repo"},"repo"),Object(l.b)("p",null,"Example, start a new stage run when there are new commits in master\nbranch of Kraken's repository; check for new commits every 60 minutes."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'   "triggers": {\n       "repo": {\n           "url": "https://github.com/Kraken-CI/kraken/",\n           "branch": "master",\n           "interval": "60m"\n       }\n   }\n')),Object(l.b)("p",null,"There is another way of trigger a run based on changes to a repository.\nCheck ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"webhooks"}),"webhooks")," chapter for details."),Object(l.b)("h3",{id:"manual"},"manual"),Object(l.b)("p",null,"Stage may be configured in a way that it is not automatically started,\neven if its parent has completed. This can be achieved by ",Object(l.b)("inlineCode",{parentName:"p"},"manual"),"\ntrigger. When it is set to ",Object(l.b)("inlineCode",{parentName:"p"},"True")," then in a web UI its run is shown in\nblue and awaits user confirmation to start."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'   "triggers": {\n      "manual": True\n   }\n')),Object(l.b)("h2",{id:"parameters"},"Parameters"),Object(l.b)("p",null,"When a flow is started manually it is possible to provide values for\nparameters defined in all stages in given branch. This allows for\ncustomizing behaviour of a stage and its jobs."),Object(l.b)("p",null,"There can be defined multiple parameters in one stage. Each parameters\nhas the following fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"name")," - a string that identifies a parameter"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"type")," - a type of parameter, for now it can be only ",Object(l.b)("inlineCode",{parentName:"li"},"string")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"default")," - a default value for a parameter, it is required"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"description")," - a description of a parameter, it used when a\nparameter is presented in web UI")),Object(l.b)("p",null,"Default value for a parameter is required. It is used when a flow is\nstarted automatically. In that situation it is not possible to provide\nvalues for the parameters manually."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'   "parameters": [{\n       "name": "COUNT",\n       "type": "string",\n       "default": "10",\n       "description": "Number of tests to generate"\n   }]\n')),Object(l.b)("p",null,"Then, in a job definition a parameter can be used by enclosing its\nname in ",Object(l.b)("inlineCode",{parentName:"p"},"#{...}"),", e.g.: ",Object(l.b)("inlineCode",{parentName:"p"},"#{COUNT}"),"."),Object(l.b)("p",null,"Using parameter ",Object(l.b)("inlineCode",{parentName:"p"},"COUNT")," example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'    "jobs": [{\n        "name": "random tests",\n        "steps": [{\n            "tool": "rndtest",\n            "count": "#{COUNT}"\n        }],\n        ...\n    }]\n')),Object(l.b)("p",null,"or"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'    "jobs": [{\n        "name": "random tests",\n        "steps": [{\n            "tool": "shell",\n            "cmd": "echo \'the count is #{COUNT}\'"\n        }],\n        ...\n    }]\n')),Object(l.b)("h2",{id:"configs"},"Configs"),Object(l.b)("p",null,"Not implemented yet."),Object(l.b)("h2",{id:"flow-label"},"Flow Label"),Object(l.b)("p",null,"This field allows for setting a custom label format for flows. It is\ndisplayed instead of flow database ID which is displayed by default."),Object(l.b)("p",null,"Example 1:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "flow_label": "demo-#{KK_FLOW_SEQ}",\n')),Object(l.b)("p",null,"Here a value of ",Object(l.b)("inlineCode",{parentName:"p"},"KK_FLOW_SEQ")," sequence is used. It mean that each\nnew flow will get its incremented numer, e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"demo-2"),". This\nsequence is shared between CI and DEV flows so the label is uniqe for\nboth types of flows."),Object(l.b)("p",null,"Example 2:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "flow_label": "bld-#{KK_CI_DEV_FLOW_SEQ}",\n')),Object(l.b)("p",null,"In this case a ",Object(l.b)("inlineCode",{parentName:"p"},"KK_CI_DEV_FLOW_SEQ")," sequence is used. It means that\nthe sequence is incremented separately for CI and for DEV flows."),Object(l.b)("p",null,"More about sequences in ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"schema-vars"}),"Schema Variables"),"."),Object(l.b)("h2",{id:"run-label"},"Run Label"),Object(l.b)("p",null,"This field allows for setting a custom label format for runs. It is\ndisplayed instead of run database ID which is displayed by default."),Object(l.b)("p",null,"Example 1:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "run_label": "run.#{KK_CI_DEV_RUN_SEQ}",\n')),Object(l.b)("p",null,"In this case a ",Object(l.b)("inlineCode",{parentName:"p"},"KK_CI_DEV_RUN_SEQ")," sequence is used. It means that\nthe sequence is incremented separately for CI and for DEV flows for\nthat run, e.g.: ",Object(l.b)("inlineCode",{parentName:"p"},"run.42"),"."),Object(l.b)("p",null,"More about sequences in ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"schema-vars"}),"Schema Variables"),"."),Object(l.b)("h2",{id:"jobs"},"Jobs"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"Jobs")," describe what should be done in a ",Object(l.b)("inlineCode",{parentName:"p"},"stage"),". A ",Object(l.b)("inlineCode",{parentName:"p"},"stage")," can define\nmultiple ",Object(l.b)("inlineCode",{parentName:"p"},"jobs")," and they all are run in parallel."),Object(l.b)("p",null,"There are several setting fields in the job:"),Object(l.b)("h3",{id:"name"},"Name"),Object(l.b)("p",null,"A name of the job."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "jobs": [{\n       "name": "build",\n       ...\n   }]\n')),Object(l.b)("h3",{id:"timeout"},"Timeout"),Object(l.b)("p",null,"An initial timeout of the job. It is expressed in seconds."),Object(l.b)("p",null,"If there are more than 10 historical succeded jobs then timeout is\nestimated automatically."),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "jobs": [{\n       "timeout": 1200,\n       ...\n   }]\n')),Object(l.b)("p",null,"Timeout is set to 1200 seconds, i.e. 20 minutes."),Object(l.b)("h2",{id:"steps-in-job"},"Steps in Job"),Object(l.b)("p",null,"The steps' job field defines what an agent should executed. Each step has indicated tool that is directly executing it. Steps are executed in the same order as they are defined."),Object(l.b)("p",null,"Common step fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"tool")," - a tool name that is executing the step; this is required"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"cwd")," - a current working directory where the step is executed; default is ",Object(l.b)("inlineCode",{parentName:"li"},"'.'")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"timeout")," - a timeout in seconds that limits time of step execution; it is guareded by an agent; if it is exceeded then the step is arbitrarly terminated; it is optional - default value is 60 seconds"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"attempts")," - a number of times the step is retried if if it returns error; default is 1"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sleep_time_after_attempt")," - a sleep time between subsequent execution attempts; default is 0")),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "jobs": [{\n       "steps": [{\n           "tool": "shell",\n           ...\n       }]\n   }]\n')),Object(l.b)("h2",{id:"built-in-step-tools"},"Built-in Step Tools"),Object(l.b)("h3",{id:"shell"},"Shell"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"shell")," is a tool that executes provided command in a shell."),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"cmd")," - a command to execute"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"user")," - this field allows for changing user e.g. to ",Object(l.b)("inlineCode",{parentName:"li"},"root"),"; by default kraken ",Object(l.b)("inlineCode",{parentName:"li"},"user")," is used"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"env")," - a dictionary with environment variables and their values")),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "steps": [{\n       "tool": "shell",\n       "cmd": "echo \'Hello World\'"\n   }]\n')),Object(l.b)("p",null,"Just say 'Hello World'."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "steps": [{\n       "tool": "shell",\n       "cmd": "./run-build.sh",\n       "cwd": "/build",\n       "user": "root",\n       "env": {\n           "ARCH": "arm64"\n           "JOBS": "8"\n       },\n       "timeout": 1200,\n       "attempts": 3,\n       "sleep_time_after_attempt": 10\n   }]\n')),Object(l.b)("p",null,"Run a build script in ",Object(l.b)("inlineCode",{parentName:"p"},"/build")," folder as ",Object(l.b)("inlineCode",{parentName:"p"},"root")," user. Pass two\nenvironment variables: ",Object(l.b)("inlineCode",{parentName:"p"},"ARCH")," and ",Object(l.b)("inlineCode",{parentName:"p"},"JOBS"),". The step should fit in 1200\nseconds ie. 20 minutes. If the commands returns non zero exit code\nthen it is repeated up to 3 times. There is a 10 seconds sleep time\nperiod between attempts."),Object(l.b)("p",null,"More examples can be found at ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Kraken-CI/workflow-examples/tree/main/shell"}),"https://github.com/Kraken-CI/workflow-examples/tree/main/shell"),"."),Object(l.b)("h3",{id:"git"},"Git"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"git")," is a tool that allows for checking out a Git repository. It clones a\nrepository indicated by an URK in ",Object(l.b)("inlineCode",{parentName:"p"},"checkout")," field and puts it in\n",Object(l.b)("inlineCode",{parentName:"p"},"destination")," folder. It also stores Git repository bundle in Kraken\nglobal storage for quiecker subsequent retrieval. If URL is using SSH\nprotocol and ",Object(l.b)("inlineCode",{parentName:"p"},"ssh-key")," field is set then it is used by ssh-agent for\npassing a key during Git cloning. If ",Object(l.b)("inlineCode",{parentName:"p"},"access-token")," is provided than\nit is embedded to URL in git clone instruction (see\n",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://docs.gitlab.com/ee/user/project/deploy_tokens/#git-clone-a-repository"}),"GitLab use case"),")."),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"checkout")," - an URL to the repository"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"branch")," - a branch to checkout, ",Object(l.b)("inlineCode",{parentName:"li"},"master")," is default"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"destination")," - a destination folder for the repository; it is optional"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ssh-key")," - an SSH key for ssh-agent"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"access-token")," - an access token for GitLab use case")),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "steps": [{\n       "tool": "git",\n       "checkout": "https://github.com/Kraken-CI/kraken.git",\n       "branch": "master"\n   }]\n')),Object(l.b)("p",null,"More examples can be found at TODO."),Object(l.b)("h3",{id:"artifacts"},"Artifacts"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"artifacts")," is a tool that allows for storing and retrieving artifacts in Kraken\nglobal ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"storage"}),"storage"),". They can be non public so they are only\navailable internally in Kraken to other stages but only in the same\nflow. If they are public then they are also presented in web UI and\ncan be downloaded by users."),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"action")," - an action that artifacts tool should execute: either\n",Object(l.b)("inlineCode",{parentName:"li"},"download")," or ",Object(l.b)("inlineCode",{parentName:"li"},"upload"),". ",Object(l.b)("inlineCode",{parentName:"li"},"upload")," is default action"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"public")," - determines if artifacts should be public and available to\nusers in web UI (",Object(l.b)("inlineCode",{parentName:"li"},"True"),") or if they should be only accessible\ninternally to other stages but only in the same flow (",Object(l.b)("inlineCode",{parentName:"li"},"False"),");\ndefault value is ",Object(l.b)("inlineCode",{parentName:"li"},"False")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"source")," - a path or list of paths that should be archived or\nretreived. A path can indicate a folder or a file; a path, in case\nof upload action, can contain globbing signs ",Object(l.b)("inlineCode",{parentName:"li"},"*")," or ",Object(l.b)("inlineCode",{parentName:"li"},"**"),"; a path can\nbe relative or absolute"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"destination")," - a path were the artifact(s) should be stored; in\ncase of download action, if the destination folder does not exist\nthen it is created; by default it is ",Object(l.b)("inlineCode",{parentName:"li"},"'.'"))),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "steps": [{\n       "tool": "artifacts",\n       "source": "a.txt"\n   }]\n')),Object(l.b)("p",null,"Default action is upload so here an ",Object(l.b)("inlineCode",{parentName:"p"},"a.txt")," file will be stored in\nglobal storage in root folder which is default."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "steps": [{\n       "tool": "artifacts",\n       "action": "download",\n       "source": "a.txt",\n       "destination": \'a/b/c"\n   }]\n')),Object(l.b)("p",null,"Here an ",Object(l.b)("inlineCode",{parentName:"p"},"a.txt")," file is downloaded from global storage. It is saved to\n",Object(l.b)("inlineCode",{parentName:"p"},"a/b/c")," folder. If it does not exist then it is created first."),Object(l.b)("p",null,"More examples can be found at ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Kraken-CI/workflow-examples/tree/main/artifacts"}),"https://github.com/Kraken-CI/workflow-examples/tree/main/artifacts"),"."),Object(l.b)("h3",{id:"cache"},"Cache"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"cache")," is a tool that allows for caching files. It quite often\nhappens that during a build there are some dependencies that are\ndownloaded from an external source over a network. Sometime there is\nlots of content to download or the network link is quite slow so in\neffect downloading this content may take significant amount of time.\nTo speed this process it is possible to cache these files after\ndownloading them. In the following build these files are first\nretrieved from cache and then they are updated only if needed."),Object(l.b)("p",null,"So cache tool exposes two actions: ",Object(l.b)("inlineCode",{parentName:"p"},"save")," and ",Object(l.b)("inlineCode",{parentName:"p"},"restore"),". Cached files\nare stored under indicted key in Kraken global storage. This key can\nbe statically set so the content is always the same. The key can be\nalso set dynamically based on some variables e.g. repository branch or\nCI/DEV flow kind."),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"action")," - an action that the tool should perform; it should be either ",Object(l.b)("inlineCode",{parentName:"li"},"store")," or ",Object(l.b)("inlineCode",{parentName:"li"},"restore")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"key")," - a key under which files are stored in or restored from cache"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"keys")," - a list of key under which files are restored from cache"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"paths")," - source paths used in ",Object(l.b)("inlineCode",{parentName:"li"},"store")," action"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"expiry")," - not implemented yet")),Object(l.b)("p",null,"Example:"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "steps": [{\n       "tool": "cache",\n       "action": "save",\n       "key": "one-key",\n       "paths": [\n            "abc"\n       ]\n   }]\n')),Object(l.b)("p",null,"Store all files from ",Object(l.b)("inlineCode",{parentName:"p"},"abc")," folder in cache under ",Object(l.b)("inlineCode",{parentName:"p"},"one-key")," key."),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'   "steps": [{\n       "tool": "cache",\n       "action": "restore",\n       "keys": ["one-key"]\n   }]\n')),Object(l.b)("p",null,"Restore all files under ",Object(l.b)("inlineCode",{parentName:"p"},"one-key")," key in cache to ",Object(l.b)("inlineCode",{parentName:"p"},"abc")," folder (the\ndestination folder was remembered during ",Object(l.b)("inlineCode",{parentName:"p"},"store")," action)."),Object(l.b)("p",null,"More examples can be found at ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Kraken-CI/workflow-examples/tree/main/cache"}),"https://github.com/Kraken-CI/workflow-examples/tree/main/cache"),"."),Object(l.b)("h3",{id:"pylint"},"PyLint"),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pylint_exe")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rcfile")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"modules_or_packages"))),Object(l.b)("h3",{id:"pytest"},"PyTest"),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pytest_exe")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"params")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pythonpath"))),Object(l.b)("h3",{id:"junit-collect"},"Junit Collect"),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"file_glob"))),Object(l.b)("h3",{id:"go-test"},"Go Test"),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"gotest_exe")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"params"))),Object(l.b)("h3",{id:"nglint"},"NgLint"),Object(l.b)("p",null,"No specific fields."),Object(l.b)("h3",{id:"cloc"},"Cloc"),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"not-match-f")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"exclude-dir"))),Object(l.b)("h3",{id:"rndtest"},"RndTest"),Object(l.b)("p",null,"Fields:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"count"))),Object(l.b)("h3",{id:"custom-tools"},"Custom Tools"),Object(l.b)("p",null,"More about custom tools in ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"tools#custom-tools"}),"Tools")," chapter."),Object(l.b)("h2",{id:"environment-in-job"},"Environment in Job"),Object(l.b)("p",null,"TODO"),Object(l.b)("h2",{id:"notification"},"Notification"),Object(l.b)("p",null,"TODO"),Object(l.b)("h2",{id:"timeout-1"},"Timeout"),Object(l.b)("p",null,"TODO"))}s.isMDXComponent=!0}}]);