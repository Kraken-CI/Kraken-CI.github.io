(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{117:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=o,m=u["".concat(a,".").concat(d)]||u[d]||b[d]||i;return n?r.a.createElement(m,s(s({ref:t},c),{},{components:n})):r.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var o=n(3),r=n(7),i=(n(0),n(117)),a={id:"tools",title:"Tools"},s={unversionedId:"tools",id:"tools",isDocsHomePage:!1,title:"Tools",description:"Tools Overview",source:"@site/docs/tools.md",slug:"/tools",permalink:"/docs/tools",editUrl:"https://github.com/kraken-ci/website/edit/master/docs/tools.md",version:"current",sidebar:"someSidebar",previous:{title:"Schema Variables",permalink:"/docs/schema-vars"},next:{title:"Secrets",permalink:"/docs/secrets"}},l=[{value:"Tools Overview",id:"tools-overview",children:[]},{value:"Custom Tools",id:"custom-tools",children:[{value:"Protocol Overview",id:"protocol-overview",children:[]},{value:"Tool Framework",id:"tool-framework",children:[]},{value:"Example of Simple Tool",id:"example-of-simple-tool",children:[]},{value:"Example of Testing Tool",id:"example-of-testing-tool",children:[]}]}],c={toc:l};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"tools-overview"},"Tools Overview"),Object(i.b)("p",null,"Tools are used to execute steps in a job. Each step indicates what\ntools should be used to its execution. It can be a ",Object(i.b)("inlineCode",{parentName:"p"},"shell")," to execute\ncommands, other programs, or a ",Object(i.b)("inlineCode",{parentName:"p"},"git")," tool for cloning Git\nrepository. A step can have several fields with values defined that\nare required by a tool or are optional."),Object(i.b)("p",null,"A tool communicates with Kraken agent using specific protocol. Thanks\nto this it is possible to write your own custom tools."),Object(i.b)("p",null,"There are several ways a tool can get in interaction with Kraken\nserver via Kraken agent. Tools can be:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"do nothing, just do its job and that's it"),Object(i.b)("li",{parentName:"ul"},"return list of all available test cases (eg. ",Object(i.b)("inlineCode",{parentName:"li"},"pytest")," tool); this\nallows pre-storing all test case results as ",Object(i.b)("inlineCode",{parentName:"li"},"not run")," initially and\nalso splitting execution of test cases to several jobs"),Object(i.b)("li",{parentName:"ul"},"report continuously test results (eg. ",Object(i.b)("inlineCode",{parentName:"li"},"pytest")," tool)"),Object(i.b)("li",{parentName:"ul"},"report continuously issues (eg. ",Object(i.b)("inlineCode",{parentName:"li"},"pylint")," tool)"),Object(i.b)("li",{parentName:"ul"},"report stored artifacts (eg. ",Object(i.b)("inlineCode",{parentName:"li"},"artifacts")," tool)")),Object(i.b)("p",null,"More about particular tools can be found\nin ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"schema#built-in-step-tools"}),"Workflow Schema chapter, in Tools section"),"."),Object(i.b)("h2",{id:"custom-tools"},"Custom Tools"),Object(i.b)("p",null,"Tools can be written in Python. It is possible to write them in other\nlanguages but for Python there is already a framework that makes some\nactions easier."),Object(i.b)("h3",{id:"protocol-overview"},"Protocol Overview"),Object(i.b)("p",null,"There is defined a protocol between Kraken agent and a tool. It works\ndifferently depending on the direction. Generally an agent invokes one\nof predefined commands of a tool and then a tool responds to the agent\nvia an HTTP connection using JSON as a response format."),Object(i.b)("p",null,"The commands expected by Kraken agent:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"get_commands")," - it should return list of commands exposed by a tool;\nthis command must be provided by every tool"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"collect_tests")," - it returns list of available tests according to\nspecification provided by step definition; optional"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"run")," - it should just execute a step; optional"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"run_tests")," - it executes tests according to specification provided\nby step definition and report results live, progresively, one by one\nif possible; optional"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"run_analysis")," - it should perform an analysis and report issues\nlive, progresively, one by one if possible")),Object(i.b)("p",null,"One of ",Object(i.b)("inlineCode",{parentName:"p"},"run*")," commands must be provided by a tool."),Object(i.b)("h3",{id:"tool-framework"},"Tool Framework"),Object(i.b)("p",null,"Handling of commands and sending reponses are quite automated by a\nPython tool framework. The framework required defining one of ",Object(i.b)("inlineCode",{parentName:"p"},"run*"),"\nfunctions and ",Object(i.b)("inlineCode",{parentName:"p"},"collect_tests")," function if wanted."),Object(i.b)("h3",{id:"example-of-simple-tool"},"Example of Simple Tool"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-python"}),"import os\nfrom . import utils\n\ndef run(step, **kwargs):\n    cmd = step['cmd']\n    cwd = step.get('cwd', None)\n    timeout = int(step.get('timeout', 60))\n    ret = utils.execute(cmd, cwd=cwd, timeout=timeout)\n    if ret != 0:\n        return ret, 'cmd exited with non-zero retcode: %s' % ret\n    return 0, ''\n")),Object(i.b)("p",null,"This is a simplified implementation of ",Object(i.b)("inlineCode",{parentName:"p"},"shell")," tool. It just executes\na ",Object(i.b)("inlineCode",{parentName:"p"},"cmd")," command provided in a step. It uses also optional ",Object(i.b)("inlineCode",{parentName:"p"},"cwd")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"timeout")," parameters provided in a step."),Object(i.b)("p",null,"Tool framework provides several helper modules. One of them is ",Object(i.b)("inlineCode",{parentName:"p"},"utils"),"\nthat offers an ",Object(i.b)("inlineCode",{parentName:"p"},"execute")," function. To use it impot the module:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-python"}),"from . import utils\n")),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"run")," functions must return an exit code (0 means all is ok) and a\nmessage that in case of an error describes the error (otherwise it\nreturns '' empty string)."),Object(i.b)("h3",{id:"example-of-testing-tool"},"Example of Testing Tool"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-python"}),"import random\n\ndef collect_tests(step):\n    # return list of available tests\n    tests = ['test.aaa', 'test.bbb', 'test.ccc']\n    return tests\n\ndef run_tests(step, report_result=None):\n    # Now the step contains list of tests reported\n    # by collect_tests function. If there is no collect_tests\n    # function then the run_tests function should determine\n    # on its own scope of tests based of step definition.\n    tests = step['tests']\n\n    for test in tests:\n        cmd = 'command to execute a test'\n        # status should indicate test result: 0 - not run, 1 - passed, 2 - failed,\n        # 3 - error, 4 - disabled/skip, 5 - unsupported\n        result = dict(cmd=cmd, test=test, status=random.choice([0, 1, 2, 3, 4, 5]))\n        # report_result is a callback provided by Kraken tool framework that sends back\n        # the test result to the server\n        report_result(result)\n\n    return 0, ''\n")),Object(i.b)("p",null,"The tool has hardcoded list of tests to execute regardless of step\ndefinition. Generally ",Object(i.b)("inlineCode",{parentName:"p"},"collect_tests")," function should return list of\ntests based of step definition. Then the ",Object(i.b)("inlineCode",{parentName:"p"},"run_tests"),' function receives\nlist of tests in step definition and then it "executes" them one by\none, and then reports them using ',Object(i.b)("inlineCode",{parentName:"p"},"report_result")," callback from Kraken\ntool framework."))}p.isMDXComponent=!0}}]);